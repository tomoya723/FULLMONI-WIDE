   1                             		.file	"r_cmt_rx.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.cmt_unlock_state,"ax",@progbits
   6                             	_cmt_unlock_state:
   7                             	.LFB12:
   8                             		.file 1 "../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c"
   1:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
   2:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * DISCLAIMER
   3:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prote
   5:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * applicable laws, including copyright laws. 
   6:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF 
   8:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIM
   9:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AF
  10:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY RE
  11:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * this software. By using this software, you agree to the additional terms and conditions found by 
  14:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * following link:
  15:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * http://www.renesas.com/disclaimer 
  16:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *
  17:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Copyright (C) 2013-2023 Renesas Electronics Corporation. All rights reserved.
  18:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
  19:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
  20:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * File Name    : r_cmt_rx.c
  21:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : This module creates timer ticks using CMT channels or one-shot events based on per
  22:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
  23:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
  24:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * History : DD.MM.YYYY Version Description
  25:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 06.11.2013 2.10    First GSCE Release.
  26:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 11.03.2014 2.20    Added support for RX110.
  27:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Fixes bug in R_CMT_Control CMT_RX_CMD_GET_NUM_CHANNELS command.
  28:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 22.04.2014 2.30    Added support for RX64M.
  29:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 10.11.2014 2.40    Added support for RX113.
  30:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 20.02.2015 2.50    Added support for RX71M.
  31:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 01.04.2015 2.60    Added support for RX231.
  32:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 30.09.2015 2.70    Added support for RX23T.
  33:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 01.10.2015 2.80    Added support for RX130.
  34:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 01.12.2015 2.90    Added support for RX230, RX24T.
  35:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 15.03.2016 3.00    Added support for RX65N.
  36:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 19.12.2016 3.10    Added support for RX24U, RX24T(512KB).
  37:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Fix to stop timer before callback function is executed.
  38:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 21.07.2017 3.20    Added support for RX65N-2M, RX130-512KB.
  39:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 28.09.2018 3.30    Added support for RX66T.
  40:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Added support for RTOS.
  41:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Fixed GSCE coding rule.
  42:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 01.02.2019 3.40    Added support for RX72T, RX65N-64pin
  43:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Added new feature: get/set interrupt priority of CMT channel.
  44:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 20.05.2019 4.00    Added support for GNUC and ICCRX.
  45:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 28.06.2019 4.10    Added support for RX23W.
  46:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 15.08.2019 4.20    Added support for RX72M.
  47:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Fixed warnings in IAR.
  48:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 25.11.2019 4.30    Added support RX13T, RX66N, RX72N.
  49:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Modified comment of API function to Doxygen style.
  50:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Added support for atomic control.
  51:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Removed support for Generation 1 devices.
  52:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Fixed to comply with GSCE Coding Standards Rev.6.00.
  53:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Changed for FIT+RTOS
  54:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 29.11.2019 4.31    Fixed issues in power_on() and power_off().
  55:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 31.03.2020 4.40    Added support for RX23E-A.
  56:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 29.05.2020 4.50    Added support BLE for RX23W; CMT2, CMT3 are protected for RX23W.
  57:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 31.08.2020 4.70    Fixed warning when using RI600V4 with device has 2 CMT channels
  58:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 31.03.2021 4.80    Added support for RX671.
  59:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 15.04.2021 4.90    Added support for RX140.
  60:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Updated Doxygen comment.
  61:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 27.12.2022 5.40    Updated macro definition enable and disable nested interrupt for CMT
  62:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 31.03.2023 5.50    Added support for RX26T.
  63:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Fixed to comply with GSCE Coding Standards Rev.6.5.0.
  64:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *         : 29.05.2023 5.60    Added support for RX23E-B.
  65:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                              Fixed to comply with GSCE Coding Standards Rev.6.5.0.
  66:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
  67:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
  68:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
  69:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** Includes   <System Includes> , "Project Includes"
  70:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
  71:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #include "platform.h"
  72:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #include "r_cmt_rx_config.h" /* Configuration header file */
  73:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #include "r_cmt_rx_if.h"     /* Interface header file */
  74:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
  75:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
  76:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** Macro definitions
  77:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
  78:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Define the number of CMT channels based on MCU type. */
  79:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if defined(BSP_MCU_RX64_ALL) || defined(BSP_MCU_RX113) || defined(BSP_MCU_RX71_ALL)    || \
  80:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     defined(BSP_MCU_RX231)    || defined(BSP_MCU_RX230) || defined(BSP_MCU_RX23W) || defined(BSP_MC
  81:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     defined(BSP_MCU_RX24_ALL) || defined(BSP_MCU_RX65_ALL) || defined(BSP_MCU_RX66_ALL) || defined(
  82:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     defined(BSP_MCU_RX671) || defined(BSP_MCU_RX26T)
  83:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
  84:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #define CMT_RX_NUM_CHANNELS        (4)
  85:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif defined(BSP_MCU_RX111)  || defined(BSP_MCU_RX110)    || defined(BSP_MCU_RX130)  || defined(BS
  86:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     defined(BSP_MCU_RX23E_A) || defined(BSP_MCU_RX140) || defined(BSP_MCU_RX23E_B)
  87:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #define CMT_RX_NUM_CHANNELS        (2)
  88:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
  89:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #error "Error! Number of channels for this MCU is not defined in r_cmt_rx.c"
  90:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
  91:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
  92:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if defined(BSP_MCU_RX23W)
  93:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #undef CMT_RX_NUM_CHANNELS
  94:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #define CMT_RX_NUM_CHANNELS (2)
  95:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif /* BSP_MCU_RX23W */
  96:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
  97:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Max number of ticks for counter without overflowing/underflowing. */
  98:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #define CMT_RX_MAX_TIMER_TICKS         (0x10000)
  99:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 100:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Starting with RX63x MCUs, there are 2 peripheral clocks: PCLKA and PCLKB. PCLKA is only used by 
 101:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****    This means that PCLKB would match functionality of PCLK in RX62x devices as far as the CMT is co
 102:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if defined(BSP_MCU_RX11_ALL) || defined(BSP_MCU_RX64_ALL) || defined(BSP_MCU_RX71_ALL) || defined(
 103:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     defined(BSP_MCU_RX23_ALL) || defined(BSP_MCU_RX13_ALL) || defined(BSP_MCU_RX24_ALL) || \
 104:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     defined(BSP_MCU_RX65_ALL) || defined(BSP_MCU_RX66_ALL) || defined(BSP_MCU_RX72_ALL) ||defined(B
 105:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     defined(BSP_MCU_RX140) || defined(BSP_MCU_RX26T)
 106:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #define CMT_PCLK_HZ                 (BSP_PCLKB_HZ)
 107:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 108:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #define CMT_PCLK_HZ                 (BSP_PCLK_HZ)
 109:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 110:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 111:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Which MCUs have register protection. */
 112:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if defined(BSP_MCU_RX11_ALL) || defined(BSP_MCU_RX64_ALL) || defined(BSP_MCU_RX71_ALL) || \
 113:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     defined(BSP_MCU_RX23_ALL) || defined(BSP_MCU_RX13_ALL) || defined(BSP_MCU_RX24_ALL) || \
 114:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     defined(BSP_MCU_RX65_ALL) || defined(BSP_MCU_RX66_ALL) || defined(BSP_MCU_RX72_ALL) || \
 115:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     defined(BSP_MCU_RX671) || defined(BSP_MCU_RX140) || defined(BSP_MCU_RX26T)
 116:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #define CMT_REG_PROTECT             (1)
 117:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 118:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #define CMT_REG_PROTECT             (0)
 119:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 120:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 121:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 122:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 123:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** Typedef definitions
 124:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
 125:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Enum for current mode of CMT channel. */
 126:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** typedef enum
 127:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 128:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     CMT_RX_MODE_DISABLED = 0,
 129:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     CMT_RX_MODE_PERIODIC,
 130:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     CMT_RX_MODE_ONE_SHOT
 131:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** } cmt_modes_t;
 132:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 133:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 134:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** Private global variables and functions
 135:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
 136:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Used to prevent having duplicate code for each channel. This only works if the channels are iden
 137:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****    different locations in memory). This is easy to tell by looking in iodefine.h and seeing if the 
 138:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****    was used for all channels. */
 139:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static volatile struct st_cmt0 R_BSP_EVENACCESS_SFR * const g_cmt_channels[CMT_RX_NUM_CHANNELS] =
 140:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 141:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Currently all RX MCUs have either 2 or 4 CMT channels. */
 142:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if   CMT_RX_NUM_CHANNELS == 4
 143:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* MCUs have 4 CMT channels. */
 144:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     &CMT0, &CMT1, &CMT2, &CMT3
 145:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif CMT_RX_NUM_CHANNELS == 2
 146:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     &CMT0, &CMT1
 147:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 148:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #error "Error! r_cmt_rx is not setup for this many CMT channels. Please refer to g_cmt_channels
 149:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 150:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** };
 151:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 152:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Holds current mode of each CMT channel. */
 153:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
 154:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static cmt_modes_t g_cmt_modes[CMT_RX_NUM_CHANNELS];
 155:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1    /* FreeRTOS */
 156:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if   CMT_RX_NUM_CHANNELS == 4
 157:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if BSP_CFG_RTOS_SYSTEM_TIMER == 0
 158:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         static cmt_modes_t g_cmt_modes[CMT_RX_NUM_CHANNELS] = {CMT_RX_MODE_PERIODIC, CMT_RX_MODE_DI
 159:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #elif BSP_CFG_RTOS_SYSTEM_TIMER == 1
 160:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         static cmt_modes_t g_cmt_modes[CMT_RX_NUM_CHANNELS] = {CMT_RX_MODE_DISABLED, CMT_RX_MODE_PE
 161:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #elif BSP_CFG_RTOS_SYSTEM_TIMER == 2
 162:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         static cmt_modes_t g_cmt_modes[CMT_RX_NUM_CHANNELS] = {CMT_RX_MODE_DISABLED, CMT_RX_MODE_DI
 163:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #elif BSP_CFG_RTOS_SYSTEM_TIMER == 3
 164:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         static cmt_modes_t g_cmt_modes[CMT_RX_NUM_CHANNELS] = {CMT_RX_MODE_DISABLED, CMT_RX_MODE_DI
 165:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #else
 166:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #error "Error! Invalid channel"
 167:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif
 168:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif CMT_RX_NUM_CHANNELS == 2
 169:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if BSP_CFG_RTOS_SYSTEM_TIMER == 0
 170:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         static cmt_modes_t g_cmt_modes[CMT_RX_NUM_CHANNELS] = {CMT_RX_MODE_PERIODIC, CMT_RX_MODE_DI
 171:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #elif BSP_CFG_RTOS_SYSTEM_TIMER == 1
 172:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         static cmt_modes_t g_cmt_modes[CMT_RX_NUM_CHANNELS] = {CMT_RX_MODE_DISABLED, CMT_RX_MODE_PE
 173:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #else
 174:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #error "Error! Invalid channel"
 175:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif
 176:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 177:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #error "Error! r_cmt_rx is not setup for this many CMT channels. Please refer to g_cmt_channels
 178:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 179:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* SEGGER embOS */
 180:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** //#elif BSP_CFG_RTOS_USED == 2
 181:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Micrium MicroC/OS */
 182:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** //#elif BSP_CFG_RTOS_USED == 3
 183:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
 184:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* CMT 1 or 2 channels are reserved for System & Trace timer. */
 185:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static cmt_modes_t g_cmt_modes[CMT_RX_NUM_CHANNELS] = {
 186:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /*---------- CMT0 initial value ----------*/
 187:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_SYSTEM_TIMER==0 || _RI_TRACE_TIMER==0
 188:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     CMT_RX_MODE_PERIODIC /* CMT0 is reserved for RI600V4/RI600PX. */
 189:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 190:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     CMT_RX_MODE_DISABLED /* CMT0 is unused. */
 191:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 192:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /*---------- CMT1 initial value ----------*/
 193:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_SYSTEM_TIMER==1 || _RI_TRACE_TIMER==1
 194:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     ,CMT_RX_MODE_PERIODIC  /* CMT1 is reserved for RI600V4/RI600PX. */
 195:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 196:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     ,CMT_RX_MODE_DISABLED  /* CMT1 is unused. */
 197:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 198:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /*-------------------- 2 pairs of CMT --------------------*/
 199:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_RX_NUM_CHANNELS > 2
 200:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /*---------- CMT2 initial value ----------*/
 201:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_SYSTEM_TIMER == 2 || _RI_TRACE_TIMER==2
 202:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     ,CMT_RX_MODE_PERIODIC /* CMT2 is reserved for RI600V4/RI600PX. */
 203:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 204:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     ,CMT_RX_MODE_DISABLED /* CMT2 is unused. */
 205:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 206:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /*---------- CMT3 initial value ----------*/
 207:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_SYSTEM_TIMER == 3 || _RI_TRACE_TIMER==3
 208:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     ,CMT_RX_MODE_PERIODIC  /* CMT3 is reserved for RI600V4/RI600PX. */
 209:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 210:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     ,CMT_RX_MODE_DISABLED  /* CMT3 is unused. */
 211:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 212:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /*--------------------------------------------------------*/
 213:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif/* CMT_RX_NUM_CHANNELS */
 214:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** };
 215:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else /* Non-OS & others */
 216:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static cmt_modes_t g_cmt_modes[CMT_RX_NUM_CHANNELS];
 217:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif /* BSP_CFG_RTOS_USED == 0 */
 218:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 219:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* This array holds the available clock dividers. For example, if PCLK/8 is available, then '8' wou
 220:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****    Note that the index of the divider in the array should correspond to the bit setting used for th
 221:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****    For example, 128 is at index 2 in the array and to choose PCLK/128 in the CMCR register you woul
 222:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****    bitfield to 2. */
 223:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static const uint32_t g_cmt_clock_dividers[] = { 8, 32, 128, 512 };
 224:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 225:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Array that holds user's callback functions. */
 226:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
 227:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void  (* g_cmt_callbacks[CMT_RX_NUM_CHANNELS])(void * pdata);
 228:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1    /* FreeRTOS */
 229:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void  (* g_cmt_callbacks[CMT_RX_NUM_CHANNELS])(void * pdata);
 230:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 2    /* SEGGER embOS */
 231:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 3    /* Micrium MicroC/OS */
 232:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
 233:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if CMT_RX_NUM_CHANNELS == 2
 234:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #if ((BSP_CFG_RTOS_SYSTEM_TIMER != 0 && _RI_TRACE_TIMER != 0) ||\
 235:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             (BSP_CFG_RTOS_SYSTEM_TIMER != 1 && _RI_TRACE_TIMER != 1))
 236:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void  (* g_cmt_callbacks[CMT_RX_NUM_CHANNELS])(void * pdata);
 237:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #endif
 238:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #else
 239:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             static void  (* g_cmt_callbacks[CMT_RX_NUM_CHANNELS])(void * pdata);
 240:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif
 241:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 242:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             static void  (* g_cmt_callbacks[CMT_RX_NUM_CHANNELS])(void * pdata);
 243:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 244:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 245:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Internal functions. */
 246:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static bool cmt_lock_state (void);
 247:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_unlock_state (void);
 248:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static bool cmt_find_channel (uint32_t * channel);
 249:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void power_on (uint32_t channel);
 250:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void power_off (uint32_t channel);
 251:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_counter_start (uint32_t channel);
 252:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_counter_start_priority (uint32_t channel, cmt_priority_t priority);
 253:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_counter_stop (uint32_t channel);
 254:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static bool cmt_setup_channel (uint32_t channel, uint32_t frequency_hz);
 255:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
 256:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_isr_common (uint32_t channel);
 257:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1    /* FreeRTOS */
 258:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_isr_common(uint32_t channel);
 259:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 2    /* SEGGER embOS */
 260:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 3    /* Micrium MicroC/OS */
 261:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
 262:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if CMT_RX_NUM_CHANNELS == 2
 263:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #if ((BSP_CFG_RTOS_SYSTEM_TIMER != 0 && _RI_TRACE_TIMER != 0) ||\
 264:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             (BSP_CFG_RTOS_SYSTEM_TIMER != 1 && _RI_TRACE_TIMER != 1))
 265:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             static void cmt_isr_common(uint32_t channel);
 266:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #endif
 267:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #else
 268:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         static void cmt_isr_common(uint32_t channel);
 269:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif
 270:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 271:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_isr_common(uint32_t channel);
 272:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 273:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static bool cmt_create (uint32_t frequency_hz, void (* callback)(void * pdata), cmt_modes_t mode, u
 274:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static bool cmt_create_priority (uint32_t frequency_hz, void (* callback)(void * pdata), cmt_modes_
 275:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 276:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 277:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: R_CMT_CreatePeriodic
 278:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
 279:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @brief This function finds an unused CMT channel, configures it for the requested frequency,
 280:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * associates a user callback function with the timer’s interrupt, and powers up and starts the ti
 281:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] frequency_hz Desired frequency in Hz(1 ~PCLK/8 Hz) note 1. The range and resolution of
 282:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The best pre-scaler for the CMT channel is chosen by the driver.\n
 283:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] callback Pointer to the user’s callback function.  It should receive a single void *
 284:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] *channel The CMT FIT module finds the first CMT channel that is not in use and assigns
 285:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * This allows multiple drivers to use the CMT driver without having to pre-assign all timer channel
 286:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * This argument provides a way for the driver to indicate back to the caller which channel has been
 287:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval true  Successful; CMT initialized
 288:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval false     No free CMT channels available, or invalid settings
 289:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @details The R_CMT_CreatePeriodic function finds an unused CMT channel, assigns it to the caller,
 290:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * and registers a user callback function to be called upon compare match events.\n
 291:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The CMT is configured to generate compare matches at the frequency specified in the call.\n
 292:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @note 1.  Maximum periodic frequency\n
 293:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * In hardware, the CMT timer maximum clocking speed is limited to PCLK/8.
 294:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * However, when using the periodic timer function to generate a clock, be aware that interrupt and 
 295:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * As requested frequency rises, interrupt and callback processing will take an increasing percentag
 296:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * At some point, too much time is consumed to leave any time for other useful work.
 297:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * So this will limit the maximum frequency that can be generated.
 298:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *  The maximum practical frequency will depend on your system design, but in general, frequencies u
 299:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** */
 300:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** bool R_CMT_CreatePeriodic(uint32_t frequency_hz, void(* callback)(void * pdata), uint32_t * channel
 301:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 302:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return cmt_create (frequency_hz, callback, CMT_RX_MODE_PERIODIC, channel);
 303:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** } 
 304:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function R_CMT_CreatePeriodic */
 305:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 306:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 307:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: R_CMT_CreatePeriodicAssignChannelPriority
 308:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * *************************************************************************************************
 309:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @brief This function configures desired CMT channel for the requested frequency and desired inter
 310:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * associates a user callback function with the timer’s interrupt, powers up and starts the timer
 311:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] frequency_hz Desired frequency in Hz(1 ~PCLK/8 Hz) note 1. The range and resolution of
 312:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The best pre-scaler for the CMT channel is chosen by the driver.\n
 313:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] callback Pointer to the user’s callback function. It should receive a single void * 
 314:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] channel Desired CMT channel that is used to configure.\n
 315:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] priority Desired priority level of timer’s interrupt:\n
 316:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_0: Interrupt is disabled\n
 317:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_1: Lowest interrupt priority\n
 318:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_2\n
 319:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_3\n
 320:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_4\n
 321:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_5\n
 322:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_6\n
 323:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_7\n
 324:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_8\n
 325:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_9\n
 326:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_10\n
 327:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_11\n
 328:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_12\n
 329:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_13\n
 330:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_14\n
 331:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_15: Highest interrupt priority\n
 332:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval true  Successful; CMT initialized\n
 333:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval false     No free CMT channels available, or invalid settings\n
 334:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @details The R_CMT_CreatePeriodicAssignChannelPriority assigns desired CMT channel to the caller 
 335:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * interrupt priority level and registers a user callback function to be called upon compare match e
 336:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The CMT is configured to generate compare matches at the frequency specified in the call.\n
 337:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @note 1.  Maximum periodic frequency\n
 338:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * In hardware, the CMT timer maximum clocking speed is limited to PCLK/8.
 339:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * However, when using the periodic timer function to generate a clock, be aware that interrupt and 
 340:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * As requested frequency rises, interrupt and callback processing will take an increasing percentag
 341:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * At some point, too much time is consumed to leave any time for other useful work.
 342:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * So this will limit the maximum frequency that can be generated.
 343:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *  The maximum practical frequency will depend on your system design, but in general, frequencies u
 344:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * 2. Invalid settings\n
 345:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The function will return false if one of the following invalid settings occurs:
 346:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The  invalid channel, invalid priority, channel was in used, or frequency could not be used.
 347:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** */
 348:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** bool R_CMT_CreatePeriodicAssignChannelPriority(uint32_t frequency_hz, void(* callback)(void * pdata
 349:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 350:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return cmt_create_priority(frequency_hz, callback, CMT_RX_MODE_PERIODIC, channel, priority);
 351:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 352:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function R_CMT_CreatePeriodicAssignChannelPriority */
 353:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 354:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 355:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: R_CMT_CreateOneShot
 356:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * *************************************************************************************************
 357:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****  @brief This function finds an unused CMT channel, configures it for the requested period,
 358:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * associates a user callback function with the timer’s interrupt, and powers up and starts the ti
 359:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] period_us Desired period in microseconds (1 ~ 1,000,000us).
 360:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The range and resolution of the timer is determined by settings of the peripheral clock.
 361:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The best pre-scaler for the CMT channel is chosen by the driver.\n
 362:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] callback Pointer to the user’s callback function.  It should data a single void * ar
 363:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] channel The CMT FIT module finds the first CMT channel that is not in use and assigns 
 364:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * This allows multiple drivers to use the CMT driver without having to pre-assign all timer channel
 365:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * This argument provides a way for the driver to indicate back to the caller which channel has been
 366:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval true  Successful; CMT initialized\n
 367:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval false     No free CMT channels available, or invalid settings\n
 368:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @details The R_CMT_CreateOneShot function finds an unused CMT channel, assigns it to the caller,
 369:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *  and registers a user callback function to be called upon the compare match event.\n
 370:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The CMT is configured to generate a compare match after the period specified in the call.
 371:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The timer is shut down after a single compare match event.\n
 372:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** */
 373:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** bool R_CMT_CreateOneShot(uint32_t period_us, void(* callback)(void * pdata), uint32_t * channel)
 374:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {    
 375:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return cmt_create((1000000/period_us), callback, CMT_RX_MODE_ONE_SHOT, channel);
 376:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 377:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function R_CMT_CreateOneShot */
 378:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 379:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 380:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: R_CMT_CreateOneShotAssignChannelPriority
 381:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
 382:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @brief This function configures the desired CMT channel for the requested period with desired int
 383:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * associates a user callback function with the timer’s interrupt, powers up and starts the timer
 384:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] period_us Desired period in microseconds (1 ~ 1,000,000us).
 385:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The range and resolution of the timer is determined by settings of the peripheral clock.
 386:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The best pre-scaler for the CMT channel is chosen by the driver.\n
 387:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] callback Pointer to the user’s callback function. It should data a single void * arg
 388:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] channel Desired CMT channel that is used to configure.\n
 389:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] priority Desired priority level of timer’s interrupt:\n
 390:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_0: Interrupt is disabled\n
 391:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_1: Lowest interrupt priority\n
 392:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_2\n
 393:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_3\n
 394:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_4\n
 395:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_5\n
 396:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_6\n
 397:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_7\n
 398:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_8\n
 399:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_9\n
 400:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_10\n
 401:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_11\n
 402:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_12\n
 403:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_13\n
 404:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_14\n
 405:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_PRIORITY_15: Highest interrupt priority\n
 406:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval true  Successful; CMT initialized\n
 407:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval false     No free CMT channels available, or invalid settings\n
 408:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @details The R_CMT_CreateOneShotAssignChannelPriority assigns the desired
 409:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT channel to the caller with desired interrupt priority level,
 410:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * and registers a user callback function to be called upon the compare match event.
 411:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The CMT is configured to generate a compare match after the period specified in the call.
 412:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The timer is shut down after a single compare match event.\n
 413:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @note 1.  Invalid settings\n
 414:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The function will return false if one of the following invalid settings occurs:
 415:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * invalid channel, invalid priority, channel was in used, or frequency could not be used.\n
 416:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** */
 417:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** bool R_CMT_CreateOneShotAssignChannelPriority(uint32_t period_us, void(* callback)(void * pdata), u
 418:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 419:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return cmt_create_priority((1000000/period_us), callback, CMT_RX_MODE_ONE_SHOT, channel, priori
 420:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 421:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function R_CMT_CreateOneShotAssignChannelPriority */
 422:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 423:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 424:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: R_CMT_Stop
 425:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
 426:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @brief Stops a CMT channel and powers down the CMT unit if possible
 427:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] channel The CMT timer channel to stop\n
 428:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval true  Successful; CMT closed\n
 429:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval false     Invalid settings \n
 430:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @details This function frees the CMT channel by clearing its assignment and disabling the associa
 431:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The CMT channel cannot be used again until it has been reopened with either 
 432:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * the R_CMT_CreatePeriodic or the R_CMT_CreateOneShot function.
 433:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * If the CMT channel is already used as RTOS system timer, a call to this function with this CMT ch
 434:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * will result in FALSE being returned
 435:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** */
 436:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** bool R_CMT_Stop(uint32_t channel)
 437:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 438:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Make sure valid channel number was input. */
 439:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
 440:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (channel >= CMT_RX_NUM_CHANNELS)
 441:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1        /* FreeRTOS */
 442:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if ((channel >= CMT_RX_NUM_CHANNELS) || (BSP_CFG_RTOS_SYSTEM_TIMER == channel))
 443:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* SEGGER embOS */
 444:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** //#elif BSP_CFG_RTOS_USED == 2
 445:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Micrium MicroC/OS */
 446:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** //#elif BSP_CFG_RTOS_USED == 3
 447:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED   == 4  /* Renesas RI600V4 & RI600PX */
 448:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if ((channel >= CMT_RX_NUM_CHANNELS) || (BSP_CFG_RTOS_SYSTEM_TIMER == channel) || (_RI_TRACE_TI
 449:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else /* Non-OS & others */
 450:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (channel >= CMT_RX_NUM_CHANNELS)
 451:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif/* BSP_CFG_RTOS_USED */
 452:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 453:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Invalid channel number was used.*/
 454:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /*In case using RX23W, Channel 2 and 3 are reserved by BLE FIT modules v.1.00*/
 455:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         return false;
 456:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 457:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 458:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Stop counter. */
 459:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_counter_stop(channel);
 460:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 461:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Turn off power to channel. */
 462:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     power_off(channel);
 463:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 464:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Set mode to disabled. */
 465:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     g_cmt_modes[channel] = CMT_RX_MODE_DISABLED;
 466:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 467:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Set channel as available. */
 468:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_HardwareUnlock((mcu_lock_t)(BSP_LOCK_CMT0 + channel));
 469:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 470:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return true;
 471:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** } /* End of function R_CMT_Stop */
 472:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 473:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 474:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: R_CMT_Control
 475:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
 476:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @brief This function provides various ways to control and monitor a CMT channel
 477:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] channel CMT channel number to control.\n
 478:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] command Command to execute:\n
 479:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_IS_CHANNEL_COUNTING\n
 480:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_PAUSE\n
 481:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_RESUME\n
 482:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_RESTART\n
 483:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_GET_NUM_CHANNELS\n
 484:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_SET_PRIORITY\n
 485:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_GET_PRIORITY\n
 486:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @param[in] *pdata
 487:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval true  The command completed properly. Check pdata
 488:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @retval false     The command did not complete properly
 489:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @details This function provides a number of commands:\n
 490:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_IS_CHANNEL_COUNTING tells if a CMT channel is currently running.  Check *pdata.\n
 491:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_PAUSE pauses a timer without closing it (without powering it off).\n
 492:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_RESUME restarts a paused timer without resetting the counter to zero\n
 493:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_RESTART restarts a paused timer after resetting the counter to zero\n
 494:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_GET_NUM_CHANNELS returns the total number of channels available\n
 495:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_SET_PRIORITY sets the interrupt priority of the CMT channel.\n
 496:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_GET_PRIORITY gets the interrupt priority of the CMT channel.\n
 497:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * If the CMT channel is already used as RTOS system timer, a call to this function with this CMT ch
 498:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * and any of CMT_RX_CMD_IS_CHANNEL_COUNTING, CMT_RX_CMD_PAUSE,
 499:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * CMT_RX_CMD_RESUME, CMT_RX_CMD_RESTART as command, will result in FALSE being returned.
 500:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** */
 501:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** bool R_CMT_Control(uint32_t channel, cmt_commands_t command, void * pdata)
 502:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bool ret = true;
 504:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 505:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 506:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
 507:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1    /* FreeRTOS */
 508:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (CMT_RX_CMD_GET_NUM_CHANNELS == command)
 509:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 510:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Return the number of CMT channels on this MCU. */
 511:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         *(uint32_t *)pdata = CMT_RX_NUM_CHANNELS;
 512:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         ret = true;
 513:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         return ret;
 514:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 515:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     else if ((channel == BSP_CFG_RTOS_SYSTEM_TIMER) || (channel >= CMT_RX_NUM_CHANNELS))
 516:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 517:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Specified CMT channel is being used by RTOS or Invalid channel */
 518:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Modifying is NOT allowed for the other commands. */
 519:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         ret = false;
 520:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         return ret;
 521:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 522:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     else
 523:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 524:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Do nothing. */
 525:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 526:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* SEGGER embOS */
 527:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** //#elif BSP_CFG_RTOS_USED == 2
 528:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Micrium MicroC/OS */
 529:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** //#elif BSP_CFG_RTOS_USED == 3
 530:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
 531:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 532:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (CMT_RX_CMD_GET_NUM_CHANNELS == command)
 533:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 534:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Return the number of CMT channels on this MCU. */
 535:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         *(uint32_t *)pdata = CMT_RX_NUM_CHANNELS;
 536:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         ret = true;
 537:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         return ret;
 538:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 539:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     else if ((channel == BSP_CFG_RTOS_SYSTEM_TIMER) || (channel == _RI_TRACE_TIMER) || (channel >= 
 540:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 541:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Specified CMT channel is being used by RTOS or Invalid channel */
 542:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Modifying is NOT allowed for the other commands. */
 543:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         ret = false;
 544:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         return ret;
 545:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 546:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     else
 547:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 548:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Do nothing. */
 549:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 550:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else /* Non-OS & others */
 551:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif/* BSP_CFG_RTOS_USED */
 552:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 553:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Process command that was input. */
 554:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     switch (command)
 555:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 556:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case CMT_RX_CMD_IS_CHANNEL_COUNTING:
 557:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 558:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Check input channel. */
 559:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (channel < CMT_RX_NUM_CHANNELS)
 560:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 561:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Valid channel input. Is this channel currently counting? */
 562:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 if (CMT_RX_MODE_DISABLED == g_cmt_modes[channel])
 563:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 564:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     /* pdata = false*/
 565:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     *(bool *)pdata = false;
 566:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 567:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 else
 568:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 569:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     /* pdata = true*/
 570:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     *(bool *)pdata = true;
 571:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 572:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 573:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             else
 574:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 575:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 ret = false;
 576:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 577:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 578:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 579:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0   /*Unreachable code because of checksabove*/
 580:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case CMT_RX_CMD_GET_NUM_CHANNELS:
 581:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 582:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* number of CMT channels */
 583:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             *(uint32_t *)pdata = CMT_RX_NUM_CHANNELS;
 584:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 585:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 586:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 587:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case CMT_RX_CMD_PAUSE:
 588:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 589:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (channel < CMT_RX_NUM_CHANNELS)
 590:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 591:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Valid channel input. Is this channel currently counting? */
 592:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 if (CMT_RX_MODE_DISABLED != g_cmt_modes[channel])
 593:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 594:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 595:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     switch (channel)
 596:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 597:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 0:
 598:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 599:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /*CMT0.CMCNT count is stopped*/
 600:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             CMT.CMSTR0.BIT.STR0 = 0;
 601:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 602:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 603:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 1:
 604:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 605:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /*CMT1.CMCNT count is stopped*/
 606:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             CMT.CMSTR0.BIT.STR1 = 0;
 607:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 608:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 609:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         #if   CMT_RX_NUM_CHANNELS == 4
 610:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 2:
 611:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 612:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /*CMT2.CMCNT count is stopped*/
 613:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             CMT.CMSTR1.BIT.STR2 = 0;
 614:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 615:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 616:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 3:
 617:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 618:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /*CMT3.CMCNT count is stopped*/
 619:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             CMT.CMSTR1.BIT.STR3 = 0;
 620:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 621:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 622:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         #endif
 623:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 624:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         default:
 625:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 626:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 627:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 628:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 629:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 631:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             else
 632:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 633:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 ret = false;
 634:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 635:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 637:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 638:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Both restart and resume do the same thing, except restart zeros the counter first */ 
 639:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case CMT_RX_CMD_RESTART:
 640:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case CMT_RX_CMD_RESUME:
 641:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 642:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (channel < CMT_RX_NUM_CHANNELS)
 643:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 644:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Stop the timer once to prevent an interrupt from occurring */
 645:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 switch (channel)
 646:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 647:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     case 0:
 648:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 649:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         /*CMT0.CMCNT count is stopped*/
 650:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         CMT.CMSTR0.BIT.STR0 = 0;
 651:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 652:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 653:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     case 1:
 654:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 655:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         /*CMT1.CMCNT count is stopped*/
 656:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         CMT.CMSTR0.BIT.STR1 = 0;
 657:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 658:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 659:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if   CMT_RX_NUM_CHANNELS == 4
 660:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     case 2:
 661:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 662:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         /*CMT2.CMCNT count is stopped*/
 663:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         CMT.CMSTR1.BIT.STR2 = 0;
 664:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 665:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 666:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     case 3:
 667:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 668:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         /*CMT3.CMCNT count is stopped*/
 669:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         CMT.CMSTR1.BIT.STR3 = 0;
 670:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 671:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 672:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 673:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     default:
 674:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 675:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 676:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 677:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 678:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 679:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Valid channel input. Is this channel currently counting? */
 680:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 if (CMT_RX_MODE_DISABLED != g_cmt_modes[channel])
 681:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 682:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 683:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     if (CMT_RX_CMD_RESTART == command)
 684:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 685:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         /* For restarting, clear counter. */
 686:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         (*g_cmt_channels[channel]).CMCNT = 0;
 687:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 688:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 689:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     switch (channel)
 690:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 691:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 0:
 692:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 693:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /*CMT0.CMCNT count is started*/
 694:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             CMT.CMSTR0.BIT.STR0 = 1;
 695:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 696:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 697:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 1:
 698:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 699:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /*CMT1.CMCNT count is started*/
 700:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             CMT.CMSTR0.BIT.STR1 = 1;
 701:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 702:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 703:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if   CMT_RX_NUM_CHANNELS == 4
 704:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 2:
 705:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 706:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /*CMT2.CMCNT count is started*/
 707:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             CMT.CMSTR1.BIT.STR2 = 1;
 708:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 709:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 710:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 3:
 711:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 712:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /*CMT3.CMCNT count is started*/
 713:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             CMT.CMSTR1.BIT.STR3 = 1;
 714:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 715:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 716:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 717:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         default:
 718:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 719:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 720:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 721:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 722:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 723:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 724:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             else
 725:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 726:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 ret = false;
 727:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 728:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 729:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 730:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case CMT_RX_CMD_SET_PRIORITY:
 731:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 732:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Make sure that pdata is NOT NULL */
 733:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (NULL == pdata)
 734:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 735:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 ret = false;
 736:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 737:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             else
 738:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 739:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Get input priority value from pdata */
 740:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 priority = *(cmt_priority_t *)pdata;
 741:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 742:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 743:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Check if interrupt priority and channel are correct or not */
 744:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (true == ret)
 745:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 746:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /*Casting to match type of "int8_t" */
 747:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 if ((CMT_PRIORITY_0 > (int8_t)priority)
 748:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     || (CMT_PRIORITY_MAX < priority)
 749:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     || (CMT_RX_NUM_CHANNELS <= channel))
 750:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 751:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     ret = false;
 752:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 753:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 754:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 755:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (true == ret)
 756:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 757:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Acquire lock on input channel to check if it was created or not */
 758:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 if (true == R_BSP_HardwareLock((mcu_lock_t)(BSP_LOCK_CMT0 + channel)))
 759:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 760:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     /* Channel is NOT created yet, release lock on channel */
 761:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     R_BSP_HardwareUnlock((mcu_lock_t)(BSP_LOCK_CMT0 + channel));
 762:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 763:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     /* Set return value to false */
 764:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     ret = false;
 765:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 766:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 else
 767:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 768:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     switch (channel)
 769:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 770:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 0:
 771:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 772:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /* Set interrupt priority using ICU register. */
 773:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             IPR(CMT0, CMI0) = priority;
 774:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 775:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 776:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 777:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 1:
 778:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 779:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /* Set interrupt priority using ICU register. */
 780:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             IPR(CMT1, CMI1) = priority;
 781:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 782:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 783:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 784:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_RX_NUM_CHANNELS == 4
 785:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 2:
 786:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 787:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /* Set interrupt priority using ICU register. */
 788:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             IPR(CMT2, CMI2) = priority;
 789:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 790:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 791:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 792:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         case 3:
 793:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 794:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /* Set interrupt priority using ICU register. */
 795:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             IPR(CMT3, CMI3) = priority;
 796:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 797:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 798:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 799:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 800:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         default:
 801:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         {
 802:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             /* Should never get here. */
 803:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             R_BSP_NOP();
 804:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 805:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 806:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 807:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 808:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 809:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 810:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 811:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         
 812:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case CMT_RX_CMD_GET_PRIORITY:
 813:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 814:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Make sure that CMT channel is correct, pdata is NOT NULL */
 815:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if ((CMT_RX_NUM_CHANNELS <= channel) || (NULL == pdata))
 816:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 817:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 ret = false;
 818:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 819:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             else
 820:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 821:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 switch(channel)
 822:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 823:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     case 0:
 824:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 825:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         /* Get priority of CMT channel 0 from IPR register */
 826:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         priority = (cmt_priority_t)IPR(CMT0, CMI0);
 827:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 828:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 829:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 830:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     case 1:
 831:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 832:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         /* Get priority of CMT channel 1 from IPR register */
 833:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         priority = (cmt_priority_t)IPR(CMT1, CMI1);
 834:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 835:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 836:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 837:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_RX_NUM_CHANNELS == 4
 838:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     case 2:
 839:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 840:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         /* Get priority of CMT channel 2 from IPR register */
 841:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         priority = (cmt_priority_t)IPR(CMT2, CMI2);
 842:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 843:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 844:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 845:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     case 3:
 846:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 847:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         /* Get priority of CMT channel 3 from IPR register */
 848:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         priority = (cmt_priority_t)IPR(CMT3, CMI3);
 849:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 850:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 851:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     
 852:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     default:
 853:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 854:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         /* Should never get here. */
 855:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         ret = false;
 856:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 857:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 858:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 859:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 860:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 861:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Update pdata value with priority for output */
 862:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 *(cmt_priority_t *)pdata = priority;
 863:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 864:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 865:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 866:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 867:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         default:
 868:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 869:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             ret = false;
 870:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 871:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 872:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 873:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 874:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return ret;
 875:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 876:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 877:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * End of function R_CMT_Control
 878:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
 879:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 880:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 881:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt_create
 882:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Sets up a CMT channel based on user input options.
 883:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : frequency_hz -
 884:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Frequency in Hz of how often to call the callback function.
 885:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                callback -
 886:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Which function to call when timer expires.
 887:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                mode -
 888:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Current mode of CMT channel
 889:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                channel -
 890:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Pointer of where to store which channel was used.
 891:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : true - 
 892:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel initialized successfully.
 893:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                false -
 894:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Invalid channel or period could not be used.
 895:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
 896:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static bool cmt_create(uint32_t frequency_hz, void(* callback)(void * pdata), cmt_modes_t mode, uin
 897:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 898:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Return value. */
 899:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bool     ret = false;    
 900:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 901:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Grab state to make sure we do not interfere with another operation. */
 902:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (cmt_lock_state() != true)
 903:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 904:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Another operation is already in progress. */
 905:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         return false;
 906:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 907:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 908:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Was a channel found? */
 909:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (false == cmt_find_channel(channel))
 910:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 911:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Channel not found or not available. */
 912:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         ret = false;
 913:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 914:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     else
 915:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 916:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Look to see if we can support this frequency. */
 917:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         ret = cmt_setup_channel(*channel, frequency_hz);
 918:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     
 919:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Set up ICU registers, save callback function, and start counter if valid divider was fou
 920:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         if (true == ret)
 921:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {        
 922:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Set mode of operation. */
 923:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_modes[*channel] = mode;
 924:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     
 925:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Save callback function to be used. */
 926:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
 927:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[*channel] = callback;
 928:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1        /* FreeRTOS */
 929:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[*channel] = callback;
 930:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 2    /* SEGGER embOS */
 931:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 3    /* Micrium MicroC/OS */
 932:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
 933:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if CMT_RX_NUM_CHANNELS == 2
 934:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #if ((BSP_CFG_RTOS_SYSTEM_TIMER != 0 && _RI_TRACE_TIMER != 0) ||\
 935:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             (BSP_CFG_RTOS_SYSTEM_TIMER != 1 && _RI_TRACE_TIMER != 1))
 936:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[*channel] = callback;
 937:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #endif
 938:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #else
 939:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[*channel] = callback;
 940:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif
 941:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
 942:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[*channel] = callback;
 943:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 944:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 945:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     
 946:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Start channel counting. */
 947:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             cmt_counter_start(*channel);
 948:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 949:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         else
 950:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 951:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Could not support input frequency. Release lock on channel. */
 952:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_HardwareUnlock((mcu_lock_t)(BSP_LOCK_CMT0 + (*channel)));
 953:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 954:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 955:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 956:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Release state so other operations can be performed. */
 957:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_unlock_state();
 958:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 959:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return ret;
 960:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 961:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_create */
 962:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 963:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 964:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt_create_priority
 965:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Sets up a CMT channel based on user input options with interrupt priority.
 966:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : frequency_hz -
 967:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Frequency in Hz of how often to call the callback function.
 968:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                callback -
 969:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Which function to call when timer expires.
 970:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                mode -
 971:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Current mode of CMT channel
 972:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                channel -
 973:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Which channel is used to create.
 974:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                priority -
 975:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Which interrupt priority is used to assign.
 976:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : true -
 977:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel initialized successfully.
 978:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                false -
 979:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Invalid channel, invalid priority, channel was in used, or frequency could not
 980:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
 981:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static bool cmt_create_priority(uint32_t frequency_hz, void(* callback)(void * pdata), cmt_modes_t 
 982:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 983:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Return value. */
 984:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bool     ret = false;
 985:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 986:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Check if interrupt priority and channel are correct or not. */
 987:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if ((CMT_PRIORITY_0 > (int8_t)priority) || (CMT_PRIORITY_MAX < priority) || (CMT_RX_NUM_CHANNEL
 988:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 989:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         return false;
 990:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 991:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 992:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Grab state to make sure we do not interfere with another operation. */
 993:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (cmt_lock_state() != true)
 994:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 995:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Another operation is already in progress. */
 996:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         return false;
 997:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 998:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 999:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Acquire lock on input channel. If return value is true then this channel is NOT in use. */
1000:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (true == R_BSP_HardwareLock((mcu_lock_t)(BSP_LOCK_CMT0 + channel)))
1001:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1002:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Look to see if we can support this frequency. */
1003:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         ret = cmt_setup_channel(channel, frequency_hz);
1004:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1005:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Set up ICU registers, save callback function, and start counter if valid divider was fou
1006:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         if (true == ret)
1007:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1008:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Set mode of operation. */
1009:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_modes[channel] = mode;
1010:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1011:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Save callback function to be used. */
1012:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
1013:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[channel] = callback;
1014:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1        /* FreeRTOS */
1015:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[channel] = callback;
1016:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 2    /* SEGGER embOS */
1017:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 3    /* Micrium MicroC/OS */
1018:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
1019:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if CMT_RX_NUM_CHANNELS == 2
1020:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #if ((BSP_CFG_RTOS_SYSTEM_TIMER != 0 && _RI_TRACE_TIMER != 0) ||\
1021:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             (BSP_CFG_RTOS_SYSTEM_TIMER != 1 && _RI_TRACE_TIMER != 1))
1022:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[channel] = callback;
1023:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #endif
1024:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #else
1025:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[channel] = callback;
1026:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif
1027:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else
1028:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[channel] = callback;
1029:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1030:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1031:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Start channel counting. */
1032:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             cmt_counter_start_priority(channel, priority);
1033:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1034:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         else
1035:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1036:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Could not support input frequency. Release lock on channel. */
1037:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_HardwareUnlock((mcu_lock_t)(BSP_LOCK_CMT0 + (channel)));
1038:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1039:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1040:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1041:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Release state so other operations can be performed. */
1042:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_unlock_state();
1043:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1044:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return ret;
1045:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1046:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_create_priority */
1047:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1048:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1049:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt_lock_state
1050:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Attempt to lock the state so that we right to perform an operation.
1051:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : none
1052:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : true - 
1053:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    State was obtained
1054:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                false - 
1055:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    State was not obtained because code is busy with another on-going operation.
1056:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1057:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static bool cmt_lock_state(void)
1058:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
1059:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bool ret;
1060:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1061:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Attempt to acquire lock. */
1062:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     ret = R_BSP_HardwareLock(BSP_LOCK_CMT);
1063:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1064:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return ret;
1065:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1066:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_lock_state */
1067:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1068:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1069:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt_unlock_state
1070:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Release state so that other operations can be performed.
1071:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : none
1072:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1073:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1074:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_unlock_state(void)
1075:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
   9                             		.loc 1 1075 1 view -0
1076:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Release lock. */
1077:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_HardwareUnlock (BSP_LOCK_CMT);
  10                             		.loc 1 1077 5 view .LVU1
  11 0000 66 51                   		mov.L	#5, r1
  12 0002 05 00 00 00             		bsr	_R_BSP_HardwareUnlock
  13                             	.LVL0:
1078:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
  14                             		.loc 1 1078 1 is_stmt 0 view .LVU2
  15 0006 02                      		rts
  16                             	.LFE12:
  18                             		.section	.text.cmt_lock_state,"ax",@progbits
  20                             	_cmt_lock_state:
  21                             	.LFB11:
1058:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bool ret;
  22                             		.loc 1 1058 1 is_stmt 1 view -0
1059:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
  23                             		.loc 1 1059 5 view .LVU4
1062:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
  24                             		.loc 1 1062 5 view .LVU5
1062:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
  25                             		.loc 1 1062 11 is_stmt 0 view .LVU6
  26 0000 66 51                   		mov.L	#5, r1
  27 0002 05 00 00 00             		bsr	_R_BSP_HardwareLock
  28                             	.LVL1:
1064:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
  29                             		.loc 1 1064 5 is_stmt 1 view .LVU7
1065:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_lock_state */
  30                             		.loc 1 1065 1 is_stmt 0 view .LVU8
  31 0006 02                      		rts
  32                             	.LFE11:
  34                             		.section	.text.cmt_find_channel,"ax",@progbits
  36                             	_cmt_find_channel:
  37                             	.LVL2:
  38                             	.LFB13:
1079:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_unlock_state */
1080:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1081:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1082:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt_find_channel
1083:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Attempt to find open CMT channel to use.
1084:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : channel - 
1085:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel number if channel was found.
1086:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : true -
1087:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel was found and locked.
1088:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                false -
1089:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    No channels available.
1090:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1091:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static bool cmt_find_channel(uint32_t * channel)
1092:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
  39                             		.loc 1 1092 1 is_stmt 1 view -0
  40                             		.loc 1 1092 1 is_stmt 0 view .LVU10
  41 0000 6E 7A                   		pushm	r7-r10
  42                             	.LCFI0:
  43 0002 EF 1A                   		mov.L	r1, r10
1093:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bool     channel_found = false;
  44                             		.loc 1 1093 5 is_stmt 1 view .LVU11
  45                             	.LVL3:
1094:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     uint32_t i;
  46                             		.loc 1 1094 5 view .LVU12
1095:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1096:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Look for an available channel. */
1097:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* WAIT_LOOP */
1098:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     for (i = 0; i < CMT_RX_NUM_CHANNELS; i++)
  47                             		.loc 1 1098 5 view .LVU13
  48                             		.loc 1 1098 12 is_stmt 0 view .LVU14
  49 0004 66 07                   		mov.L	#0, r7
  50                             	.LVL4:
  51                             	.L4:
  52                             		.loc 1 1098 5 discriminator 1 view .LVU15
  53 0006 61 37                   		cmp	#3, r7
  54 0008 24 15                   		bgtu	.L9
1099:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1100:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
1101:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1    /* FreeRTOS */
1102:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         if (i == BSP_CFG_RTOS_SYSTEM_TIMER)
1103:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1104:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Found CMT channel is being used for RTOS. */
1105:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             continue;
1106:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1107:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* SEGGER embOS */
1108:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** //#elif BSP_CFG_RTOS_USED == 2
1109:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* Micrium MicroC/OS */
1110:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** //#elif BSP_CFG_RTOS_USED == 3
1111:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
1112:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         if (i == BSP_CFG_RTOS_SYSTEM_TIMER || i == _RI_TRACE_TIMER)
1113:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1114:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Found CMT channel is being used for RTOS. */
1115:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             continue;
1116:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1117:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else /* Non-OS & others */
1118:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif/* BSP_CFG_RTOS_USED */
1119:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Look for an available channel. */
1120:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         if (true == R_BSP_HardwareLock((mcu_lock_t)(BSP_LOCK_CMT0 + i)))
  55                             		.loc 1 1120 9 is_stmt 1 view .LVU16
  56                             		.loc 1 1120 21 is_stmt 0 view .LVU17
  57 000a 71 71 06                		add	#6, r7, r1
  58 000d 05 00 00 00             		bsr	_R_BSP_HardwareLock
  59                             	.LVL5:
  60 0011 CF 15                   		mov.B	r1, r5
  61                             		.loc 1 1120 12 view .LVU18
  62 0013 61 01                   		cmp	#0, r1
  63 0015 1D                      		bne	.L10
1098:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
  64                             		.loc 1 1098 43 discriminator 2 view .LVU19
  65 0016 62 17                   		add	#1, r7
  66                             	.LVL6:
1098:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
  67                             		.loc 1 1098 43 discriminator 2 view .LVU20
  68 0018 2E EE                   		bra	.L4
  69                             	.L10:
1121:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1122:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Channel found. */
1123:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             *channel = i;
  70                             		.loc 1 1123 13 is_stmt 1 view .LVU21
  71                             		.loc 1 1123 22 is_stmt 0 view .LVU22
  72 001a E3 A7                   		mov.L	r7, [r10]
1124:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             channel_found = true;
  73                             		.loc 1 1124 13 is_stmt 1 view .LVU23
  74                             	.LVL7:
1125:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             
1126:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;            
  75                             		.loc 1 1126 13 view .LVU24
  76 001c 0B                      		bra	.L6
  77                             	.LVL8:
  78                             	.L9:
1093:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     uint32_t i;
  79                             		.loc 1 1093 14 is_stmt 0 view .LVU25
  80 001d 66 05                   		mov	#0, r5
  81                             	.LVL9:
  82                             	.L6:
1127:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1128:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }        
1129:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1130:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return channel_found;
  83                             		.loc 1 1130 5 is_stmt 1 view .LVU26
1131:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
  84                             		.loc 1 1131 1 is_stmt 0 view .LVU27
  85 001f 5B 51                   		movu.B	r5, r1
  86 0021 3F 7A 04                		rtsd	#16, r7-r10
  87                             		.loc 1 1131 1 view .LVU28
  88                             	.LFE13:
  90                             		.section	.text.power_on,"ax",@progbits
  92                             	_power_on:
  93                             	.LVL10:
  94                             	.LFB14:
1132:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_find_channel */
1133:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1134:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1135:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: power_on
1136:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Enables CMT channel.
1137:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : channel - 
1138:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel number to enable.
1139:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1140:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1141:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void power_on(uint32_t channel)
1142:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
  95                             		.loc 1 1142 1 is_stmt 1 view -0
  96                             		.loc 1 1142 1 is_stmt 0 view .LVU30
  97 0000 7E A7                   		push.l	r7
  98                             	.LCFI1:
  99 0002 60 40                   		sub	#4, r0
 100                             	.LCFI2:
 101 0004 EF 17                   		mov.L	r1, r7
1143:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if ((R_BSP_VERSION_MAJOR == 5) && (R_BSP_VERSION_MINOR >= 30)) || (R_BSP_VERSION_MAJOR >= 6)
1144:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bsp_int_ctrl_t int_ctrl;
 102                             		.loc 1 1144 5 is_stmt 1 view .LVU31
1145:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1146:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1147:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_REG_PROTECT == 1
1148:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Enable writing to MSTP registers. */
1149:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_RegisterProtectDisable(BSP_REG_PROTECT_LPC_CGC_SWR);
 103                             		.loc 1 1149 5 view .LVU32
 104 0006 66 11                   		mov.L	#1, r1
 105                             	.LVL11:
 106                             		.loc 1 1149 5 is_stmt 0 view .LVU33
 107 0008 05 00 00 00             		bsr	_R_BSP_RegisterProtectDisable
 108                             	.LVL12:
1150:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1151:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1152:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if ((R_BSP_VERSION_MAJOR == 5) && (R_BSP_VERSION_MINOR >= 30)) || (R_BSP_VERSION_MAJOR >= 6)
1153:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EMPTY, BSP_INT_CMD_FIT_INTERRUPT_DISABLE, &int_ctrl);
 109                             		.loc 1 1153 5 is_stmt 1 view .LVU34
 110 000c EF 03                   		mov.L	r0, r3
 111 000e 66 62                   		mov.L	#6, r2
 112 0010 75 41 6E                		mov.L	#0x6e, r1
 113 0013 05 00 00 00             		bsr	_R_BSP_InterruptControl
 114                             	.LVL13:
1154:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1155:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1156:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Enable selected CMT Channel. Go ahead and make sure counter is stopped too. */
1157:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     switch (channel)
 115                             		.loc 1 1157 5 view .LVU35
 116 0017 61 17                   		cmp	#1, r7
 117 0019 20 3B                   		beq	.L12
 118 001b 61 07                   		cmp	#0, r7
 119 001d 20 1F                   		beq	.L13
 120 001f 61 27                   		cmp	#2, r7
 121 0021 20 4B                   		beq	.L14
 122 0023 61 37                   		cmp	#3, r7
 123 0025 20 5F                   		beq	.L15
 124                             	.LVL14:
 125 0027 03                      		.balign 8,3,1
 126                             	.L16:
1158:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1159:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 0:
1160:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1161:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Bring module out of stop state. */
1162:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             MSTP(CMT0) = 0;
1163:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1164:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1165:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR0.BIT.STR0 = 0;
1166:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1167:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1168:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 1:
1169:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1170:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Bring module out of stop state. */
1171:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             MSTP(CMT1) = 0;
1172:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1173:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1174:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR0.BIT.STR1 = 0;        
1175:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1176:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1177:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if   CMT_RX_NUM_CHANNELS == 4
1178:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 2:
1179:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1180:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Bring module out of stop state. */
1181:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             MSTP(CMT2) = 0;
1182:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1183:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1184:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR1.BIT.STR2 = 0;        
1185:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1186:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1187:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 3:
1188:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1189:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Bring module out of stop state. */
1190:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             MSTP(CMT3) = 0;
1191:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1192:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1193:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR1.BIT.STR3 = 0;       
1194:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1195:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1196:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1197:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         default:
1198:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1199:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Should never get here. Valid channel number is checked above. */
1200:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1201:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1202:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1203:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1204:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if ((R_BSP_VERSION_MAJOR == 5) && (R_BSP_VERSION_MINOR >= 30)) || (R_BSP_VERSION_MAJOR >= 6)
1205:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EMPTY, BSP_INT_CMD_FIT_INTERRUPT_ENABLE, &int_ctrl);
 127                             		.loc 1 1205 5 view .LVU36
 128 0028 EF 03                   		mov.L	r0, r3
 129 002a 66 52                   		mov.L	#5, r2
 130 002c 75 41 6E                		mov.L	#0x6e, r1
 131 002f 05 00 00 00             		bsr	_R_BSP_InterruptControl
 132                             	.LVL15:
1206:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1207:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1208:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_REG_PROTECT == 1
1209:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1210:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Disable writing to MSTP registers. */
1211:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_RegisterProtectEnable(BSP_REG_PROTECT_LPC_CGC_SWR);
 133                             		.loc 1 1211 5 view .LVU37
 134 0033 66 11                   		mov.L	#1, r1
 135 0035 05 00 00 00             		bsr	_R_BSP_RegisterProtectEnable
 136                             	.LVL16:
1212:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1213:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 137                             		.loc 1 1213 1 is_stmt 0 view .LVU38
 138 0039 3F 77 02                		rtsd	#8, r7-r7
 139                             	.LVL17:
 140                             	.L13:
1162:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 141                             		.loc 1 1162 13 is_stmt 1 view .LVU39
1162:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 142                             		.loc 1 1162 24 is_stmt 0 view .LVU40
 143 003c FB 7E 00 00 08          		mov.L	#0x80000, r7
 144                             	.LVL18:
1162:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 145                             		.loc 1 1162 24 view .LVU41
 146 0041 A9 75                   		mov.L	16[r7], r5
 147 0043 7A F5                   		bclr	#15, r5
 148 0045 A1 75                   		mov.L	r5, 16[r7]
1165:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 149                             		.loc 1 1165 13 is_stmt 1 view .LVU42
1165:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 150                             		.loc 1 1165 33 is_stmt 0 view .LVU43
 151 0047 FB 7E 00 80 08          		mov.L	#0x88000, r7
 152 004c DC 75                   		mov.W	[r7], r5
 153 004e 7A 05                   		bclr	#0, r5
 154 0050 D3 75                   		mov.W	r5, [r7]
1166:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 155                             		.loc 1 1166 13 is_stmt 1 view .LVU44
 156 0052 2E D6                   		bra	.L16
 157                             	.LVL19:
 158                             	.L12:
1171:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 159                             		.loc 1 1171 13 view .LVU45
1171:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 160                             		.loc 1 1171 24 is_stmt 0 view .LVU46
 161 0054 FB 7E 00 00 08          		mov.L	#0x80000, r7
 162                             	.LVL20:
1171:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 163                             		.loc 1 1171 24 view .LVU47
 164 0059 A9 75                   		mov.L	16[r7], r5
 165 005b 7A F5                   		bclr	#15, r5
 166 005d A1 75                   		mov.L	r5, 16[r7]
1174:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 167                             		.loc 1 1174 13 is_stmt 1 view .LVU48
1174:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 168                             		.loc 1 1174 33 is_stmt 0 view .LVU49
 169 005f FB 7E 00 80 08          		mov.L	#0x88000, r7
 170 0064 DC 75                   		mov.W	[r7], r5
 171 0066 7A 15                   		bclr	#1, r5
 172 0068 D3 75                   		mov.W	r5, [r7]
1175:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 173                             		.loc 1 1175 13 is_stmt 1 view .LVU50
 174 006a 2E BE                   		bra	.L16
 175                             	.LVL21:
 176                             	.L14:
1181:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 177                             		.loc 1 1181 13 view .LVU51
1181:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 178                             		.loc 1 1181 24 is_stmt 0 view .LVU52
 179 006c FB 7E 00 00 08          		mov.L	#0x80000, r7
 180                             	.LVL22:
1181:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 181                             		.loc 1 1181 24 view .LVU53
 182 0071 A9 75                   		mov.L	16[r7], r5
 183 0073 7A E5                   		bclr	#14, r5
 184 0075 A1 75                   		mov.L	r5, 16[r7]
1184:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 185                             		.loc 1 1184 13 is_stmt 1 view .LVU54
1184:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 186                             		.loc 1 1184 33 is_stmt 0 view .LVU55
 187 0077 FB 7E 00 80 08          		mov.L	#0x88000, r7
 188 007c 9A 75                   		mov.W	16[r7], r5
 189 007e 7A 05                   		bclr	#0, r5
 190 0080 92 75                   		mov.W	r5, 16[r7]
1185:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 191                             		.loc 1 1185 13 is_stmt 1 view .LVU56
 192 0082 2E A6                   		bra	.L16
 193                             	.LVL23:
 194                             	.L15:
1190:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 195                             		.loc 1 1190 13 view .LVU57
1190:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 196                             		.loc 1 1190 24 is_stmt 0 view .LVU58
 197 0084 FB 7E 00 00 08          		mov.L	#0x80000, r7
 198                             	.LVL24:
1190:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 199                             		.loc 1 1190 24 view .LVU59
 200 0089 A9 75                   		mov.L	16[r7], r5
 201 008b 7A E5                   		bclr	#14, r5
 202 008d A1 75                   		mov.L	r5, 16[r7]
1193:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 203                             		.loc 1 1193 13 is_stmt 1 view .LVU60
1193:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 204                             		.loc 1 1193 33 is_stmt 0 view .LVU61
 205 008f FB 7E 00 80 08          		mov.L	#0x88000, r7
 206 0094 9A 75                   		mov.W	16[r7], r5
 207 0096 7A 15                   		bclr	#1, r5
 208 0098 92 75                   		mov.W	r5, 16[r7]
1194:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 209                             		.loc 1 1194 13 is_stmt 1 view .LVU62
 210 009a 2E 8E                   		bra	.L16
 211                             	.LFE14:
 213 009c 76 10 01 00             		.section	.text.cmt_setup_channel,"ax",@progbits
 215                             	_cmt_setup_channel:
 216                             	.LVL25:
 217                             	.LFB19:
1214:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1215:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * End of function power_on
1216:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1217:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1218:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1219:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: power_off
1220:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Disables CMT channel.
1221:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : channel - 
1222:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel number to disable.
1223:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1224:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1225:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void power_off(uint32_t channel)
1226:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
1227:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if ((R_BSP_VERSION_MAJOR == 5) && (R_BSP_VERSION_MINOR >= 30)) || (R_BSP_VERSION_MAJOR >= 6)
1228:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bsp_int_ctrl_t int_ctrl;
1229:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1230:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1231:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_REG_PROTECT == 1
1232:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1233:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Enable writing to MSTP registers. */
1234:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_RegisterProtectDisable(BSP_REG_PROTECT_LPC_CGC_SWR);
1235:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1236:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1237:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if ((R_BSP_VERSION_MAJOR == 5) && (R_BSP_VERSION_MINOR >= 30)) || (R_BSP_VERSION_MAJOR >= 6)
1238:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EMPTY, BSP_INT_CMD_FIT_INTERRUPT_DISABLE, &int_ctrl);
1239:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1240:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1241:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Enable selected CMT Channel. Go ahead and make sure counter is stopped too. Since each MSTP 
1242:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****        2 channels, make sure to only disable CMT unit when both channels are off. */
1243:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     switch (channel)
1244:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1245:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 0:
1246:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1247:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1248:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR0.BIT.STR0 = 0;
1249:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1250:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Only turn off CMT unit if both channels are off. */
1251:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (CMT_RX_MODE_DISABLED == g_cmt_modes[1])
1252:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1253:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Put module in stop state. */
1254:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 MSTP(CMT0) = 1;
1255:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1256:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1257:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1258:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1259:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 1:
1260:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1261:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1262:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR0.BIT.STR1 = 0;        
1263:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1264:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Only turn off CMT unit if both channels are off. */
1265:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (CMT_RX_MODE_DISABLED == g_cmt_modes[0])
1266:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1267:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Put module in stop state. */
1268:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 MSTP(CMT1) = 1;
1269:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1270:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1271:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1272:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1273:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if   CMT_RX_NUM_CHANNELS == 4
1274:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 2:
1275:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1276:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1277:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR1.BIT.STR2 = 0;        
1278:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1279:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Only turn off CMT unit if both channels are off. */
1280:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (CMT_RX_MODE_DISABLED == g_cmt_modes[3])
1281:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1282:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Put module in stop state. */
1283:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 MSTP(CMT2) = 1;
1284:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1285:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1286:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1287:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1288:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 3:
1289:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1290:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1291:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR1.BIT.STR3 = 0;       
1292:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1293:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Only turn off CMT unit if both channels are off. */
1294:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (CMT_RX_MODE_DISABLED == g_cmt_modes[2])
1295:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1296:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Put module in stop state. */
1297:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 MSTP(CMT3) = 1;
1298:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1299:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1300:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1301:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1302:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1303:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         default:
1304:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1305:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Should never get here. Valid channel number is checked above. */
1306:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1307:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1308:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1309:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1310:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if ((R_BSP_VERSION_MAJOR == 5) && (R_BSP_VERSION_MINOR >= 30)) || (R_BSP_VERSION_MAJOR >= 6)
1311:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EMPTY, BSP_INT_CMD_FIT_INTERRUPT_ENABLE, &int_ctrl);
1312:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1313:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1314:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_REG_PROTECT == 1
1315:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Disable writing to MSTP registers. */
1316:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_RegisterProtectEnable(BSP_REG_PROTECT_LPC_CGC_SWR);
1317:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1318:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1319:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1320:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * End of function power_off
1321:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1322:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1323:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1324:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt_counter_start
1325:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Starts a CMT channel counting.
1326:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : channel -
1327:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel number to use.
1328:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1329:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1330:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_counter_start(uint32_t channel)
1331:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
1332:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Enable compare match interrupt. */
1333:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     (*g_cmt_channels[channel]).CMCR.BIT.CMIE = 1;
1334:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1335:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Clear counter. */
1336:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     (*g_cmt_channels[channel]).CMCNT = 0;
1337:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1338:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Start counter channel. */
1339:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     switch (channel)
1340:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1341:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 0:
1342:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1343:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Setup ICU registers. */
1344:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT0, CMI0)  = 0;                /* Clear any previously pending interrupts */
1345:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT0, CMI0) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
1346:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT0, CMI0));                /* Enable compare match 
1347:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1348:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Start counter. */
1349:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR0.BIT.STR0 = 1;
1350:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1351:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1352:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 1:
1353:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1354:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Setup ICU registers. */
1355:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT1, CMI1)  = 0;                /* Clear any previously pending interrupts */
1356:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT1, CMI1) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
1357:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT1, CMI1));                /* Enable compare match 
1358:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1359:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Start counter. */
1360:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR0.BIT.STR1 = 1;
1361:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1362:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1363:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if   CMT_RX_NUM_CHANNELS == 4
1364:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 2:
1365:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1366:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Setup ICU registers. */
1367:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT2, CMI2)  = 0;                /* Clear any previously pending interrupts */
1368:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT2, CMI2) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
1369:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT2, CMI2));                /* Enable compare match 
1370:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1371:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Start counter. */
1372:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR1.BIT.STR2 = 1;
1373:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1374:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1375:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 3:
1376:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1377:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Setup ICU registers. */
1378:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT3, CMI3)  = 0;                /* Clear any previously pending interrupts */
1379:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT3, CMI3) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
1380:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT3, CMI3));                /* Enable compare match 
1381:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1382:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Start counter. */
1383:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR1.BIT.STR3 = 1;
1384:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1385:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1386:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1387:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         default:
1388:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1389:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Should never get here. Valid channel number is checked above. */
1390:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1391:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1392:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1393:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1394:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1395:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * End of function cmt_counter_start
1396:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1397:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1398:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1399:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt_counter_start_priority
1400:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Starts a CMT channel counting with interrupt priority.
1401:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : channel -
1402:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel number to use.
1403:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                priority -
1404:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Which interrupt priority is used to assign.
1405:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1406:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1407:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_counter_start_priority(uint32_t channel, cmt_priority_t priority)
1408:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
1409:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Enable compare match interrupt. */
1410:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     (*g_cmt_channels[channel]).CMCR.BIT.CMIE = 1;
1411:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1412:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Clear counter. */
1413:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     (*g_cmt_channels[channel]).CMCNT = 0;
1414:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1415:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Start counter channel. */
1416:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     switch (channel)
1417:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1418:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 0:
1419:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1420:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Setup ICU registers. */
1421:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT0, CMI0)  = 0;                /* Clear any previously pending interrupts */
1422:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT0, CMI0) = priority;         /* Set interrupt priority */
1423:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT0, CMI0));                /* Enable compare match 
1424:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1425:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Start counter. */
1426:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR0.BIT.STR0 = 1;
1427:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1428:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1429:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 1:
1430:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1431:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Setup ICU registers. */
1432:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT1, CMI1)  = 0;                /* Clear any previously pending interrupts */
1433:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT1, CMI1) = priority;         /* Set interrupt priority */
1434:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT1, CMI1));                /* Enable compare match 
1435:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1436:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Start counter. */
1437:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR0.BIT.STR1 = 1;
1438:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1439:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1440:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if   CMT_RX_NUM_CHANNELS == 4
1441:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 2:
1442:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1443:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Setup ICU registers. */
1444:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT2, CMI2)  = 0;                /* Clear any previously pending interrupts */
1445:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT2, CMI2) = priority;         /* Set interrupt priority */
1446:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT2, CMI2));                /* Enable compare match 
1447:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1448:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Start counter. */
1449:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR1.BIT.STR2 = 1;
1450:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1451:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1452:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 3:
1453:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1454:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Setup ICU registers. */
1455:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT3, CMI3)  = 0;                /* Clear any previously pending interrupts */
1456:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT3, CMI3) = priority;         /* Set interrupt priority */
1457:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT3, CMI3));                /* Enable compare match 
1458:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1459:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Start counter. */
1460:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR1.BIT.STR3 = 1;
1461:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1462:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1463:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1464:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         default:
1465:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1466:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Should never get here. Valid channel number is checked above. */
1467:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1468:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1469:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1470:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1471:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1472:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * End of function cmt_counter_start_priority
1473:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1474:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1475:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1476:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt_counter_stop
1477:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Stops a CMT channel counting.
1478:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : channel -
1479:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel number to use.
1480:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1481:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1482:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static void cmt_counter_stop(uint32_t channel)
1483:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
1484:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Stop counter channel. */
1485:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     switch (channel)
1486:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1487:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 0:
1488:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1489:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1490:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR0.BIT.STR0 = 0;
1491:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1492:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Set ICU registers. */
1493:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestDisable(VECT(CMT0, CMI0));            /* Disable compare match in
1494:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT0, CMI0) = 0;            /* Set interrupt priority */
1495:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT0, CMI0)  = 0;            /* Clear any previously pending interrupts */
1496:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1497:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1498:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 1:
1499:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1500:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1501:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR0.BIT.STR1 = 0;
1502:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Set ICU registers. */
1504:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestDisable(VECT(CMT1, CMI1));            /* Disable compare match in
1505:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT1, CMI1) = 0;            /* Set interrupt priority */
1506:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT1, CMI1)  = 0;            /* Clear any previously pending interrupts */
1507:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1508:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1509:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if   CMT_RX_NUM_CHANNELS == 4
1510:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 2:
1511:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1512:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1513:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR1.BIT.STR2 = 0;
1514:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1515:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Set ICU registers. */
1516:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestDisable(VECT(CMT2, CMI2));            /* Disable compare match in
1517:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT2, CMI2) = 0;            /* Set interrupt priority */
1518:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT2, CMI2)  = 0;            /* Clear any previously pending interrupts */
1519:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1520:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1521:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         case 3:
1522:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1523:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Stop counter. */
1524:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             CMT.CMSTR1.BIT.STR3 = 0;
1525:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1526:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Set ICU registers. */
1527:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestDisable(VECT(CMT3, CMI3));            /* Disable compare match in
1528:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT3, CMI3) = 0;            /* Set interrupt priority */
1529:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT3, CMI3)  = 0;            /* Clear any previously pending interrupts */
1530:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1531:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1532:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1533:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         default:
1534:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1535:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Should never get here. Valid channel number is checked above. */
1536:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
1537:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1538:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1539:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1540:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1541:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * End of function cmt_counter_stop
1542:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1543:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1544:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1545:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1546:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt_setup_channel
1547:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Sets dividers and counter so compare match occurs at input frequency.
1548:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : channel - 
1549:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel number to use.
1550:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                frequency_hz -
1551:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Frequency at which to set CMT channel
1552:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : true -
1553:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel setup completed.
1554:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                false -
1555:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Channel setup failed.
1556:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1557:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** static bool cmt_setup_channel(uint32_t channel, uint32_t frequency_hz)
1558:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 218                             		.loc 1 1558 1 view -0
1559:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     uint32_t i;
 219                             		.loc 1 1559 5 view .LVU64
1560:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bool     ret = false;
 220                             		.loc 1 1560 5 view .LVU65
1561:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1562:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Requested frequency must not be higher than PCLK. */
1563:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (((uint32_t)CMT_PCLK_HZ / 8) >= frequency_hz)
 221                             		.loc 1 1563 5 view .LVU66
 222                             		.loc 1 1563 8 is_stmt 0 view .LVU67
 223 0000 77 02 E0 70 72          		cmp	#0x7270e0, r2
 224 0005 25 2F                   		bleu	.L23
1560:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bool     ret = false;
 225                             		.loc 1 1560 14 view .LVU68
 226 0007 66 01                   		mov	#0, r1
 227                             	.LVL26:
1564:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1565:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Choose clock. This is done by looking through the available dividers to see if we can ma
1566:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****            input by the user. */
1567:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* WAIT_LOOP */   
1568:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         for (i = 0; i < ((sizeof(g_cmt_clock_dividers))/(sizeof(g_cmt_clock_dividers[0]))); i++)
1569:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1570:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Determine minimum frequency this divider can hit. For example, if a PCLK/8 is used a
1571:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                the minimum frequency we can support is around 91.5Hz. This obtained by doing the fo
1572:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                (PCLK / divider) / max_counter_value
1573:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                Example:
1574:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                (48,000,000 / 8) / 65,536 = 91.5 */
1575:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (frequency_hz > (((uint32_t)CMT_PCLK_HZ / g_cmt_clock_dividers[i]) / (uint32_t)CMT_R
1576:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1577:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Enable peripheral channel. */
1578:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 power_on(channel);
1579:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1580:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* We can use this divider. Figure out counter ticks needed for this frequency. */
1581:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 (*g_cmt_channels[channel]).CMCOR = (uint16_t)((((uint32_t)CMT_PCLK_HZ /g_cmt_clock_
1582:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1583:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1584:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Set clock divider to be used. */
1585:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 (*g_cmt_channels[channel]).CMCR.BIT.CKS = i;
1586:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1587:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Save that we did find a valid divider. */
1588:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 ret = true;
1589:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1590:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* No need to check other dividers. */
1591:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 break;
1592:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1593:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1594:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1595:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1596:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return ret;
 228                             		.loc 1 1596 5 is_stmt 1 view .LVU69
1597:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 229                             		.loc 1 1597 1 is_stmt 0 view .LVU70
 230 0009 64 11                   		and #1, r1
 231                             	.LVL27:
 232                             		.loc 1 1597 1 view .LVU71
 233 000b 02                      		rts
 234                             	.LVL28:
 235                             	.L28:
 236                             	.LCFI3:
 237                             		.loc 1 1597 1 view .LVU72
 238 000c EF 26                   		mov.L	r2, r6
 239 000e EF 1B                   		mov.L	r1, r11
1578:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 240                             		.loc 1 1578 17 is_stmt 1 view .LVU73
 241 0010 05 00 00 00             		bsr	_power_on
 242                             	.LVL29:
1581:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 243                             		.loc 1 1581 17 view .LVU74
1581:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 244                             		.loc 1 1581 112 is_stmt 0 view .LVU75
 245 0014 FC 27 6A                		divu	r6, r10
1581:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 246                             		.loc 1 1581 33 view .LVU76
 247 0017 FB 52 00 00 00 00       		mov.L	#_g_cmt_channels, r5
 248 001d FE 6B 55                		mov.L	[r11,r5], r5
1581:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 249                             		.loc 1 1581 52 view .LVU77
 250 0020 60 1A                   		sub	#1, r10
1581:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 251                             		.loc 1 1581 50 view .LVU78
 252 0022 D7 5A 02                		mov.W	r10, 4[r5]
1585:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 253                             		.loc 1 1585 17 is_stmt 1 view .LVU79
1585:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 254                             		.loc 1 1585 57 is_stmt 0 view .LVU80
 255 0025 DC 5A                   		mov.W	[r5], r10
 256 0027 64 37                   		and #3, r7
 257                             	.LVL30:
1585:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 258                             		.loc 1 1585 57 view .LVU81
 259 0029 75 2A FC                		and #-4, r10
 260 002c 57 A7                   		or	r10, r7
 261 002e D3 57                   		mov.W	r7, [r5]
1588:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 262                             		.loc 1 1588 17 is_stmt 1 view .LVU82
 263                             	.LVL31:
1591:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 264                             		.loc 1 1591 17 view .LVU83
1588:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 265                             		.loc 1 1588 21 is_stmt 0 view .LVU84
 266 0030 66 11                   		mov	#1, r1
1591:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 267                             		.loc 1 1591 17 view .LVU85
 268 0032 2E 29                   		bra	.L20
 269                             	.LVL32:
 270                             	.L23:
 271                             	.LCFI4:
1558:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     uint32_t i;
 272                             		.loc 1 1558 1 view .LVU86
 273 0034 6E 6B                   		pushm	r6-r11
 274                             	.LCFI5:
1568:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 275                             		.loc 1 1568 16 view .LVU87
 276 0036 66 07                   		mov.L	#0, r7
 277                             	.L19:
 278                             	.LVL33:
1568:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 279                             		.loc 1 1568 9 discriminator 1 view .LVU88
 280 0038 61 37                   		cmp	#3, r7
 281 003a 24 1F                   		bgtu	.L27
1575:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 282                             		.loc 1 1575 13 is_stmt 1 view .LVU89
1575:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 283                             		.loc 1 1575 78 is_stmt 0 view .LVU90
 284 003c FB A2 00 00 00 00       		mov.L	#_g_cmt_clock_dividers, r10
 285 0042 FE 67 A5                		mov.L	[r7,r10], r5
1575:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 286                             		.loc 1 1575 56 view .LVU91
 287 0045 FB A2 00 87 93 03       		mov.L	#0x3938700, r10
 288 004b FC 27 5A                		divu	r5, r10
1575:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 289                             		.loc 1 1575 83 view .LVU92
 290 004e FD 90 A5                		shlr	#16, r10, r5
1575:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 291                             		.loc 1 1575 16 view .LVU93
 292 0051 47 25                   		cmp	r2, r5
 293 0053 23 B9                   		bltu	.L28
1568:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 294                             		.loc 1 1568 94 discriminator 2 view .LVU94
 295 0055 62 17                   		add	#1, r7
 296                             	.LVL34:
1568:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 297                             		.loc 1 1568 94 discriminator 2 view .LVU95
 298 0057 2E E1                   		bra	.L19
 299                             	.L27:
1560:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 300                             		.loc 1 1560 14 view .LVU96
 301 0059 66 01                   		mov	#0, r1
 302                             	.LVL35:
 303                             	.L20:
1596:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 304                             		.loc 1 1596 5 is_stmt 1 view .LVU97
 305                             		.loc 1 1597 1 is_stmt 0 view .LVU98
 306 005b 64 11                   		and #1, r1
 307                             	.LVL36:
 308                             		.loc 1 1597 1 view .LVU99
 309 005d 3F 6B 06                		rtsd	#24, r6-r11
 310                             	.LFE19:
 312                             		.section	.text.power_off,"ax",@progbits
 314                             	_power_off:
 315                             	.LVL37:
 316                             	.LFB15:
1226:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if ((R_BSP_VERSION_MAJOR == 5) && (R_BSP_VERSION_MINOR >= 30)) || (R_BSP_VERSION_MAJOR >= 6)
 317                             		.loc 1 1226 1 is_stmt 1 view -0
1226:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if ((R_BSP_VERSION_MAJOR == 5) && (R_BSP_VERSION_MINOR >= 30)) || (R_BSP_VERSION_MAJOR >= 6)
 318                             		.loc 1 1226 1 is_stmt 0 view .LVU101
 319 0000 7E A7                   		push.l	r7
 320                             	.LCFI6:
 321 0002 60 40                   		sub	#4, r0
 322                             	.LCFI7:
 323 0004 EF 17                   		mov.L	r1, r7
1228:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 324                             		.loc 1 1228 5 is_stmt 1 view .LVU102
1234:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 325                             		.loc 1 1234 5 view .LVU103
 326 0006 66 11                   		mov.L	#1, r1
 327                             	.LVL38:
1234:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 328                             		.loc 1 1234 5 is_stmt 0 view .LVU104
 329 0008 05 00 00 00             		bsr	_R_BSP_RegisterProtectDisable
 330                             	.LVL39:
1238:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 331                             		.loc 1 1238 5 is_stmt 1 view .LVU105
 332 000c EF 03                   		mov.L	r0, r3
 333 000e 66 62                   		mov.L	#6, r2
 334 0010 75 41 6E                		mov.L	#0x6e, r1
 335 0013 05 00 00 00             		bsr	_R_BSP_InterruptControl
 336                             	.LVL40:
1243:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 337                             		.loc 1 1243 5 view .LVU106
 338 0017 61 17                   		cmp	#1, r7
 339 0019 20 47                   		beq	.L30
 340 001b 61 07                   		cmp	#0, r7
 341 001d 20 1F                   		beq	.L31
 342 001f 61 27                   		cmp	#2, r7
 343 0021 20 63                   		beq	.L32
 344 0023 61 37                   		cmp	#3, r7
 345 0025 3A 83 00                		beq	.L33
 346                             	.LVL41:
 347                             		.balign 8,3,1
 348                             	.L34:
1311:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 349                             		.loc 1 1311 5 view .LVU107
 350 0028 EF 03                   		mov.L	r0, r3
 351 002a 66 52                   		mov.L	#5, r2
 352 002c 75 41 6E                		mov.L	#0x6e, r1
 353 002f 05 00 00 00             		bsr	_R_BSP_InterruptControl
 354                             	.LVL42:
1316:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
 355                             		.loc 1 1316 5 view .LVU108
 356 0033 66 11                   		mov.L	#1, r1
 357 0035 05 00 00 00             		bsr	_R_BSP_RegisterProtectEnable
 358                             	.LVL43:
1318:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 359                             		.loc 1 1318 1 is_stmt 0 view .LVU109
 360 0039 3F 77 02                		rtsd	#8, r7-r7
 361                             	.LVL44:
 362                             	.L31:
1248:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 363                             		.loc 1 1248 13 is_stmt 1 view .LVU110
1248:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 364                             		.loc 1 1248 33 is_stmt 0 view .LVU111
 365 003c FB 7E 00 80 08          		mov.L	#0x88000, r7
 366                             	.LVL45:
1248:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 367                             		.loc 1 1248 33 view .LVU112
 368 0041 DC 75                   		mov.W	[r7], r5
 369 0043 7A 05                   		bclr	#0, r5
 370 0045 D3 75                   		mov.W	r5, [r7]
1251:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 371                             		.loc 1 1251 13 is_stmt 1 view .LVU113
1251:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 372                             		.loc 1 1251 52 is_stmt 0 view .LVU114
 373 0047 FB 72 00 00 00 00       		mov.L	#_g_cmt_modes, r7
 374 004d A8 7F                   		mov.L	4[r7], r7
1251:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 375                             		.loc 1 1251 16 view .LVU115
 376 004f 61 07                   		cmp	#0, r7
 377 0051 21 D7                   		bne	.L34
1254:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 378                             		.loc 1 1254 17 is_stmt 1 view .LVU116
1254:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 379                             		.loc 1 1254 28 is_stmt 0 view .LVU117
 380 0053 FB 7E 00 00 08          		mov.L	#0x80000, r7
 381 0058 A9 75                   		mov.L	16[r7], r5
 382 005a 78 F5                   		bset	#15, r5
 383 005c A1 75                   		mov.L	r5, 16[r7]
 384 005e 2E CA                   		bra	.L34
 385                             	.LVL46:
 386                             	.L30:
1262:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 387                             		.loc 1 1262 13 is_stmt 1 view .LVU118
1262:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 388                             		.loc 1 1262 33 is_stmt 0 view .LVU119
 389 0060 FB 7E 00 80 08          		mov.L	#0x88000, r7
 390                             	.LVL47:
1262:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 391                             		.loc 1 1262 33 view .LVU120
 392 0065 DC 75                   		mov.W	[r7], r5
 393 0067 7A 15                   		bclr	#1, r5
 394 0069 D3 75                   		mov.W	r5, [r7]
1265:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 395                             		.loc 1 1265 13 is_stmt 1 view .LVU121
1265:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 396                             		.loc 1 1265 52 is_stmt 0 view .LVU122
 397 006b FB 72 00 00 00 00       		mov.L	#_g_cmt_modes, r7
 398 0071 EC 77                   		mov.L	[r7], r7
1265:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 399                             		.loc 1 1265 16 view .LVU123
 400 0073 61 07                   		cmp	#0, r7
 401 0075 21 B3                   		bne	.L34
1268:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 402                             		.loc 1 1268 17 is_stmt 1 view .LVU124
1268:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 403                             		.loc 1 1268 28 is_stmt 0 view .LVU125
 404 0077 FB 7E 00 00 08          		mov.L	#0x80000, r7
 405 007c A9 75                   		mov.L	16[r7], r5
 406 007e 78 F5                   		bset	#15, r5
 407 0080 A1 75                   		mov.L	r5, 16[r7]
 408 0082 2E A6                   		bra	.L34
 409                             	.LVL48:
 410                             	.L32:
1277:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 411                             		.loc 1 1277 13 is_stmt 1 view .LVU126
1277:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 412                             		.loc 1 1277 33 is_stmt 0 view .LVU127
 413 0084 FB 7E 00 80 08          		mov.L	#0x88000, r7
 414                             	.LVL49:
1277:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 415                             		.loc 1 1277 33 view .LVU128
 416 0089 9A 75                   		mov.W	16[r7], r5
 417 008b 7A 05                   		bclr	#0, r5
 418 008d 92 75                   		mov.W	r5, 16[r7]
1280:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 419                             		.loc 1 1280 13 is_stmt 1 view .LVU129
1280:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 420                             		.loc 1 1280 52 is_stmt 0 view .LVU130
 421 008f FB 72 00 00 00 00       		mov.L	#_g_cmt_modes, r7
 422 0095 A8 FF                   		mov.L	12[r7], r7
1280:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 423                             		.loc 1 1280 16 view .LVU131
 424 0097 61 07                   		cmp	#0, r7
 425 0099 21 8F                   		bne	.L34
1283:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 426                             		.loc 1 1283 17 is_stmt 1 view .LVU132
1283:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 427                             		.loc 1 1283 28 is_stmt 0 view .LVU133
 428 009b FB 7E 00 00 08          		mov.L	#0x80000, r7
 429 00a0 A9 75                   		mov.L	16[r7], r5
 430 00a2 78 E5                   		bset	#14, r5
 431 00a4 A1 75                   		mov.L	r5, 16[r7]
 432 00a6 2E 82                   		bra	.L34
 433                             	.LVL50:
 434                             	.L33:
1291:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 435                             		.loc 1 1291 13 is_stmt 1 view .LVU134
1291:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 436                             		.loc 1 1291 33 is_stmt 0 view .LVU135
 437 00a8 FB 7E 00 80 08          		mov.L	#0x88000, r7
 438                             	.LVL51:
1291:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 439                             		.loc 1 1291 33 view .LVU136
 440 00ad 9A 75                   		mov.W	16[r7], r5
 441 00af 7A 15                   		bclr	#1, r5
 442 00b1 92 75                   		mov.W	r5, 16[r7]
1294:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 443                             		.loc 1 1294 13 is_stmt 1 view .LVU137
1294:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 444                             		.loc 1 1294 52 is_stmt 0 view .LVU138
 445 00b3 FB 72 00 00 00 00       		mov.L	#_g_cmt_modes, r7
 446 00b9 A8 F7                   		mov.L	8[r7], r7
1294:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 447                             		.loc 1 1294 16 view .LVU139
 448 00bb 61 07                   		cmp	#0, r7
 449 00bd 3B 6B FF                		bne	.L34
1297:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 450                             		.loc 1 1297 17 is_stmt 1 view .LVU140
1297:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 451                             		.loc 1 1297 28 is_stmt 0 view .LVU141
 452 00c0 FB 7E 00 00 08          		mov.L	#0x80000, r7
 453 00c5 A9 75                   		mov.L	16[r7], r5
 454 00c7 78 E5                   		bset	#14, r5
 455 00c9 A1 75                   		mov.L	r5, 16[r7]
 456 00cb 38 5D FF                		bra	.L34
 457                             	.LFE15:
 459 00ce EF 00                   		.section	.text.cmt_counter_start,"ax",@progbits
 461                             	_cmt_counter_start:
 462                             	.LVL52:
 463                             	.LFB16:
1331:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Enable compare match interrupt. */
 464                             		.loc 1 1331 1 is_stmt 1 view -0
1333:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 465                             		.loc 1 1333 5 view .LVU143
1333:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 466                             		.loc 1 1333 21 is_stmt 0 view .LVU144
 467 0000 FB 52 00 00 00 00       		mov.L	#_g_cmt_channels, r5
 468 0006 FE 61 55                		mov.L	[r1,r5], r5
1333:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 469                             		.loc 1 1333 46 view .LVU145
 470 0009 DC 54                   		mov.W	[r5], r4
 471 000b 78 64                   		bset	#6, r4
 472 000d D3 54                   		mov.W	r4, [r5]
1336:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 473                             		.loc 1 1336 5 is_stmt 1 view .LVU146
1336:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 474                             		.loc 1 1336 38 is_stmt 0 view .LVU147
 475 000f 3D 51 00                		mov.W	#0, 2[r5]
1339:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 476                             		.loc 1 1339 5 is_stmt 1 view .LVU148
 477 0012 61 11                   		cmp	#1, r1
 478 0014 20 3D                   		beq	.L37
 479 0016 61 01                   		cmp	#0, r1
 480 0018 20 0C                   		beq	.L38
 481 001a 61 21                   		cmp	#2, r1
 482 001c 20 62                   		beq	.L39
 483 001e 61 31                   		cmp	#3, r1
 484 0020 3A 8D 00                		beq	.L40
 485 0023 02                      		rts
 486                             	.L38:
1344:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT0, CMI0) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
 487                             		.loc 1 1344 13 view .LVU149
1344:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT0, CMI0) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
 488                             		.loc 1 1344 29 is_stmt 0 view .LVU150
 489 0024 FB 5E 00 70 08          		mov.L	#0x87000, r5
 490 0029 8F 54                   		mov.B	28[r5], r4
 491 002b 7A 04                   		bclr	#0, r4
 492 002d 87 54                   		mov.B	r4, 28[r5]
1345:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT0, CMI0));                /* Enable compare match 
 493                             		.loc 1 1345 13 is_stmt 1 view .LVU151
1345:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT0, CMI0));                /* Enable compare match 
 494                             		.loc 1 1345 29 is_stmt 0 view .LVU152
 495 002f CE 54 04 03             		mov.B	772[r5], r4
 496 0033 75 24 F0                		and #-16, r4
 497 0036 66 53                   		mov.L	#5, r3
 498 0038 57 43                   		or	r4, r3
 499 003a CB 53 04 03             		mov.B	r3, 772[r5]
1346:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 500                             		.loc 1 1346 13 is_stmt 1 view .LVU153
 501 003e 75 41 1C                		mov.L	#28, r1
 502                             	.LVL53:
1346:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 503                             		.loc 1 1346 13 is_stmt 0 view .LVU154
 504 0041 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 505                             	.LVL54:
1349:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 506                             		.loc 1 1349 13 is_stmt 1 view .LVU155
1349:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 507                             		.loc 1 1349 33 is_stmt 0 view .LVU156
 508 0045 FB 5E 00 80 08          		mov.L	#0x88000, r5
 509 004a DC 54                   		mov.W	[r5], r4
 510 004c 78 04                   		bset	#0, r4
 511 004e D3 54                   		mov.W	r4, [r5]
1350:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 512                             		.loc 1 1350 13 is_stmt 1 view .LVU157
 513 0050 02                      		rts
 514                             	.LVL55:
 515                             	.L37:
1355:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT1, CMI1) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
 516                             		.loc 1 1355 13 view .LVU158
1355:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT1, CMI1) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
 517                             		.loc 1 1355 29 is_stmt 0 view .LVU159
 518 0051 FB 5E 00 70 08          		mov.L	#0x87000, r5
 519 0056 8F 5C                   		mov.B	29[r5], r4
 520 0058 7A 04                   		bclr	#0, r4
 521 005a 87 5C                   		mov.B	r4, 29[r5]
1356:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT1, CMI1));                /* Enable compare match 
 522                             		.loc 1 1356 13 is_stmt 1 view .LVU160
1356:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT1, CMI1));                /* Enable compare match 
 523                             		.loc 1 1356 29 is_stmt 0 view .LVU161
 524 005c CE 54 05 03             		mov.B	773[r5], r4
 525 0060 75 24 F0                		and #-16, r4
 526 0063 66 53                   		mov.L	#5, r3
 527 0065 57 43                   		or	r4, r3
 528 0067 CB 53 05 03             		mov.B	r3, 773[r5]
1357:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 529                             		.loc 1 1357 13 is_stmt 1 view .LVU162
 530 006b 75 41 1D                		mov.L	#29, r1
 531                             	.LVL56:
1357:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 532                             		.loc 1 1357 13 is_stmt 0 view .LVU163
 533 006e 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 534                             	.LVL57:
1360:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 535                             		.loc 1 1360 13 is_stmt 1 view .LVU164
1360:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 536                             		.loc 1 1360 33 is_stmt 0 view .LVU165
 537 0072 FB 5E 00 80 08          		mov.L	#0x88000, r5
 538 0077 DC 54                   		mov.W	[r5], r4
 539 0079 78 14                   		bset	#1, r4
 540 007b D3 54                   		mov.W	r4, [r5]
1361:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 541                             		.loc 1 1361 13 is_stmt 1 view .LVU166
 542 007d 02                      		rts
 543                             	.LVL58:
 544                             	.L39:
1367:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT2, CMI2) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
 545                             		.loc 1 1367 13 view .LVU167
1367:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT2, CMI2) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
 546                             		.loc 1 1367 29 is_stmt 0 view .LVU168
 547 007e FB 5E 00 70 08          		mov.L	#0x87000, r5
 548 0083 CD 54 80                		mov.B	128[r5], r4
 549 0086 7A 04                   		bclr	#0, r4
 550 0088 C7 54 80                		mov.B	r4, 128[r5]
1368:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT2, CMI2));                /* Enable compare match 
 551                             		.loc 1 1368 13 is_stmt 1 view .LVU169
1368:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT2, CMI2));                /* Enable compare match 
 552                             		.loc 1 1368 29 is_stmt 0 view .LVU170
 553 008b CE 54 80 03             		mov.B	896[r5], r4
 554 008f 75 24 F0                		and #-16, r4
 555 0092 66 53                   		mov.L	#5, r3
 556 0094 57 43                   		or	r4, r3
 557 0096 CB 53 80 03             		mov.B	r3, 896[r5]
1369:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 558                             		.loc 1 1369 13 is_stmt 1 view .LVU171
 559 009a 75 41 80                		mov.L	#0x80, r1
 560                             	.LVL59:
1369:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 561                             		.loc 1 1369 13 is_stmt 0 view .LVU172
 562 009d 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 563                             	.LVL60:
1372:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 564                             		.loc 1 1372 13 is_stmt 1 view .LVU173
1372:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 565                             		.loc 1 1372 33 is_stmt 0 view .LVU174
 566 00a1 FB 5E 00 80 08          		mov.L	#0x88000, r5
 567 00a6 9A 54                   		mov.W	16[r5], r4
 568 00a8 78 04                   		bset	#0, r4
 569 00aa 92 54                   		mov.W	r4, 16[r5]
1373:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 570                             		.loc 1 1373 13 is_stmt 1 view .LVU175
 571 00ac 02                      		rts
 572                             	.LVL61:
 573                             	.L40:
1378:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT3, CMI3) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
 574                             		.loc 1 1378 13 view .LVU176
1378:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT3, CMI3) = CMT_RX_CFG_IPR;   /* Set interrupt priority */
 575                             		.loc 1 1378 29 is_stmt 0 view .LVU177
 576 00ad FB 5E 00 70 08          		mov.L	#0x87000, r5
 577 00b2 CD 54 81                		mov.B	129[r5], r4
 578 00b5 7A 04                   		bclr	#0, r4
 579 00b7 C7 54 81                		mov.B	r4, 129[r5]
1379:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT3, CMI3));                /* Enable compare match 
 580                             		.loc 1 1379 13 is_stmt 1 view .LVU178
1379:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT3, CMI3));                /* Enable compare match 
 581                             		.loc 1 1379 29 is_stmt 0 view .LVU179
 582 00ba CE 54 81 03             		mov.B	897[r5], r4
 583 00be 75 24 F0                		and #-16, r4
 584 00c1 66 53                   		mov.L	#5, r3
 585 00c3 57 43                   		or	r4, r3
 586 00c5 CB 53 81 03             		mov.B	r3, 897[r5]
1380:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 587                             		.loc 1 1380 13 is_stmt 1 view .LVU180
 588 00c9 75 41 81                		mov.L	#0x81, r1
 589                             	.LVL62:
1380:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 590                             		.loc 1 1380 13 is_stmt 0 view .LVU181
 591 00cc 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 592                             	.LVL63:
1383:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 593                             		.loc 1 1383 13 is_stmt 1 view .LVU182
1383:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 594                             		.loc 1 1383 33 is_stmt 0 view .LVU183
 595 00d0 FB 5E 00 80 08          		mov.L	#0x88000, r5
 596 00d5 9A 54                   		mov.W	16[r5], r4
 597 00d7 78 14                   		bset	#1, r4
 598 00d9 92 54                   		mov.W	r4, 16[r5]
1384:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 599                             		.loc 1 1384 13 is_stmt 1 view .LVU184
1393:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 600                             		.loc 1 1393 1 is_stmt 0 view .LVU185
 601 00db 02                      		rts
 602                             	.LFE16:
 604                             		.section	.text.cmt_create,"ax",@progbits
 606                             	_cmt_create:
 607                             	.LVL64:
 608                             	.LFB9:
 897:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Return value. */
 609                             		.loc 1 897 1 is_stmt 1 view -0
 897:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Return value. */
 610                             		.loc 1 897 1 is_stmt 0 view .LVU187
 611 0000 6E 6C                   		pushm	r6-r12
 612                             	.LCFI8:
 613 0002 EF 16                   		mov.L	r1, r6
 614 0004 EF 2B                   		mov.L	r2, r11
 615 0006 EF 3C                   		mov.L	r3, r12
 616 0008 EF 4A                   		mov.L	r4, r10
 899:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 617                             		.loc 1 899 5 is_stmt 1 view .LVU188
 618                             	.LVL65:
 902:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 619                             		.loc 1 902 5 view .LVU189
 902:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 620                             		.loc 1 902 9 is_stmt 0 view .LVU190
 621 000a 05 00 00 00             		bsr	_cmt_lock_state
 622                             	.LVL66:
 902:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 623                             		.loc 1 902 9 view .LVU191
 624 000e CF 17                   		mov.B	r1, r7
 902:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 625                             		.loc 1 902 8 view .LVU192
 626 0010 61 01                   		cmp	#0, r1
 627 0012 1E                      		bne	.L47
 628                             	.LVL67:
 629                             	.L43:
 960:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_create */
 630                             		.loc 1 960 1 view .LVU193
 631 0013 5B 71                   		movu.B	r7, r1
 632 0015 3F 6C 07                		rtsd	#28, r6-r12
 633                             	.LVL68:
 634                             	.L47:
 909:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 635                             		.loc 1 909 5 is_stmt 1 view .LVU194
 909:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 636                             		.loc 1 909 18 is_stmt 0 view .LVU195
 637 0018 EF A1                   		mov.L	r10, r1
 638 001a 05 00 00 00             		bsr	_cmt_find_channel
 639                             	.LVL69:
 640 001e CF 17                   		mov.B	r1, r7
 909:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 641                             		.loc 1 909 8 view .LVU196
 642 0020 61 01                   		cmp	#0, r1
 643 0022 1F                      		bne	.L48
 644                             	.LVL70:
 645                             	.L44:
 957:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 646                             		.loc 1 957 5 is_stmt 1 view .LVU197
 647 0023 05 00 00 00             		bsr	_cmt_unlock_state
 648                             	.LVL71:
 959:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 649                             		.loc 1 959 5 view .LVU198
 959:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 650                             		.loc 1 959 12 is_stmt 0 view .LVU199
 651 0027 2E EC                   		bra	.L43
 652                             	.LVL72:
 653                             	.L48:
 917:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     
 654                             		.loc 1 917 9 is_stmt 1 view .LVU200
 917:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     
 655                             		.loc 1 917 15 is_stmt 0 view .LVU201
 656 0029 EF 62                   		mov.L	r6, r2
 657 002b EC A1                   		mov.L	[r10], r1
 658 002d 05 00 00 00             		bsr	_cmt_setup_channel
 659                             	.LVL73:
 660 0031 CF 17                   		mov.B	r1, r7
 661                             	.LVL74:
 920:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {        
 662                             		.loc 1 920 9 is_stmt 1 view .LVU202
 920:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {        
 663                             		.loc 1 920 12 is_stmt 0 view .LVU203
 664 0033 61 01                   		cmp	#0, r1
 665 0035 20 1C                   		beq	.L45
 923:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     
 666                             		.loc 1 923 13 is_stmt 1 view .LVU204
 923:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     
 667                             		.loc 1 923 25 is_stmt 0 view .LVU205
 668 0037 EC A1                   		mov.L	[r10], r1
 669                             	.LVL75:
 923:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     
 670                             		.loc 1 923 35 view .LVU206
 671 0039 FB A2 00 00 00 00       		mov.L	#_g_cmt_modes, r10
 672                             	.LVL76:
 923:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     
 673                             		.loc 1 923 35 view .LVU207
 674 003f FE 21 AC                		mov.L	r12, [r1,r10]
 927:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1        /* FreeRTOS */
 675                             		.loc 1 927 13 is_stmt 1 view .LVU208
 927:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1        /* FreeRTOS */
 676                             		.loc 1 927 39 is_stmt 0 view .LVU209
 677 0042 FB A2 00 00 00 00       		mov.L	#_g_cmt_callbacks, r10
 678 0048 FE 21 AB                		mov.L	r11, [r1,r10]
 947:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 679                             		.loc 1 947 13 is_stmt 1 view .LVU210
 680 004b 05 00 00 00             		bsr	_cmt_counter_start
 681                             	.LVL77:
 682 004f 2E D4                   		bra	.L44
 683                             	.LVL78:
 684                             	.L45:
 952:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 685                             		.loc 1 952 13 view .LVU211
 952:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 686                             		.loc 1 952 64 is_stmt 0 view .LVU212
 687 0051 EC A1                   		mov.L	[r10], r1
 688                             	.LVL79:
 952:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 689                             		.loc 1 952 13 view .LVU213
 690 0053 62 61                   		add	#6, r1
 691 0055 05 00 00 00             		bsr	_R_BSP_HardwareUnlock
 692                             	.LVL80:
 693 0059 2E CA                   		bra	.L44
 694                             	.LFE9:
 696                             		.section	.text.cmt_counter_start_priority,"ax",@progbits
 698                             	_cmt_counter_start_priority:
 699                             	.LVL81:
 700                             	.LFB17:
1408:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Enable compare match interrupt. */
 701                             		.loc 1 1408 1 is_stmt 1 view -0
1410:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 702                             		.loc 1 1410 5 view .LVU215
1410:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 703                             		.loc 1 1410 21 is_stmt 0 view .LVU216
 704 0000 FB 52 00 00 00 00       		mov.L	#_g_cmt_channels, r5
 705 0006 FE 61 55                		mov.L	[r1,r5], r5
1410:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 706                             		.loc 1 1410 46 view .LVU217
 707 0009 DC 54                   		mov.W	[r5], r4
 708 000b 78 64                   		bset	#6, r4
 709 000d D3 54                   		mov.W	r4, [r5]
1413:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 710                             		.loc 1 1413 5 is_stmt 1 view .LVU218
1413:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 711                             		.loc 1 1413 38 is_stmt 0 view .LVU219
 712 000f 3D 51 00                		mov.W	#0, 2[r5]
1416:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 713                             		.loc 1 1416 5 is_stmt 1 view .LVU220
 714 0012 61 11                   		cmp	#1, r1
 715 0014 20 3D                   		beq	.L50
 716 0016 61 01                   		cmp	#0, r1
 717 0018 20 0C                   		beq	.L51
 718 001a 61 21                   		cmp	#2, r1
 719 001c 20 62                   		beq	.L52
 720 001e 61 31                   		cmp	#3, r1
 721 0020 3A 8D 00                		beq	.L53
 722 0023 02                      		rts
 723                             	.L51:
1421:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT0, CMI0) = priority;         /* Set interrupt priority */
 724                             		.loc 1 1421 13 view .LVU221
1421:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT0, CMI0) = priority;         /* Set interrupt priority */
 725                             		.loc 1 1421 29 is_stmt 0 view .LVU222
 726 0024 FB 5E 00 70 08          		mov.L	#0x87000, r5
 727 0029 8F 54                   		mov.B	28[r5], r4
 728 002b 7A 04                   		bclr	#0, r4
 729 002d 87 54                   		mov.B	r4, 28[r5]
1422:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT0, CMI0));                /* Enable compare match 
 730                             		.loc 1 1422 13 is_stmt 1 view .LVU223
1422:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT0, CMI0));                /* Enable compare match 
 731                             		.loc 1 1422 29 is_stmt 0 view .LVU224
 732 002f CE 54 04 03             		mov.B	772[r5], r4
 733 0033 64 F2                   		and #15, r2
 734                             	.LVL82:
1422:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT0, CMI0));                /* Enable compare match 
 735                             		.loc 1 1422 29 view .LVU225
 736 0035 75 24 F0                		and #-16, r4
 737 0038 57 42                   		or	r4, r2
 738 003a CB 52 04 03             		mov.B	r2, 772[r5]
1423:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 739                             		.loc 1 1423 13 is_stmt 1 view .LVU226
 740 003e 75 41 1C                		mov.L	#28, r1
 741                             	.LVL83:
1423:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 742                             		.loc 1 1423 13 is_stmt 0 view .LVU227
 743 0041 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 744                             	.LVL84:
1426:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 745                             		.loc 1 1426 13 is_stmt 1 view .LVU228
1426:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 746                             		.loc 1 1426 33 is_stmt 0 view .LVU229
 747 0045 FB 5E 00 80 08          		mov.L	#0x88000, r5
 748 004a DC 54                   		mov.W	[r5], r4
 749 004c 78 04                   		bset	#0, r4
 750 004e D3 54                   		mov.W	r4, [r5]
1427:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 751                             		.loc 1 1427 13 is_stmt 1 view .LVU230
 752 0050 02                      		rts
 753                             	.LVL85:
 754                             	.L50:
1432:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT1, CMI1) = priority;         /* Set interrupt priority */
 755                             		.loc 1 1432 13 view .LVU231
1432:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT1, CMI1) = priority;         /* Set interrupt priority */
 756                             		.loc 1 1432 29 is_stmt 0 view .LVU232
 757 0051 FB 5E 00 70 08          		mov.L	#0x87000, r5
 758 0056 8F 5C                   		mov.B	29[r5], r4
 759 0058 7A 04                   		bclr	#0, r4
 760 005a 87 5C                   		mov.B	r4, 29[r5]
1433:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT1, CMI1));                /* Enable compare match 
 761                             		.loc 1 1433 13 is_stmt 1 view .LVU233
1433:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT1, CMI1));                /* Enable compare match 
 762                             		.loc 1 1433 29 is_stmt 0 view .LVU234
 763 005c CE 54 05 03             		mov.B	773[r5], r4
 764 0060 64 F2                   		and #15, r2
 765                             	.LVL86:
1433:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT1, CMI1));                /* Enable compare match 
 766                             		.loc 1 1433 29 view .LVU235
 767 0062 75 24 F0                		and #-16, r4
 768 0065 57 42                   		or	r4, r2
 769 0067 CB 52 05 03             		mov.B	r2, 773[r5]
1434:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 770                             		.loc 1 1434 13 is_stmt 1 view .LVU236
 771 006b 75 41 1D                		mov.L	#29, r1
 772                             	.LVL87:
1434:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 773                             		.loc 1 1434 13 is_stmt 0 view .LVU237
 774 006e 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 775                             	.LVL88:
1437:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 776                             		.loc 1 1437 13 is_stmt 1 view .LVU238
1437:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 777                             		.loc 1 1437 33 is_stmt 0 view .LVU239
 778 0072 FB 5E 00 80 08          		mov.L	#0x88000, r5
 779 0077 DC 54                   		mov.W	[r5], r4
 780 0079 78 14                   		bset	#1, r4
 781 007b D3 54                   		mov.W	r4, [r5]
1438:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 782                             		.loc 1 1438 13 is_stmt 1 view .LVU240
 783 007d 02                      		rts
 784                             	.LVL89:
 785                             	.L52:
1444:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT2, CMI2) = priority;         /* Set interrupt priority */
 786                             		.loc 1 1444 13 view .LVU241
1444:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT2, CMI2) = priority;         /* Set interrupt priority */
 787                             		.loc 1 1444 29 is_stmt 0 view .LVU242
 788 007e FB 5E 00 70 08          		mov.L	#0x87000, r5
 789 0083 CD 54 80                		mov.B	128[r5], r4
 790 0086 7A 04                   		bclr	#0, r4
 791 0088 C7 54 80                		mov.B	r4, 128[r5]
1445:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT2, CMI2));                /* Enable compare match 
 792                             		.loc 1 1445 13 is_stmt 1 view .LVU243
1445:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT2, CMI2));                /* Enable compare match 
 793                             		.loc 1 1445 29 is_stmt 0 view .LVU244
 794 008b CE 54 80 03             		mov.B	896[r5], r4
 795 008f 64 F2                   		and #15, r2
 796                             	.LVL90:
1445:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT2, CMI2));                /* Enable compare match 
 797                             		.loc 1 1445 29 view .LVU245
 798 0091 75 24 F0                		and #-16, r4
 799 0094 57 42                   		or	r4, r2
 800 0096 CB 52 80 03             		mov.B	r2, 896[r5]
1446:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 801                             		.loc 1 1446 13 is_stmt 1 view .LVU246
 802 009a 75 41 80                		mov.L	#0x80, r1
 803                             	.LVL91:
1446:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 804                             		.loc 1 1446 13 is_stmt 0 view .LVU247
 805 009d 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 806                             	.LVL92:
1449:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 807                             		.loc 1 1449 13 is_stmt 1 view .LVU248
1449:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 808                             		.loc 1 1449 33 is_stmt 0 view .LVU249
 809 00a1 FB 5E 00 80 08          		mov.L	#0x88000, r5
 810 00a6 9A 54                   		mov.W	16[r5], r4
 811 00a8 78 04                   		bset	#0, r4
 812 00aa 92 54                   		mov.W	r4, 16[r5]
1450:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 813                             		.loc 1 1450 13 is_stmt 1 view .LVU250
 814 00ac 02                      		rts
 815                             	.LVL93:
 816                             	.L53:
1455:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT3, CMI3) = priority;         /* Set interrupt priority */
 817                             		.loc 1 1455 13 view .LVU251
1455:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT3, CMI3) = priority;         /* Set interrupt priority */
 818                             		.loc 1 1455 29 is_stmt 0 view .LVU252
 819 00ad FB 5E 00 70 08          		mov.L	#0x87000, r5
 820 00b2 CD 54 81                		mov.B	129[r5], r4
 821 00b5 7A 04                   		bclr	#0, r4
 822 00b7 C7 54 81                		mov.B	r4, 129[r5]
1456:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT3, CMI3));                /* Enable compare match 
 823                             		.loc 1 1456 13 is_stmt 1 view .LVU253
1456:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT3, CMI3));                /* Enable compare match 
 824                             		.loc 1 1456 29 is_stmt 0 view .LVU254
 825 00ba CE 54 81 03             		mov.B	897[r5], r4
 826 00be 64 F2                   		and #15, r2
 827                             	.LVL94:
1456:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_InterruptRequestEnable(VECT(CMT3, CMI3));                /* Enable compare match 
 828                             		.loc 1 1456 29 view .LVU255
 829 00c0 75 24 F0                		and #-16, r4
 830 00c3 57 42                   		or	r4, r2
 831 00c5 CB 52 81 03             		mov.B	r2, 897[r5]
1457:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 832                             		.loc 1 1457 13 is_stmt 1 view .LVU256
 833 00c9 75 41 81                		mov.L	#0x81, r1
 834                             	.LVL95:
1457:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 835                             		.loc 1 1457 13 is_stmt 0 view .LVU257
 836 00cc 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 837                             	.LVL96:
1460:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 838                             		.loc 1 1460 13 is_stmt 1 view .LVU258
1460:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 839                             		.loc 1 1460 33 is_stmt 0 view .LVU259
 840 00d0 FB 5E 00 80 08          		mov.L	#0x88000, r5
 841 00d5 9A 54                   		mov.W	16[r5], r4
 842 00d7 78 14                   		bset	#1, r4
 843 00d9 92 54                   		mov.W	r4, 16[r5]
1461:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 844                             		.loc 1 1461 13 is_stmt 1 view .LVU260
1470:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 845                             		.loc 1 1470 1 is_stmt 0 view .LVU261
 846 00db 02                      		rts
 847                             	.LFE17:
 849                             		.section	.text.cmt_create_priority,"ax",@progbits
 851                             	_cmt_create_priority:
 852                             	.LVL97:
 853                             	.LFB10:
 982:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Return value. */
 854                             		.loc 1 982 1 is_stmt 1 view -0
 982:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Return value. */
 855                             		.loc 1 982 1 is_stmt 0 view .LVU263
 856 0000 6E 6C                   		pushm	r6-r12
 857                             	.LCFI9:
 982:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Return value. */
 858                             		.loc 1 982 1 view .LVU264
 859 0002 60 40                   		sub	#4, r0
 860                             	.LCFI10:
 861 0004 AA 0F                   		mov.L	36[r0], r7
 984:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 862                             		.loc 1 984 5 is_stmt 1 view .LVU265
 863                             	.LVL98:
 987:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 864                             		.loc 1 987 5 view .LVU266
 987:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 865                             		.loc 1 987 8 is_stmt 0 view .LVU267
 866 0006 FD 78 C7 80 00          		tst	#0x80, r7
 867 000b 21 66                   		bne	.L59
 987:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 868                             		.loc 1 987 45 discriminator 1 view .LVU268
 869 000d 61 F7                   		cmp	#15, r7
 870 000f 24 69                   		bgtu	.L60
 987:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 871                             		.loc 1 987 78 discriminator 2 view .LVU269
 872 0011 61 34                   		cmp	#3, r4
 873 0013 25 06                   		bleu	.L63
 989:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 874                             		.loc 1 989 16 view .LVU270
 875 0015 66 0A                   		mov	#0, r10
 876 0017 2E 5C                   		bra	.L56
 877                             	.L63:
 878 0019 EF 46                   		mov.L	r4, r6
 879 001b EF 39                   		mov.L	r3, r9
 880 001d EF 2C                   		mov.L	r2, r12
 881 001f EF 1B                   		mov.L	r1, r11
 993:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 882                             		.loc 1 993 5 is_stmt 1 view .LVU271
 993:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 883                             		.loc 1 993 9 is_stmt 0 view .LVU272
 884 0021 05 00 00 00             		bsr	_cmt_lock_state
 885                             	.LVL99:
 993:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 886                             		.loc 1 993 9 view .LVU273
 887 0025 CF 1A                   		mov.B	r1, r10
 993:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 888                             		.loc 1 993 8 view .LVU274
 889 0027 61 01                   		cmp	#0, r1
 890 0029 20 4A                   		beq	.L56
1000:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 891                             		.loc 1 1000 5 is_stmt 1 view .LVU275
1000:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 892                             		.loc 1 1000 63 is_stmt 0 view .LVU276
 893 002b 71 68 06                		add	#6, r6, r8
1000:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 894                             		.loc 1 1000 17 view .LVU277
 895 002e EF 81                   		mov.L	r8, r1
 896 0030 05 00 00 00             		bsr	_R_BSP_HardwareLock
 897                             	.LVL100:
 898 0034 CF 1A                   		mov.B	r1, r10
1000:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 899                             		.loc 1 1000 8 view .LVU278
 900 0036 61 01                   		cmp	#0, r1
 901 0038 1F                      		bne	.L64
 902                             	.LVL101:
 903                             	.L57:
1042:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 904                             		.loc 1 1042 5 is_stmt 1 view .LVU279
 905 0039 05 00 00 00             		bsr	_cmt_unlock_state
 906                             	.LVL102:
1044:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 907                             		.loc 1 1044 5 view .LVU280
1044:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 908                             		.loc 1 1044 12 is_stmt 0 view .LVU281
 909 003d 2E 36                   		bra	.L56
 910                             	.LVL103:
 911                             	.L64:
1003:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 912                             		.loc 1 1003 9 is_stmt 1 view .LVU282
1003:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 913                             		.loc 1 1003 15 is_stmt 0 view .LVU283
 914 003f EF B2                   		mov.L	r11, r2
 915 0041 EF 61                   		mov.L	r6, r1
 916 0043 05 00 00 00             		bsr	_cmt_setup_channel
 917                             	.LVL104:
 918 0047 CF 1A                   		mov.B	r1, r10
 919                             	.LVL105:
1006:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 920                             		.loc 1 1006 9 is_stmt 1 view .LVU284
1006:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
 921                             		.loc 1 1006 12 is_stmt 0 view .LVU285
 922 0049 61 01                   		cmp	#0, r1
 923 004b 20 1E                   		beq	.L58
1009:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 924                             		.loc 1 1009 13 is_stmt 1 view .LVU286
1009:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 925                             		.loc 1 1009 34 is_stmt 0 view .LVU287
 926 004d FB 52 00 00 00 00       		mov.L	#_g_cmt_modes, r5
 927 0053 FE 26 59                		mov.L	r9, [r6,r5]
1013:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1        /* FreeRTOS */
 928                             		.loc 1 1013 13 is_stmt 1 view .LVU288
1013:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1        /* FreeRTOS */
 929                             		.loc 1 1013 38 is_stmt 0 view .LVU289
 930 0056 FB 52 00 00 00 00       		mov.L	#_g_cmt_callbacks, r5
 931 005c FE 26 5C                		mov.L	r12, [r6,r5]
1032:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 932                             		.loc 1 1032 13 is_stmt 1 view .LVU290
 933 005f EF 72                   		mov.L	r7, r2
 934 0061 EF 61                   		mov.L	r6, r1
 935                             	.LVL106:
1032:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 936                             		.loc 1 1032 13 is_stmt 0 view .LVU291
 937 0063 05 00 00 00             		bsr	_cmt_counter_start_priority
 938                             	.LVL107:
 939 0067 2E D2                   		bra	.L57
 940                             	.LVL108:
 941                             	.L58:
1037:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 942                             		.loc 1 1037 13 is_stmt 1 view .LVU292
 943 0069 EF 81                   		mov.L	r8, r1
 944                             	.LVL109:
1037:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 945                             		.loc 1 1037 13 is_stmt 0 view .LVU293
 946 006b 05 00 00 00             		bsr	_R_BSP_HardwareUnlock
 947                             	.LVL110:
 948 006f 2E CA                   		bra	.L57
 949                             	.LVL111:
 950                             	.L59:
 989:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 951                             		.loc 1 989 16 view .LVU294
 952 0071 66 0A                   		mov	#0, r10
 953                             	.LVL112:
 954                             		.balign 8,3,1
 955                             	.L56:
1045:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_create_priority */
 956                             		.loc 1 1045 1 view .LVU295
 957 0073 5B A1                   		movu.B	r10, r1
 958 0075 3F 6C 08                		rtsd	#32, r6-r12
 959                             	.LVL113:
 960                             	.L60:
 989:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 961                             		.loc 1 989 16 view .LVU296
 962 0078 66 0A                   		mov	#0, r10
 963 007a 2E F9                   		bra	.L56
 964                             	.LFE10:
 966 007c 76 10 01 00             		.section	.text.cmt_counter_stop,"ax",@progbits
 968                             	_cmt_counter_stop:
 969                             	.LVL114:
 970                             	.LFB18:
1483:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Stop counter channel. */
 971                             		.loc 1 1483 1 is_stmt 1 view -0
1485:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 972                             		.loc 1 1485 5 view .LVU298
 973 0000 61 11                   		cmp	#1, r1
 974 0002 20 3B                   		beq	.L66
 975 0004 61 01                   		cmp	#0, r1
 976 0006 20 0C                   		beq	.L67
 977 0008 61 21                   		cmp	#2, r1
 978 000a 20 5E                   		beq	.L68
 979 000c 61 31                   		cmp	#3, r1
 980 000e 3A 87 00                		beq	.L69
 981 0011 02                      		rts
 982                             	.L67:
1490:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 983                             		.loc 1 1490 13 view .LVU299
1490:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 984                             		.loc 1 1490 33 is_stmt 0 view .LVU300
 985 0012 FB 5E 00 80 08          		mov.L	#0x88000, r5
 986 0017 DC 54                   		mov.W	[r5], r4
 987 0019 7A 04                   		bclr	#0, r4
 988 001b D3 54                   		mov.W	r4, [r5]
1493:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT0, CMI0) = 0;            /* Set interrupt priority */
 989                             		.loc 1 1493 13 is_stmt 1 view .LVU301
 990 001d 75 41 1C                		mov.L	#28, r1
 991                             	.LVL115:
1493:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT0, CMI0) = 0;            /* Set interrupt priority */
 992                             		.loc 1 1493 13 is_stmt 0 view .LVU302
 993 0020 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 994                             	.LVL116:
1494:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT0, CMI0)  = 0;            /* Clear any previously pending interrupts */
 995                             		.loc 1 1494 13 is_stmt 1 view .LVU303
1494:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT0, CMI0)  = 0;            /* Clear any previously pending interrupts */
 996                             		.loc 1 1494 29 is_stmt 0 view .LVU304
 997 0024 FB 5E 00 70 08          		mov.L	#0x87000, r5
 998 0029 CE 53 04 03             		mov.B	772[r5], r3
 999 002d FB 46 F0                		mov.L	#-16, r4
 1000 0030 53 34                   		and	r3, r4
 1001 0032 CB 54 04 03             		mov.B	r4, 772[r5]
1495:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1002                             		.loc 1 1495 13 is_stmt 1 view .LVU305
1495:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1003                             		.loc 1 1495 29 is_stmt 0 view .LVU306
 1004 0036 8F 54                   		mov.B	28[r5], r4
 1005 0038 7A 04                   		bclr	#0, r4
 1006 003a 87 54                   		mov.B	r4, 28[r5]
1496:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1007                             		.loc 1 1496 13 is_stmt 1 view .LVU307
 1008 003c 02                      		rts
 1009                             	.LVL117:
 1010                             	.L66:
1501:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1011                             		.loc 1 1501 13 view .LVU308
1501:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1012                             		.loc 1 1501 33 is_stmt 0 view .LVU309
 1013 003d FB 5E 00 80 08          		mov.L	#0x88000, r5
 1014 0042 DC 54                   		mov.W	[r5], r4
 1015 0044 7A 14                   		bclr	#1, r4
 1016 0046 D3 54                   		mov.W	r4, [r5]
1504:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT1, CMI1) = 0;            /* Set interrupt priority */
 1017                             		.loc 1 1504 13 is_stmt 1 view .LVU310
 1018 0048 75 41 1D                		mov.L	#29, r1
 1019                             	.LVL118:
1504:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT1, CMI1) = 0;            /* Set interrupt priority */
 1020                             		.loc 1 1504 13 is_stmt 0 view .LVU311
 1021 004b 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 1022                             	.LVL119:
1505:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT1, CMI1)  = 0;            /* Clear any previously pending interrupts */
 1023                             		.loc 1 1505 13 is_stmt 1 view .LVU312
1505:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT1, CMI1)  = 0;            /* Clear any previously pending interrupts */
 1024                             		.loc 1 1505 29 is_stmt 0 view .LVU313
 1025 004f FB 5E 00 70 08          		mov.L	#0x87000, r5
 1026 0054 CE 53 05 03             		mov.B	773[r5], r3
 1027 0058 FB 46 F0                		mov.L	#-16, r4
 1028 005b 53 34                   		and	r3, r4
 1029 005d CB 54 05 03             		mov.B	r4, 773[r5]
1506:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1030                             		.loc 1 1506 13 is_stmt 1 view .LVU314
1506:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1031                             		.loc 1 1506 29 is_stmt 0 view .LVU315
 1032 0061 8F 5C                   		mov.B	29[r5], r4
 1033 0063 7A 04                   		bclr	#0, r4
 1034 0065 87 5C                   		mov.B	r4, 29[r5]
1507:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1035                             		.loc 1 1507 13 is_stmt 1 view .LVU316
 1036 0067 02                      		rts
 1037                             	.LVL120:
 1038                             	.L68:
1513:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1039                             		.loc 1 1513 13 view .LVU317
1513:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1040                             		.loc 1 1513 33 is_stmt 0 view .LVU318
 1041 0068 FB 5E 00 80 08          		mov.L	#0x88000, r5
 1042 006d 9A 54                   		mov.W	16[r5], r4
 1043 006f 7A 04                   		bclr	#0, r4
 1044 0071 92 54                   		mov.W	r4, 16[r5]
1516:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT2, CMI2) = 0;            /* Set interrupt priority */
 1045                             		.loc 1 1516 13 is_stmt 1 view .LVU319
 1046 0073 75 41 80                		mov.L	#0x80, r1
 1047                             	.LVL121:
1516:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT2, CMI2) = 0;            /* Set interrupt priority */
 1048                             		.loc 1 1516 13 is_stmt 0 view .LVU320
 1049 0076 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 1050                             	.LVL122:
1517:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT2, CMI2)  = 0;            /* Clear any previously pending interrupts */
 1051                             		.loc 1 1517 13 is_stmt 1 view .LVU321
1517:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT2, CMI2)  = 0;            /* Clear any previously pending interrupts */
 1052                             		.loc 1 1517 29 is_stmt 0 view .LVU322
 1053 007a FB 5E 00 70 08          		mov.L	#0x87000, r5
 1054 007f CE 53 80 03             		mov.B	896[r5], r3
 1055 0083 FB 46 F0                		mov.L	#-16, r4
 1056 0086 53 34                   		and	r3, r4
 1057 0088 CB 54 80 03             		mov.B	r4, 896[r5]
1518:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1058                             		.loc 1 1518 13 is_stmt 1 view .LVU323
1518:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1059                             		.loc 1 1518 29 is_stmt 0 view .LVU324
 1060 008c CD 54 80                		mov.B	128[r5], r4
 1061 008f 7A 04                   		bclr	#0, r4
 1062 0091 C7 54 80                		mov.B	r4, 128[r5]
1519:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1063                             		.loc 1 1519 13 is_stmt 1 view .LVU325
 1064 0094 02                      		rts
 1065                             	.LVL123:
 1066                             	.L69:
1524:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1067                             		.loc 1 1524 13 view .LVU326
1524:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1068                             		.loc 1 1524 33 is_stmt 0 view .LVU327
 1069 0095 FB 5E 00 80 08          		mov.L	#0x88000, r5
 1070 009a 9A 54                   		mov.W	16[r5], r4
 1071 009c 7A 14                   		bclr	#1, r4
 1072 009e 92 54                   		mov.W	r4, 16[r5]
1527:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT3, CMI3) = 0;            /* Set interrupt priority */
 1073                             		.loc 1 1527 13 is_stmt 1 view .LVU328
 1074 00a0 75 41 81                		mov.L	#0x81, r1
 1075                             	.LVL124:
1527:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IPR(CMT3, CMI3) = 0;            /* Set interrupt priority */
 1076                             		.loc 1 1527 13 is_stmt 0 view .LVU329
 1077 00a3 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 1078                             	.LVL125:
1528:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT3, CMI3)  = 0;            /* Clear any previously pending interrupts */
 1079                             		.loc 1 1528 13 is_stmt 1 view .LVU330
1528:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             IR(CMT3, CMI3)  = 0;            /* Clear any previously pending interrupts */
 1080                             		.loc 1 1528 29 is_stmt 0 view .LVU331
 1081 00a7 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1082 00ac CE 53 81 03             		mov.B	897[r5], r3
 1083 00b0 FB 46 F0                		mov.L	#-16, r4
 1084 00b3 53 34                   		and	r3, r4
 1085 00b5 CB 54 81 03             		mov.B	r4, 897[r5]
1529:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1086                             		.loc 1 1529 13 is_stmt 1 view .LVU332
1529:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1087                             		.loc 1 1529 29 is_stmt 0 view .LVU333
 1088 00b9 CD 54 81                		mov.B	129[r5], r4
 1089 00bc 7A 04                   		bclr	#0, r4
 1090 00be C7 54 81                		mov.B	r4, 129[r5]
1530:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1091                             		.loc 1 1530 13 is_stmt 1 view .LVU334
1539:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 1092                             		.loc 1 1539 1 is_stmt 0 view .LVU335
 1093 00c1 02                      		rts
 1094                             	.LFE18:
 1096                             		.section	.text.R_CMT_CreatePeriodic,"ax",@progbits
 1097                             		.global	_R_CMT_CreatePeriodic
 1099                             	_R_CMT_CreatePeriodic:
 1100                             	.LVL126:
 1101                             	.LFB3:
 301:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return cmt_create (frequency_hz, callback, CMT_RX_MODE_PERIODIC, channel);
 1102                             		.loc 1 301 1 is_stmt 1 view -0
 302:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** } 
 1103                             		.loc 1 302 5 view .LVU337
 302:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** } 
 1104                             		.loc 1 302 12 is_stmt 0 view .LVU338
 1105 0000 EF 34                   		mov.L	r3, r4
 1106 0002 66 13                   		mov.L	#1, r3
 1107                             	.LVL127:
 302:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** } 
 1108                             		.loc 1 302 12 view .LVU339
 1109 0004 05 00 00 00             		bsr	_cmt_create
 1110                             	.LVL128:
 303:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function R_CMT_CreatePeriodic */
 1111                             		.loc 1 303 1 view .LVU340
 1112 0008 02                      		rts
 1113                             	.LFE3:
 1115                             		.section	.text.R_CMT_CreatePeriodicAssignChannelPriority,"ax",@progbits
 1116                             		.global	_R_CMT_CreatePeriodicAssignChannelPriority
 1118                             	_R_CMT_CreatePeriodicAssignChannelPriority:
 1119                             	.LVL129:
 1120                             	.LFB4:
 349:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return cmt_create_priority(frequency_hz, callback, CMT_RX_MODE_PERIODIC, channel, priority);
 1121                             		.loc 1 349 1 is_stmt 1 view -0
 349:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return cmt_create_priority(frequency_hz, callback, CMT_RX_MODE_PERIODIC, channel, priority);
 1122                             		.loc 1 349 1 is_stmt 0 view .LVU342
 1123 0000 60 40                   		sub	#4, r0
 1124                             	.LCFI11:
 350:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1125                             		.loc 1 350 5 is_stmt 1 view .LVU343
 350:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1126                             		.loc 1 350 12 is_stmt 0 view .LVU344
 1127 0002 E3 04                   		mov.L	r4, [r0]
 1128 0004 EF 34                   		mov.L	r3, r4
 1129                             	.LVL130:
 350:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1130                             		.loc 1 350 12 view .LVU345
 1131 0006 66 13                   		mov.L	#1, r3
 1132                             	.LVL131:
 350:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1133                             		.loc 1 350 12 view .LVU346
 1134 0008 05 00 00 00             		bsr	_cmt_create_priority
 1135                             	.LVL132:
 351:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function R_CMT_CreatePeriodicAssignChannelPriority */
 1136                             		.loc 1 351 1 view .LVU347
 1137 000c 67 01                   		rtsd	#4
 1138                             	.LFE4:
 1140                             		.section	.text.R_CMT_CreateOneShot,"ax",@progbits
 1141                             		.global	_R_CMT_CreateOneShot
 1143                             	_R_CMT_CreateOneShot:
 1144                             	.LVL133:
 1145                             	.LFB5:
 374:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return cmt_create((1000000/period_us), callback, CMT_RX_MODE_ONE_SHOT, channel);
 1146                             		.loc 1 374 1 is_stmt 1 view -0
 375:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1147                             		.loc 1 375 5 view .LVU349
 375:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1148                             		.loc 1 375 12 is_stmt 0 view .LVU350
 1149 0000 EF 34                   		mov.L	r3, r4
 1150 0002 66 23                   		mov.L	#2, r3
 1151                             	.LVL134:
 375:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1152                             		.loc 1 375 12 view .LVU351
 1153 0004 FB 5E 40 42 0F          		mov.L	#0xf4240, r5
 1154 0009 FC 27 15                		divu	r1, r5
 1155 000c EF 51                   		mov.L	r5, r1
 1156                             	.LVL135:
 375:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1157                             		.loc 1 375 12 view .LVU352
 1158 000e 05 00 00 00             		bsr	_cmt_create
 1159                             	.LVL136:
 376:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function R_CMT_CreateOneShot */
 1160                             		.loc 1 376 1 view .LVU353
 1161 0012 02                      		rts
 1162                             	.LFE5:
 1164                             		.section	.text.R_CMT_CreateOneShotAssignChannelPriority,"ax",@progbits
 1165                             		.global	_R_CMT_CreateOneShotAssignChannelPriority
 1167                             	_R_CMT_CreateOneShotAssignChannelPriority:
 1168                             	.LVL137:
 1169                             	.LFB6:
 418:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return cmt_create_priority((1000000/period_us), callback, CMT_RX_MODE_ONE_SHOT, channel, priori
 1170                             		.loc 1 418 1 is_stmt 1 view -0
 418:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return cmt_create_priority((1000000/period_us), callback, CMT_RX_MODE_ONE_SHOT, channel, priori
 1171                             		.loc 1 418 1 is_stmt 0 view .LVU355
 1172 0000 60 40                   		sub	#4, r0
 1173                             	.LCFI12:
 419:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1174                             		.loc 1 419 5 is_stmt 1 view .LVU356
 419:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1175                             		.loc 1 419 12 is_stmt 0 view .LVU357
 1176 0002 E3 04                   		mov.L	r4, [r0]
 1177 0004 EF 34                   		mov.L	r3, r4
 1178                             	.LVL138:
 419:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1179                             		.loc 1 419 12 view .LVU358
 1180 0006 66 23                   		mov.L	#2, r3
 1181                             	.LVL139:
 419:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1182                             		.loc 1 419 12 view .LVU359
 1183 0008 FB 5E 40 42 0F          		mov.L	#0xf4240, r5
 1184 000d FC 27 15                		divu	r1, r5
 1185 0010 EF 51                   		mov.L	r5, r1
 1186                             	.LVL140:
 419:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1187                             		.loc 1 419 12 view .LVU360
 1188 0012 05 00 00 00             		bsr	_cmt_create_priority
 1189                             	.LVL141:
 420:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function R_CMT_CreateOneShotAssignChannelPriority */
 1190                             		.loc 1 420 1 view .LVU361
 1191 0016 67 01                   		rtsd	#4
 1192                             	.LFE6:
 1194                             		.section	.text.R_CMT_Stop,"ax",@progbits
 1195                             		.global	_R_CMT_Stop
 1197                             	_R_CMT_Stop:
 1198                             	.LVL142:
 1199                             	.LFB7:
 437:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Make sure valid channel number was input. */
 1200                             		.loc 1 437 1 is_stmt 1 view -0
 440:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1        /* FreeRTOS */
 1201                             		.loc 1 440 5 view .LVU363
 440:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1        /* FreeRTOS */
 1202                             		.loc 1 440 8 is_stmt 0 view .LVU364
 1203 0000 61 31                   		cmp	#3, r1
 1204 0002 25 07                   		bleu	.L84
 455:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 1205                             		.loc 1 455 16 view .LVU365
 1206 0004 66 01                   		mov	#0, r1
 1207                             	.LVL143:
 471:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1208                             		.loc 1 471 1 view .LVU366
 1209 0006 64 11                   		and #1, r1
 1210 0008 02                      		rts
 1211                             	.LVL144:
 1212                             	.L84:
 437:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Make sure valid channel number was input. */
 1213                             		.loc 1 437 1 view .LVU367
 1214 0009 6E 7A                   		pushm	r7-r10
 1215                             	.LCFI13:
 1216 000b EF 17                   		mov.L	r1, r7
 459:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1217                             		.loc 1 459 5 is_stmt 1 view .LVU368
 1218 000d 05 00 00 00             		bsr	_cmt_counter_stop
 1219                             	.LVL145:
 462:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1220                             		.loc 1 462 5 view .LVU369
 1221 0011 EF 71                   		mov.L	r7, r1
 1222 0013 05 00 00 00             		bsr	_power_off
 1223                             	.LVL146:
 465:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1224                             		.loc 1 465 5 view .LVU370
 465:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1225                             		.loc 1 465 26 is_stmt 0 view .LVU371
 1226 0017 FB 52 00 00 00 00       		mov.L	#_g_cmt_modes, r5
 1227 001d 66 0A                   		mov.L	#0, r10
 1228 001f FE 27 5A                		mov.L	r10, [r7,r5]
 468:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1229                             		.loc 1 468 5 is_stmt 1 view .LVU372
 1230 0022 71 71 06                		add	#6, r7, r1
 1231 0025 05 00 00 00             		bsr	_R_BSP_HardwareUnlock
 1232                             	.LVL147:
 470:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** } /* End of function R_CMT_Stop */
 1233                             		.loc 1 470 5 view .LVU373
 470:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** } /* End of function R_CMT_Stop */
 1234                             		.loc 1 470 12 is_stmt 0 view .LVU374
 1235 0029 66 11                   		mov	#1, r1
 471:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1236                             		.loc 1 471 1 view .LVU375
 1237 002b 64 11                   		and #1, r1
 1238 002d 3F 7A 04                		rtsd	#16, r7-r10
 471:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1239                             		.loc 1 471 1 view .LVU376
 1240                             	.LFE7:
 1242                             		.section	.text.R_CMT_Control,"ax",@progbits
 1243                             		.global	_R_CMT_Control
 1245                             	_R_CMT_Control:
 1246                             	.LVL148:
 1247                             	.LFB8:
 502:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bool ret = true;
 1248                             		.loc 1 502 1 is_stmt 1 view -0
 502:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     bool ret = true;
 1249                             		.loc 1 502 1 is_stmt 0 view .LVU378
 1250 0000 6E 6B                   		pushm	r6-r11
 1251                             	.LCFI14:
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1252                             		.loc 1 503 5 is_stmt 1 view .LVU379
 1253                             	.LVL149:
 504:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1254                             		.loc 1 504 5 view .LVU380
 554:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1255                             		.loc 1 554 5 view .LVU381
 1256 0002 61 32                   		cmp	#3, r2
 1257 0004 25 36                   		bleu	.L134
 1258 0006 61 52                   		cmp	#5, r2
 1259 0008 3A A9 01                		beq	.L91
 1260 000b 22 05 38 92 00          		bltu	.L92
 1261 0010 61 62                   		cmp	#6, r2
 1262 0012 21 68                   		bne	.L135
 815:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1263                             		.loc 1 815 13 view .LVU382
 815:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1264                             		.loc 1 815 16 is_stmt 0 view .LVU383
 1265 0014 61 31                   		cmp	#3, r1
 1266 0016 25 05 38 BB 02          		bgtu	.L130
 815:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1267                             		.loc 1 815 50 discriminator 1 view .LVU384
 1268 001b 61 03                   		cmp	#0, r3
 1269 001d 3A BB 02                		beq	.L131
 821:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1270                             		.loc 1 821 17 is_stmt 1 view .LVU385
 1271 0020 61 11                   		cmp	#1, r1
 1272 0022 3A 53 02                		beq	.L116
 1273 0025 61 01                   		cmp	#0, r1
 1274 0027 3A 3C 02                		beq	.L117
 1275 002a 61 21                   		cmp	#2, r1
 1276 002c 3A 5B 02                		beq	.L118
 1277 002f 61 31                   		cmp	#3, r1
 1278 0031 3A 68 02                		beq	.L119
 855:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1279                             		.loc 1 855 29 is_stmt 0 view .LVU386
 1280 0034 66 06                   		mov	#0, r6
 1281                             		.balign 8,3,1
 1282                             	.L120:
 1283                             	.LVL150:
 862:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1284                             		.loc 1 862 17 is_stmt 1 view .LVU387
 862:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1285                             		.loc 1 862 42 is_stmt 0 view .LVU388
 1286 0036 E3 37                   		mov.L	r7, [r3]
 1287 0038 2E 3B                   		bra	.L90
 1288                             	.LVL151:
 1289                             	.L134:
 554:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1290                             		.loc 1 554 5 view .LVU389
 1291 003a 61 22                   		cmp	#2, r2
 1292 003c 23 05 38 A8 00          		bgeu	.L87
 1293 0041 61 02                   		cmp	#0, r2
 1294 0043 20 3B                   		beq	.L88
 1295 0045 61 12                   		cmp	#1, r2
 1296 0047 21 2A                   		bne	.L136
 589:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1297                             		.loc 1 589 13 is_stmt 1 view .LVU390
 589:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1298                             		.loc 1 589 16 is_stmt 0 view .LVU391
 1299 0049 61 31                   		cmp	#3, r1
 1300 004b 25 05 38 63 02          		bgtu	.L122
 592:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1301                             		.loc 1 592 17 is_stmt 1 view .LVU392
 592:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1302                             		.loc 1 592 56 is_stmt 0 view .LVU393
 1303 0050 FB 72 00 00 00 00       		mov.L	#_g_cmt_modes, r7
 1304 0056 FE 61 77                		mov.L	[r1,r7], r7
 592:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1305                             		.loc 1 592 20 view .LVU394
 1306 0059 61 07                   		cmp	#0, r7
 1307 005b 3A 5A 02                		beq	.L123
 595:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 1308                             		.loc 1 595 21 is_stmt 1 view .LVU395
 1309 005e 61 11                   		cmp	#1, r1
 1310 0060 20 55                   		beq	.L95
 1311 0062 61 01                   		cmp	#0, r1
 1312 0064 20 42                   		beq	.L96
 1313 0066 61 21                   		cmp	#2, r1
 1314 0068 20 5C                   		beq	.L97
 1315 006a 61 31                   		cmp	#3, r1
 1316 006c 20 69                   		beq	.L98
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1317                             		.loc 1 503 10 is_stmt 0 view .LVU396
 1318 006e 66 16                   		mov	#1, r6
 1319 0070 0B                      		bra	.L90
 1320                             	.L136:
 869:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1321                             		.loc 1 869 17 view .LVU397
 1322 0071 66 06                   		mov	#0, r6
 1323                             	.LVL152:
 1324                             		.balign 8,3,1
 1325                             	.L90:
 874:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1326                             		.loc 1 874 5 is_stmt 1 view .LVU398
 875:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
 1327                             		.loc 1 875 1 is_stmt 0 view .LVU399
 1328 0073 66 11                   		mov.L	#1, r1
 1329 0075 53 61                   		and	r6, r1
 1330 0077 3F 6B 06                		rtsd	#24, r6-r11
 1331                             	.LVL153:
 1332                             	.L135:
 869:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1333                             		.loc 1 869 17 view .LVU400
 1334 007a 66 06                   		mov	#0, r6
 1335 007c 2E F7                   		bra	.L90
 1336                             	.L88:
 559:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1337                             		.loc 1 559 13 is_stmt 1 view .LVU401
 559:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1338                             		.loc 1 559 16 is_stmt 0 view .LVU402
 1339 007e 61 31                   		cmp	#3, r1
 1340 0080 25 05 38 29 02          		bgtu	.L121
 562:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1341                             		.loc 1 562 17 is_stmt 1 view .LVU403
 562:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1342                             		.loc 1 562 56 is_stmt 0 view .LVU404
 1343 0085 FB 72 00 00 00 00       		mov.L	#_g_cmt_modes, r7
 1344 008b FE 61 77                		mov.L	[r1,r7], r7
 562:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1345                             		.loc 1 562 20 view .LVU405
 1346 008e 61 07                   		cmp	#0, r7
 1347 0090 18                      		bne	.L94
 565:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 1348                             		.loc 1 565 21 is_stmt 1 view .LVU406
 565:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 1349                             		.loc 1 565 36 is_stmt 0 view .LVU407
 1350 0091 F8 34 00                		mov.B	#0, [r3]
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1351                             		.loc 1 503 10 view .LVU408
 1352 0094 66 16                   		mov	#1, r6
 1353 0096 2E DD                   		bra	.L90
 1354                             	.L94:
 570:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 1355                             		.loc 1 570 21 is_stmt 1 view .LVU409
 570:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 1356                             		.loc 1 570 36 is_stmt 0 view .LVU410
 1357 0098 F8 34 01                		mov.B	#1, [r3]
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1358                             		.loc 1 503 10 view .LVU411
 1359 009b 66 16                   		mov	#1, r6
 1360 009d 2E D6                   		bra	.L90
 1361                             	.L92:
 583:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1362                             		.loc 1 583 13 is_stmt 1 view .LVU412
 583:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             break;
 1363                             		.loc 1 583 32 is_stmt 0 view .LVU413
 1364 009f F8 36 04                		mov.L	#4, [r3]
 584:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 1365                             		.loc 1 584 13 is_stmt 1 view .LVU414
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1366                             		.loc 1 503 10 is_stmt 0 view .LVU415
 1367 00a2 66 16                   		mov	#1, r6
 584:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
 1368                             		.loc 1 584 13 view .LVU416
 1369 00a4 2E CF                   		bra	.L90
 1370                             	.L96:
 600:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1371                             		.loc 1 600 29 is_stmt 1 view .LVU417
 600:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1372                             		.loc 1 600 49 is_stmt 0 view .LVU418
 1373 00a6 FB 7E 00 80 08          		mov.L	#0x88000, r7
 1374 00ab DC 7A                   		mov.W	[r7], r10
 1375 00ad 7A 0A                   		bclr	#0, r10
 1376 00af D3 7A                   		mov.W	r10, [r7]
 601:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1377                             		.loc 1 601 29 is_stmt 1 view .LVU419
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1378                             		.loc 1 503 10 is_stmt 0 view .LVU420
 1379 00b1 66 16                   		mov	#1, r6
 601:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1380                             		.loc 1 601 29 view .LVU421
 1381 00b3 2E C0                   		bra	.L90
 1382                             	.L95:
 606:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1383                             		.loc 1 606 29 is_stmt 1 view .LVU422
 606:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1384                             		.loc 1 606 49 is_stmt 0 view .LVU423
 1385 00b5 FB 7E 00 80 08          		mov.L	#0x88000, r7
 1386 00ba DC 7A                   		mov.W	[r7], r10
 1387 00bc 7A 1A                   		bclr	#1, r10
 1388 00be D3 7A                   		mov.W	r10, [r7]
 607:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1389                             		.loc 1 607 29 is_stmt 1 view .LVU424
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1390                             		.loc 1 503 10 is_stmt 0 view .LVU425
 1391 00c0 66 16                   		mov	#1, r6
 607:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1392                             		.loc 1 607 29 view .LVU426
 1393 00c2 2E B1                   		bra	.L90
 1394                             	.L97:
 613:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1395                             		.loc 1 613 29 is_stmt 1 view .LVU427
 613:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1396                             		.loc 1 613 49 is_stmt 0 view .LVU428
 1397 00c4 FB 7E 00 80 08          		mov.L	#0x88000, r7
 1398 00c9 DD 7A 08                		mov.W	16[r7], r10
 1399 00cc 7A 0A                   		bclr	#0, r10
 1400 00ce D7 7A 08                		mov.W	r10, 16[r7]
 614:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1401                             		.loc 1 614 29 is_stmt 1 view .LVU429
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1402                             		.loc 1 503 10 is_stmt 0 view .LVU430
 1403 00d1 66 16                   		mov	#1, r6
 614:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1404                             		.loc 1 614 29 view .LVU431
 1405 00d3 2E A0                   		bra	.L90
 1406                             	.L98:
 619:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1407                             		.loc 1 619 29 is_stmt 1 view .LVU432
 619:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1408                             		.loc 1 619 49 is_stmt 0 view .LVU433
 1409 00d5 FB 7E 00 80 08          		mov.L	#0x88000, r7
 1410 00da DD 7A 08                		mov.W	16[r7], r10
 1411 00dd 7A 1A                   		bclr	#1, r10
 1412 00df D7 7A 08                		mov.W	r10, 16[r7]
 620:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1413                             		.loc 1 620 29 is_stmt 1 view .LVU434
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1414                             		.loc 1 503 10 is_stmt 0 view .LVU435
 1415 00e2 66 16                   		mov	#1, r6
 620:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1416                             		.loc 1 620 29 view .LVU436
 1417 00e4 2E 8F                   		bra	.L90
 1418                             	.L87:
 642:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1419                             		.loc 1 642 13 is_stmt 1 view .LVU437
 642:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1420                             		.loc 1 642 16 is_stmt 0 view .LVU438
 1421 00e6 61 31                   		cmp	#3, r1
 1422 00e8 25 05 38 D0 01          		bgtu	.L124
 645:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1423                             		.loc 1 645 17 is_stmt 1 view .LVU439
 1424 00ed 61 11                   		cmp	#1, r1
 1425 00ef 20 45                   		beq	.L99
 1426 00f1 61 01                   		cmp	#0, r1
 1427 00f3 20 34                   		beq	.L100
 1428 00f5 61 21                   		cmp	#2, r1
 1429 00f7 20 4A                   		beq	.L101
 1430 00f9 61 31                   		cmp	#3, r1
 1431 00fb 20 55                   		beq	.L102
 1432 00fd FC 13 00                		.balign 8,3,5
 1433                             	.L103:
 680:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1434                             		.loc 1 680 17 view .LVU440
 680:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1435                             		.loc 1 680 56 is_stmt 0 view .LVU441
 1436 0100 FB 72 00 00 00 00       		mov.L	#_g_cmt_modes, r7
 1437 0106 FE 61 77                		mov.L	[r1,r7], r7
 680:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1438                             		.loc 1 680 20 view .LVU442
 1439 0109 61 07                   		cmp	#0, r7
 1440 010b 3A B4 01                		beq	.L125
 683:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 1441                             		.loc 1 683 21 is_stmt 1 view .LVU443
 683:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 1442                             		.loc 1 683 24 is_stmt 0 view .LVU444
 1443 010e 61 22                   		cmp	#2, r2
 1444 0110 20 4F                   		beq	.L137
 1445                             	.L104:
 689:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 1446                             		.loc 1 689 21 is_stmt 1 view .LVU445
 1447 0112 61 11                   		cmp	#1, r1
 1448 0114 20 69                   		beq	.L105
 1449 0116 61 01                   		cmp	#0, r1
 1450 0118 20 55                   		beq	.L106
 1451 011a 61 21                   		cmp	#2, r1
 1452 011c 20 71                   		beq	.L107
 1453 011e 61 31                   		cmp	#3, r1
 1454 0120 20 7F                   		beq	.L108
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1455                             		.loc 1 503 10 is_stmt 0 view .LVU446
 1456 0122 66 16                   		mov	#1, r6
 1457 0124 38 4F FF                		bra	.L90
 1458                             	.L100:
 650:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1459                             		.loc 1 650 25 is_stmt 1 view .LVU447
 650:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1460                             		.loc 1 650 45 is_stmt 0 view .LVU448
 1461 0127 FB 7E 00 80 08          		mov.L	#0x88000, r7
 1462 012c DC 7A                   		mov.W	[r7], r10
 1463 012e 7A 0A                   		bclr	#0, r10
 1464 0130 D3 7A                   		mov.W	r10, [r7]
 651:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1465                             		.loc 1 651 25 is_stmt 1 view .LVU449
 1466 0132 2E CE                   		bra	.L103
 1467                             	.L99:
 656:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1468                             		.loc 1 656 25 view .LVU450
 656:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1469                             		.loc 1 656 45 is_stmt 0 view .LVU451
 1470 0134 FB 7E 00 80 08          		mov.L	#0x88000, r7
 1471 0139 DC 7A                   		mov.W	[r7], r10
 1472 013b 7A 1A                   		bclr	#1, r10
 1473 013d D3 7A                   		mov.W	r10, [r7]
 657:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1474                             		.loc 1 657 25 is_stmt 1 view .LVU452
 1475 013f 2E C1                   		bra	.L103
 1476                             	.L101:
 663:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1477                             		.loc 1 663 25 view .LVU453
 663:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1478                             		.loc 1 663 45 is_stmt 0 view .LVU454
 1479 0141 FB 7E 00 80 08          		mov.L	#0x88000, r7
 1480 0146 DD 7A 08                		mov.W	16[r7], r10
 1481 0149 7A 0A                   		bclr	#0, r10
 1482 014b D7 7A 08                		mov.W	r10, 16[r7]
 664:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1483                             		.loc 1 664 25 is_stmt 1 view .LVU455
 1484 014e 2E B2                   		bra	.L103
 1485                             	.L102:
 669:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1486                             		.loc 1 669 25 view .LVU456
 669:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1487                             		.loc 1 669 45 is_stmt 0 view .LVU457
 1488 0150 FB 7E 00 80 08          		mov.L	#0x88000, r7
 1489 0155 DD 7A 08                		mov.W	16[r7], r10
 1490 0158 7A 1A                   		bclr	#1, r10
 1491 015a D7 7A 08                		mov.W	r10, 16[r7]
 670:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1492                             		.loc 1 670 25 is_stmt 1 view .LVU458
 1493 015d 2E A3                   		bra	.L103
 1494                             	.L137:
 686:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1495                             		.loc 1 686 25 view .LVU459
 686:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1496                             		.loc 1 686 41 is_stmt 0 view .LVU460
 1497 015f FB 72 00 00 00 00       		mov.L	#_g_cmt_channels, r7
 1498 0165 FE 61 77                		mov.L	[r1,r7], r7
 686:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1499                             		.loc 1 686 58 view .LVU461
 1500 0168 3D 71 00                		mov.W	#0, 2[r7]
 1501 016b 2E A7                   		bra	.L104
 1502                             	.L106:
 694:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1503                             		.loc 1 694 29 is_stmt 1 view .LVU462
 694:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1504                             		.loc 1 694 49 is_stmt 0 view .LVU463
 1505 016d FB 7E 00 80 08          		mov.L	#0x88000, r7
 1506 0172 DC 7A                   		mov.W	[r7], r10
 1507 0174 78 0A                   		bset	#0, r10
 1508 0176 D3 7A                   		mov.W	r10, [r7]
 695:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1509                             		.loc 1 695 29 is_stmt 1 view .LVU464
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1510                             		.loc 1 503 10 is_stmt 0 view .LVU465
 1511 0178 66 16                   		mov	#1, r6
 695:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1512                             		.loc 1 695 29 view .LVU466
 1513 017a 38 F9 FE                		bra	.L90
 1514                             	.L105:
 700:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1515                             		.loc 1 700 29 is_stmt 1 view .LVU467
 700:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1516                             		.loc 1 700 49 is_stmt 0 view .LVU468
 1517 017d FB 7E 00 80 08          		mov.L	#0x88000, r7
 1518 0182 DC 7A                   		mov.W	[r7], r10
 1519 0184 78 1A                   		bset	#1, r10
 1520 0186 D3 7A                   		mov.W	r10, [r7]
 701:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1521                             		.loc 1 701 29 is_stmt 1 view .LVU469
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1522                             		.loc 1 503 10 is_stmt 0 view .LVU470
 1523 0188 66 16                   		mov	#1, r6
 701:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1524                             		.loc 1 701 29 view .LVU471
 1525 018a 38 E9 FE                		bra	.L90
 1526                             	.L107:
 707:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1527                             		.loc 1 707 29 is_stmt 1 view .LVU472
 707:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1528                             		.loc 1 707 49 is_stmt 0 view .LVU473
 1529 018d FB 7E 00 80 08          		mov.L	#0x88000, r7
 1530 0192 DD 7A 08                		mov.W	16[r7], r10
 1531 0195 78 0A                   		bset	#0, r10
 1532 0197 D7 7A 08                		mov.W	r10, 16[r7]
 708:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1533                             		.loc 1 708 29 is_stmt 1 view .LVU474
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1534                             		.loc 1 503 10 is_stmt 0 view .LVU475
 1535 019a 66 16                   		mov	#1, r6
 708:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1536                             		.loc 1 708 29 view .LVU476
 1537 019c 38 D7 FE                		bra	.L90
 1538                             	.L108:
 713:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1539                             		.loc 1 713 29 is_stmt 1 view .LVU477
 713:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1540                             		.loc 1 713 49 is_stmt 0 view .LVU478
 1541 019f FB 7E 00 80 08          		mov.L	#0x88000, r7
 1542 01a4 DD 7A 08                		mov.W	16[r7], r10
 1543 01a7 78 1A                   		bset	#1, r10
 1544 01a9 D7 7A 08                		mov.W	r10, 16[r7]
 714:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1545                             		.loc 1 714 29 is_stmt 1 view .LVU479
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1546                             		.loc 1 503 10 is_stmt 0 view .LVU480
 1547 01ac 66 16                   		mov	#1, r6
 714:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1548                             		.loc 1 714 29 view .LVU481
 1549 01ae 38 C5 FE                		bra	.L90
 1550                             	.L91:
 733:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1551                             		.loc 1 733 13 is_stmt 1 view .LVU482
 733:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1552                             		.loc 1 733 16 is_stmt 0 view .LVU483
 1553 01b1 61 03                   		cmp	#0, r3
 1554 01b3 20 1D                   		beq	.L126
 740:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1555                             		.loc 1 740 17 is_stmt 1 view .LVU484
 740:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1556                             		.loc 1 740 26 is_stmt 0 view .LVU485
 1557 01b5 EC 37                   		mov.L	[r3], r7
 1558                             	.LVL154:
 744:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1559                             		.loc 1 744 13 is_stmt 1 view .LVU486
 747:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     || (CMT_PRIORITY_MAX < priority)
 1560                             		.loc 1 747 17 view .LVU487
 747:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     || (CMT_PRIORITY_MAX < priority)
 1561                             		.loc 1 747 20 is_stmt 0 view .LVU488
 1562 01b7 FD 78 C7 80 00          		tst	#0x80, r7
 1563 01bc 3B 08 01                		bne	.L127
 748:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     || (CMT_RX_NUM_CHANNELS <= channel))
 1564                             		.loc 1 748 21 view .LVU489
 1565 01bf 61 F7                   		cmp	#15, r7
 1566 01c1 25 05 38 06 01          		bgtu	.L128
 749:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1567                             		.loc 1 749 21 view .LVU490
 1568 01c6 61 31                   		cmp	#3, r1
 1569 01c8 25 05 38 04 01          		bgtu	.L129
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1570                             		.loc 1 503 10 view .LVU491
 1571 01cd 66 16                   		mov	#1, r6
 1572 01cf 0B                      		bra	.L109
 1573                             	.LVL155:
 1574                             	.L126:
 735:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1575                             		.loc 1 735 21 view .LVU492
 1576 01d0 66 06                   		mov	#0, r6
 1577                             	.L109:
 1578                             	.LVL156:
 755:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1579                             		.loc 1 755 13 is_stmt 1 view .LVU493
 755:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
 1580                             		.loc 1 755 16 is_stmt 0 view .LVU494
 1581 01d2 5B 65                   		movu.B	r6, r5
 1582 01d4 61 05                   		cmp	#0, r5
 1583 01d6 3A 9D FE                		beq	.L90
 1584 01d9 EF 1A                   		mov.L	r1, r10
 758:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1585                             		.loc 1 758 17 is_stmt 1 view .LVU495
 758:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1586                             		.loc 1 758 75 is_stmt 0 view .LVU496
 1587 01db 71 1B 06                		add	#6, r1, r11
 758:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1588                             		.loc 1 758 29 view .LVU497
 1589 01de EF B1                   		mov.L	r11, r1
 1590                             	.LVL157:
 758:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1591                             		.loc 1 758 29 view .LVU498
 1592 01e0 05 00 00 00             		bsr	_R_BSP_HardwareLock
 1593                             	.LVL158:
 758:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
 1594                             		.loc 1 758 20 view .LVU499
 1595 01e4 61 01                   		cmp	#0, r1
 1596 01e6 21 16                   		bne	.L138
 768:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     {
 1597                             		.loc 1 768 21 is_stmt 1 view .LVU500
 1598 01e8 61 1A                   		cmp	#1, r10
 1599 01ea 20 34                   		beq	.L111
 1600 01ec 61 0A                   		cmp	#0, r10
 1601 01ee 20 19                   		beq	.L112
 1602 01f0 61 2A                   		cmp	#2, r10
 1603 01f2 20 43                   		beq	.L113
 1604 01f4 61 3A                   		cmp	#3, r10
 1605 01f6 20 56                   		beq	.L114
 803:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1606                             		.loc 1 803 29 view .LVU501
 1607                             	 ; 803 "../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c" 1
 1608 01f8 03                      		nop
 1609                             	 ; 0 "" 2
 804:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1610                             		.loc 1 804 29 view .LVU502
 1611 01f9 38 7A FE                		bra	.L90
 1612                             	.L138:
 761:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
 1613                             		.loc 1 761 21 view .LVU503
 1614 01fc EF B1                   		mov.L	r11, r1
 1615 01fe 05 00 00 00             		bsr	_R_BSP_HardwareUnlock
 1616                             	.LVL159:
 764:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 1617                             		.loc 1 764 21 view .LVU504
 764:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
 1618                             		.loc 1 764 25 is_stmt 0 view .LVU505
 1619 0202 66 06                   		mov	#0, r6
 1620 0204 38 6F FE                		bra	.L90
 1621                             	.LVL160:
 1622                             	.L112:
 773:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1623                             		.loc 1 773 29 is_stmt 1 view .LVU506
 773:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1624                             		.loc 1 773 45 is_stmt 0 view .LVU507
 1625 0207 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1626 020c CE 5A 04 03             		mov.B	772[r5], r10
 1627                             	.LVL161:
 773:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1628                             		.loc 1 773 45 view .LVU508
 1629 0210 64 F7                   		and #15, r7
 1630 0212 75 2A F0                		and #-16, r10
 1631 0215 57 A7                   		or	r10, r7
 1632 0217 CB 57 04 03             		mov.B	r7, 772[r5]
 774:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1633                             		.loc 1 774 29 is_stmt 1 view .LVU509
 1634 021b 38 58 FE                		bra	.L90
 1635                             	.LVL162:
 1636                             	.L111:
 780:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1637                             		.loc 1 780 29 view .LVU510
 780:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1638                             		.loc 1 780 45 is_stmt 0 view .LVU511
 1639 021e FB 5E 00 70 08          		mov.L	#0x87000, r5
 1640 0223 CE 5A 05 03             		mov.B	773[r5], r10
 1641                             	.LVL163:
 780:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1642                             		.loc 1 780 45 view .LVU512
 1643 0227 64 F7                   		and #15, r7
 1644 0229 75 2A F0                		and #-16, r10
 1645 022c 57 A7                   		or	r10, r7
 1646 022e CB 57 05 03             		mov.B	r7, 773[r5]
 781:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1647                             		.loc 1 781 29 is_stmt 1 view .LVU513
 1648 0232 38 41 FE                		bra	.L90
 1649                             	.LVL164:
 1650                             	.L113:
 788:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1651                             		.loc 1 788 29 view .LVU514
 788:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1652                             		.loc 1 788 45 is_stmt 0 view .LVU515
 1653 0235 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1654 023a CE 5A 80 03             		mov.B	896[r5], r10
 1655                             	.LVL165:
 788:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1656                             		.loc 1 788 45 view .LVU516
 1657 023e 64 F7                   		and #15, r7
 1658 0240 75 2A F0                		and #-16, r10
 1659 0243 57 A7                   		or	r10, r7
 1660 0245 CB 57 80 03             		mov.B	r7, 896[r5]
 789:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1661                             		.loc 1 789 29 is_stmt 1 view .LVU517
 1662 0249 38 2A FE                		bra	.L90
 1663                             	.LVL166:
 1664                             	.L114:
 795:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1665                             		.loc 1 795 29 view .LVU518
 795:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1666                             		.loc 1 795 45 is_stmt 0 view .LVU519
 1667 024c FB 5E 00 70 08          		mov.L	#0x87000, r5
 1668 0251 CE 5A 81 03             		mov.B	897[r5], r10
 1669                             	.LVL167:
 795:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                             break;
 1670                             		.loc 1 795 45 view .LVU520
 1671 0255 64 F7                   		and #15, r7
 1672 0257 75 2A F0                		and #-16, r10
 1673 025a 57 A7                   		or	r10, r7
 1674 025c CB 57 81 03             		mov.B	r7, 897[r5]
 796:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         }
 1675                             		.loc 1 796 29 is_stmt 1 view .LVU521
 1676 0260 38 13 FE                		bra	.L90
 1677                             	.LVL168:
 1678                             	.L117:
 826:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1679                             		.loc 1 826 25 view .LVU522
 826:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1680                             		.loc 1 826 52 is_stmt 0 view .LVU523
 1681 0263 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1682 0268 CE 75 04 03             		mov.B	772[r7], r5
 826:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1683                             		.loc 1 826 34 view .LVU524
 1684 026c 66 F7                   		mov.L	#15, r7
 1685 026e 53 57                   		and	r5, r7
 1686                             	.LVL169:
 827:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1687                             		.loc 1 827 25 is_stmt 1 view .LVU525
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1688                             		.loc 1 503 10 is_stmt 0 view .LVU526
 1689 0270 66 16                   		mov	#1, r6
 827:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1690                             		.loc 1 827 25 view .LVU527
 1691 0272 38 C4 FD                		bra	.L120
 1692                             	.LVL170:
 1693                             	.L116:
 833:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1694                             		.loc 1 833 25 is_stmt 1 view .LVU528
 833:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1695                             		.loc 1 833 52 is_stmt 0 view .LVU529
 1696 0275 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1697 027a CE 75 05 03             		mov.B	773[r7], r5
 833:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1698                             		.loc 1 833 34 view .LVU530
 1699 027e 66 F7                   		mov.L	#15, r7
 1700 0280 53 57                   		and	r5, r7
 1701                             	.LVL171:
 834:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1702                             		.loc 1 834 25 is_stmt 1 view .LVU531
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1703                             		.loc 1 503 10 is_stmt 0 view .LVU532
 1704 0282 66 16                   		mov	#1, r6
 834:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1705                             		.loc 1 834 25 view .LVU533
 1706 0284 38 B2 FD                		bra	.L120
 1707                             	.LVL172:
 1708                             	.L118:
 841:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1709                             		.loc 1 841 25 is_stmt 1 view .LVU534
 841:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1710                             		.loc 1 841 52 is_stmt 0 view .LVU535
 1711 0287 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1712 028c CE 75 80 03             		mov.B	896[r7], r5
 841:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1713                             		.loc 1 841 34 view .LVU536
 1714 0290 66 F7                   		mov.L	#15, r7
 1715 0292 53 57                   		and	r5, r7
 1716                             	.LVL173:
 842:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1717                             		.loc 1 842 25 is_stmt 1 view .LVU537
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1718                             		.loc 1 503 10 is_stmt 0 view .LVU538
 1719 0294 66 16                   		mov	#1, r6
 842:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1720                             		.loc 1 842 25 view .LVU539
 1721 0296 38 A0 FD                		bra	.L120
 1722                             	.LVL174:
 1723                             	.L119:
 848:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1724                             		.loc 1 848 25 is_stmt 1 view .LVU540
 848:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1725                             		.loc 1 848 52 is_stmt 0 view .LVU541
 1726 0299 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1727 029e CE 75 81 03             		mov.B	897[r7], r5
 848:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                         break;
 1728                             		.loc 1 848 34 view .LVU542
 1729 02a2 66 F7                   		mov.L	#15, r7
 1730 02a4 53 57                   		and	r5, r7
 1731                             	.LVL175:
 849:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1732                             		.loc 1 849 25 is_stmt 1 view .LVU543
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1733                             		.loc 1 503 10 is_stmt 0 view .LVU544
 1734 02a6 66 16                   		mov	#1, r6
 849:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     }
 1735                             		.loc 1 849 25 view .LVU545
 1736 02a8 38 8E FD                		bra	.L120
 1737                             	.LVL176:
 1738                             	.L121:
 575:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1739                             		.loc 1 575 21 view .LVU546
 1740 02ab 66 06                   		mov	#0, r6
 1741 02ad 38 C6 FD                		bra	.L90
 1742                             	.L122:
 633:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1743                             		.loc 1 633 21 view .LVU547
 1744 02b0 66 06                   		mov	#0, r6
 1745 02b2 38 C1 FD                		bra	.L90
 1746                             	.L123:
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1747                             		.loc 1 503 10 view .LVU548
 1748 02b5 66 16                   		mov	#1, r6
 1749 02b7 38 BC FD                		bra	.L90
 1750                             	.L124:
 726:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1751                             		.loc 1 726 21 view .LVU549
 1752 02ba 66 06                   		mov	#0, r6
 1753 02bc 38 B7 FD                		bra	.L90
 1754                             	.L125:
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1755                             		.loc 1 503 10 view .LVU550
 1756 02bf 66 16                   		mov	#1, r6
 1757 02c1 38 B2 FD                		bra	.L90
 1758                             	.LVL177:
 1759                             	.L127:
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1760                             		.loc 1 503 10 view .LVU551
 1761 02c4 66 06                   		mov	#0, r6
 1762 02c6 38 AD FD                		bra	.L90
 1763                             	.L128:
 1764 02c9 66 06                   		mov	#0, r6
 1765 02cb 38 A8 FD                		bra	.L90
 1766                             	.L129:
 503:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_priority_t priority;
 1767                             		.loc 1 503 10 view .LVU552
 1768 02ce 66 06                   		mov	#0, r6
 1769 02d0 38 A3 FD                		bra	.L90
 1770                             	.LVL178:
 1771                             	.L130:
 817:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
 1772                             		.loc 1 817 21 view .LVU553
 1773 02d3 66 06                   		mov	#0, r6
 1774 02d5 38 9E FD                		bra	.L90
 1775                             	.L131:
 1776 02d8 66 06                   		mov	#0, r6
 1777 02da 38 99 FD                		bra	.L90
 1778                             	.LFE8:
 1780 02dd FC 13 00                		.section	.text.R_CMT_GetVersion,"ax",@progbits
 1781                             		.global	_R_CMT_GetVersion
 1783                             	_R_CMT_GetVersion:
 1784                             	.LFB20:
1598:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1599:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * End of function cmt_setup_channel
1600:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1601:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1602:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1603:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: R_CMT_GetVersion
1604:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1605:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @brief This function returns the driver version number at runtime
1606:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @return Version number with major and minor version digits packed into a single 32-bit value.
1607:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * @details The function returns the version of this module.
1608:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * The version number is encoded such that the top 2 bytes are the major version number
1609:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * and the bottom 2 bytes are the minor version number.
1610:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** */
1611:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** uint32_t R_CMT_GetVersion(void)
1612:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 1785                             		.loc 1 1612 1 is_stmt 1 view -0
1613:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* These version macros are defined in r_cmt_rx_if.h. */
1614:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     return ((((uint32_t)CMT_RX_VERSION_MAJOR) << 16) | (uint32_t)CMT_RX_VERSION_MINOR);
 1786                             		.loc 1 1614 5 view .LVU555
1615:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1787                             		.loc 1 1615 1 is_stmt 0 view .LVU556
 1788 0000 FB 1E 3C 00 05          		mov.L	#0x5003c, r1
 1789 0005 02                      		rts
 1790                             	.LFE20:
 1792                             		.section	.text.cmt0_isr,"ax",@progbits
 1794                             	_cmt0_isr:
 1795                             	.LFB22:
1616:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function R_CMT_GetVersion */
1617:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1618:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1619:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt_isr_common
1620:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Common part of ISR handling. Put here and made inline so changes will always apply
1621:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : channel -
1622:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** *                    Which channel this is for.
1623:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1624:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1625:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
1626:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_PRAGMA_STATIC_INLINE(cmt_isr_common)
1627:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** void cmt_isr_common(uint32_t channel)
1628:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
1629:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* If this is one-shot mode then stop timer. */
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (CMT_RX_MODE_ONE_SHOT == g_cmt_modes[channel])
1631:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1632:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         R_CMT_Stop(channel);
1633:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1634:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1635:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Check for valid callback pointer before calling it. */
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if ((NULL != g_cmt_callbacks[channel]) && ((uint32_t)FIT_NO_FUNC != (uint32_t)g_cmt_callbacks[c
1637:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1638:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Valid callback found, jump to it. */
1639:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         g_cmt_callbacks[channel]((void *)&channel);
1640:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1641:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1642:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_isr_common */
1643:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1    /* FreeRTOS */
1644:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_PRAGMA_STATIC_INLINE(cmt_isr_common)
1645:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** void cmt_isr_common (uint32_t channel)
1646:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
1647:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* If this is one-shot mode then stop timer. */
1648:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if (CMT_RX_MODE_ONE_SHOT == g_cmt_modes[channel])
1649:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1650:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         R_CMT_Stop(channel);
1651:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1652:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1653:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* Check for valid callback pointer before calling it. */
1654:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     if ((NULL != g_cmt_callbacks[channel]) && ((uint32_t)FIT_NO_FUNC != (uint32_t)g_cmt_callbacks[c
1655:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1656:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Valid callback found, jump to it. */
1657:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         g_cmt_callbacks[channel]((void *)&channel);
1658:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1659:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1660:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_isr_common */
1661:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 2    /* SEGGER embOS */
1662:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 3    /* Micrium MicroC/OS */
1663:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
1664:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if CMT_RX_NUM_CHANNELS == 2
1665:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #if ((BSP_CFG_RTOS_SYSTEM_TIMER != 0 && _RI_TRACE_TIMER != 0) ||\
1666:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             (BSP_CFG_RTOS_SYSTEM_TIMER != 1 && _RI_TRACE_TIMER != 1))
1667:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_BSP_PRAGMA_STATIC_INLINE(cmt_isr_common)
1668:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             void cmt_isr_common (uint32_t channel)
1669:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1670:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* If this is one-shot mode then stop timer. */
1671:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 if (CMT_RX_MODE_ONE_SHOT == g_cmt_modes[channel])
1672:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
1673:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     R_CMT_Stop(channel);
1674:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
1675:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1676:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Check for valid callback pointer before calling it. */
1677:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 if ((NULL != g_cmt_callbacks[channel]) && ((uint32_t)FIT_NO_FUNC != (uint32_t)g_cmt
1678:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 {
1679:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     /* Valid callback found, jump to it. */
1680:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                     g_cmt_callbacks[channel]((void *)&channel);
1681:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 }
1682:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1683:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* End of function cmt_isr_common */
1684:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         #endif
1685:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #else
1686:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         R_BSP_PRAGMA_STATIC_INLINE(cmt_isr_common)
1687:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         void cmt_isr_common (uint32_t channel)
1688:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1689:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* If this is one-shot mode then stop timer. */
1690:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if (CMT_RX_MODE_ONE_SHOT == g_cmt_modes[channel])
1691:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1692:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 R_CMT_Stop(channel);
1693:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1694:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1695:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Check for valid callback pointer before calling it. */
1696:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             if ((NULL != g_cmt_callbacks[channel]) && ((uint32_t)FIT_NO_FUNC != (uint32_t)g_cmt_cal
1697:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             {
1698:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 /* Valid callback found, jump to it. */
1699:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****                 g_cmt_callbacks[channel]((void *)&channel);
1700:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             }
1701:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1702:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* End of function cmt_isr_common */
1703:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif /* End of  CMT_RX_NUM_CHANNELS */
1704:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else /* Non-OS & others */
1705:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_PRAGMA_STATIC_INLINE(cmt_isr_common)
1706:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     void cmt_isr_common (uint32_t channel)
1707:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
1708:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* If this is one-shot mode then stop timer. */
1709:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         if (CMT_RX_MODE_ONE_SHOT == g_cmt_modes[channel])
1710:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1711:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             R_CMT_Stop(channel);
1712:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1713:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1714:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         /* Check for valid callback pointer before calling it. */
1715:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         if ((NULL != g_cmt_callbacks[channel]) && ((uint32_t)FIT_NO_FUNC != (uint32_t)g_cmt_callbac
1716:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1717:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             /* Valid callback found, jump to it. */
1718:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             g_cmt_callbacks[channel]((void *)&channel);
1719:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1720:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
1721:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif /* BSP_CFG_RTOS_USED */
1722:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt_isr_common */
1723:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1724:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1725:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt0_isr
1726:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Interrupt when compare match for this channel occurs.
1727:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : none
1728:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1729:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1730:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
1731:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_PRAGMA_STATIC_INTERRUPT (cmt0_isr,VECT(CMT0, CMI0))
1732:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_ATTRIB_STATIC_INTERRUPT void cmt0_isr(void)
1733:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 1796                             		.loc 1 1733 1 is_stmt 1 view -0
 1797                             		.global	$tableentry$28$.rvectors
 1798                             	$tableentry$28$.rvectors:
 1799                             		; Note: Interrupt Handler
 1800 0000 6E EF                   		pushm	r14-r15
 1801                             	.LCFI15:
 1802 0002 6E 15                   		pushm	r1-r5
 1803                             	.LCFI16:
 1804 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1805 0009 A8 1B                   		mov.L	4[r1], r3
 1806 000b EC 12                   		mov.L	[r1], r2
 1807 000d 7E A2                   		push.l	r2
 1808                             	.LCFI17:
 1809 000f 7E A3                   		push.l	r3
 1810                             	.LCFI18:
 1811 0011 60 40                   		sub	#4, r0
 1812                             	.LCFI19:
1734:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH0_EN_NESTED_INT == 1
1735:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1736:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1737:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1738:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_isr_common(0);
 1813                             		.loc 1 1738 5 view .LVU558
 1814 0013 F8 06 00                		mov.L	#0, [r0]
 1815                             	.LVL179:
 1816                             	.LBB10:
 1817                             	.LBI10:
1627:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 1818                             		.loc 1 1627 6 view .LVU559
 1819                             	.LBB11:
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1820                             		.loc 1 1630 5 view .LVU560
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1821                             		.loc 1 1630 44 is_stmt 0 view .LVU561
 1822 0016 FB 52 00 00 00 00       		mov.L	#_g_cmt_modes, r5
 1823 001c EC 55                   		mov.L	[r5], r5
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1824                             		.loc 1 1630 8 view .LVU562
 1825 001e 61 25                   		cmp	#2, r5
 1826 0020 20 31                   		beq	.L144
 1827                             	.LVL180:
 1828                             	.L141:
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1829                             		.loc 1 1636 5 is_stmt 1 view .LVU563
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1830                             		.loc 1 1636 33 is_stmt 0 view .LVU564
 1831 0022 FB 52 00 00 00 00       		mov.L	#_g_cmt_callbacks, r5
 1832 0028 EC 04                   		mov.L	[r0], r4
 1833 002a FE 64 55                		mov.L	[r4,r5], r5
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1834                             		.loc 1 1636 8 view .LVU565
 1835 002d 61 05                   		cmp	#0, r5
 1836 002f 20 0D                   		beq	.L140
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1837                             		.loc 1 1636 44 view .LVU566
 1838 0031 74 05 00 00 00 10       		cmp	#0x10000000, r5
 1839 0037 15                      		beq	.L140
1639:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 1840                             		.loc 1 1639 9 is_stmt 1 view .LVU567
 1841 0038 EF 01                   		mov.L	r0, r1
 1842 003a 7F 15                   		jsr	r5
 1843                             	.LVL181:
 1844                             	.L140:
 1845                             	.LBE11:
 1846                             	.LBE10:
1739:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1847                             		.loc 1 1739 1 is_stmt 0 view .LVU568
 1848 003c 62 40                   		add	#4, r0
 1849 003e 7E B3                   		pop	r3
 1850 0040 7E B2                   		pop	r2
 1851 0042 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1852 0047 E3 12                   		mov.L	r2, [r1]
 1853 0049 A0 1B                   		mov.L	r3, 4[r1]
 1854 004b 6F 15                   		popm	r1-r5
 1855 004d 6F EF                   		popm	r14-r15
 1856 004f 7F 95                   		rte
 1857                             	.LVL182:
 1858                             	.L144:
 1859                             	.LBB13:
 1860                             	.LBB12:
1632:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 1861                             		.loc 1 1632 9 is_stmt 1 view .LVU569
 1862 0051 66 01                   		mov.L	#0, r1
 1863 0053 05 00 00 00             		bsr	_R_CMT_Stop
 1864                             	.LVL183:
1632:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 1865                             		.loc 1 1632 9 is_stmt 0 view .LVU570
 1866 0057 2E CB                   		bra	.L141
 1867                             	.LBE12:
 1868                             	.LBE13:
 1869                             	.LFE22:
 1871                             		.section	.text.cmt1_isr,"ax",@progbits
 1873                             	_cmt1_isr:
 1874                             	.LFB23:
1740:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1    /* FreeRTOS */
1741:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if (BSP_CFG_RTOS_SYSTEM_TIMER != 0)
1742:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         R_BSP_PRAGMA_STATIC_INTERRUPT (cmt0_isr,VECT(CMT0, CMI0))
1743:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         R_BSP_ATTRIB_STATIC_INTERRUPT void cmt0_isr (void)
1744:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1745:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH0_EN_NESTED_INT == 1
1746:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1747:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1748:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1749:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             cmt_isr_common(0);
1750:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1751:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif /* (BSP_CFG_RTOS_SYSTEM_TIMER != 0) */
1752:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 2    /* SEGGER embOS */
1753:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 3    /* Micrium MicroC/OS */
1754:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
1755:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if (BSP_CFG_RTOS_SYSTEM_TIMER != 0 && _RI_TRACE_TIMER != 0)
1756:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         void cmt0_isr (void)
1757:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1758:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH0_EN_NESTED_INT == 1
1759:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1760:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1761:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1762:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             cmt_isr_common(0);
1763:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1764:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif /* (BSP_CFG_RTOS_SYSTEM_TIMER != 0 && _RI_TRACE_TIMER != 0) */
1765:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else /* Non-OS & others */
1766:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_PRAGMA_STATIC_INTERRUPT (cmt0_isr,VECT(CMT0, CMI0))
1767:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_ATTRIB_STATIC_INTERRUPT void cmt0_isr (void)
1768:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
1769:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH0_EN_NESTED_INT == 1
1770:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1771:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1772:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1773:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_isr_common(0);
1774:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1775:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif /* BSP_CFG_RTOS_USED */
1776:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt0_isr */
1777:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1778:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1779:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt1_isr
1780:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Interrupt when compare match for this channel occurs.
1781:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : none
1782:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1783:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1784:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
1785:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_PRAGMA_STATIC_INTERRUPT (cmt1_isr,VECT(CMT1, CMI1))
1786:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_ATTRIB_STATIC_INTERRUPT void cmt1_isr(void)
1787:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 1875                             		.loc 1 1787 1 is_stmt 1 view -0
 1876                             		.global	$tableentry$29$.rvectors
 1877                             	$tableentry$29$.rvectors:
 1878                             		; Note: Interrupt Handler
 1879 0000 6E EF                   		pushm	r14-r15
 1880                             	.LCFI20:
 1881 0002 6E 15                   		pushm	r1-r5
 1882                             	.LCFI21:
 1883 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1884 0009 A8 1B                   		mov.L	4[r1], r3
 1885 000b EC 12                   		mov.L	[r1], r2
 1886 000d 7E A2                   		push.l	r2
 1887                             	.LCFI22:
 1888 000f 7E A3                   		push.l	r3
 1889                             	.LCFI23:
 1890 0011 60 40                   		sub	#4, r0
 1891                             	.LCFI24:
1788:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH1_EN_NESTED_INT == 1
1789:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1790:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1791:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1792:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_isr_common(1);
 1892                             		.loc 1 1792 5 view .LVU572
 1893 0013 F8 06 01                		mov.L	#1, [r0]
 1894                             	.LVL184:
 1895                             	.LBB14:
 1896                             	.LBI14:
1627:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 1897                             		.loc 1 1627 6 view .LVU573
 1898                             	.LBB15:
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1899                             		.loc 1 1630 5 view .LVU574
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1900                             		.loc 1 1630 44 is_stmt 0 view .LVU575
 1901 0016 FB 52 00 00 00 00       		mov.L	#_g_cmt_modes, r5
 1902 001c A8 5D                   		mov.L	4[r5], r5
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1903                             		.loc 1 1630 8 view .LVU576
 1904 001e 61 25                   		cmp	#2, r5
 1905 0020 20 31                   		beq	.L149
 1906                             	.LVL185:
 1907                             	.L146:
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1908                             		.loc 1 1636 5 is_stmt 1 view .LVU577
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1909                             		.loc 1 1636 33 is_stmt 0 view .LVU578
 1910 0022 FB 52 00 00 00 00       		mov.L	#_g_cmt_callbacks, r5
 1911 0028 EC 04                   		mov.L	[r0], r4
 1912 002a FE 64 55                		mov.L	[r4,r5], r5
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1913                             		.loc 1 1636 8 view .LVU579
 1914 002d 61 05                   		cmp	#0, r5
 1915 002f 20 0D                   		beq	.L145
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1916                             		.loc 1 1636 44 view .LVU580
 1917 0031 74 05 00 00 00 10       		cmp	#0x10000000, r5
 1918 0037 15                      		beq	.L145
1639:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 1919                             		.loc 1 1639 9 is_stmt 1 view .LVU581
 1920 0038 EF 01                   		mov.L	r0, r1
 1921 003a 7F 15                   		jsr	r5
 1922                             	.LVL186:
 1923                             	.L145:
 1924                             	.LBE15:
 1925                             	.LBE14:
1793:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 1926                             		.loc 1 1793 1 is_stmt 0 view .LVU582
 1927 003c 62 40                   		add	#4, r0
 1928 003e 7E B3                   		pop	r3
 1929 0040 7E B2                   		pop	r2
 1930 0042 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1931 0047 E3 12                   		mov.L	r2, [r1]
 1932 0049 A0 1B                   		mov.L	r3, 4[r1]
 1933 004b 6F 15                   		popm	r1-r5
 1934 004d 6F EF                   		popm	r14-r15
 1935 004f 7F 95                   		rte
 1936                             	.LVL187:
 1937                             	.L149:
 1938                             	.LBB17:
 1939                             	.LBB16:
1632:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 1940                             		.loc 1 1632 9 is_stmt 1 view .LVU583
 1941 0051 66 11                   		mov.L	#1, r1
 1942 0053 05 00 00 00             		bsr	_R_CMT_Stop
 1943                             	.LVL188:
1632:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 1944                             		.loc 1 1632 9 is_stmt 0 view .LVU584
 1945 0057 2E CB                   		bra	.L146
 1946                             	.LBE16:
 1947                             	.LBE17:
 1948                             	.LFE23:
 1950                             		.section	.text.cmt2_isr,"ax",@progbits
 1952                             	_cmt2_isr:
 1953                             	.LFB24:
1794:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1    /* FreeRTOS */
1795:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if (BSP_CFG_RTOS_SYSTEM_TIMER != 1)
1796:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         R_BSP_PRAGMA_STATIC_INTERRUPT (cmt1_isr,VECT(CMT1, CMI1))
1797:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         R_BSP_ATTRIB_STATIC_INTERRUPT void cmt1_isr (void)
1798:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1799:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH1_EN_NESTED_INT == 1
1800:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1801:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1802:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1803:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             cmt_isr_common(1);
1804:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1805:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif /* (BSP_CFG_RTOS_SYSTEM_TIMER != 1) */
1806:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 2    /* SEGGER embOS */
1807:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 3    /* Micrium MicroC/OS */
1808:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
1809:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if (BSP_CFG_RTOS_SYSTEM_TIMER != 1 && _RI_TRACE_TIMER != 1)
1810:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         void cmt1_isr (void)
1811:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1812:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH1_EN_NESTED_INT == 1
1813:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1814:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1815:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1816:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             cmt_isr_common(1);
1817:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1818:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif /* (BSP_CFG_RTOS_SYSTEM_TIMER != 1 && _RI_TRACE_TIMER != 1) */
1819:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else /* Non-OS & others */
1820:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_PRAGMA_STATIC_INTERRUPT (cmt1_isr,VECT(CMT1, CMI1))
1821:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_ATTRIB_STATIC_INTERRUPT void cmt1_isr (void)
1822:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
1823:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH1_EN_NESTED_INT == 1
1824:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1825:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1826:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1827:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_isr_common(1);
1828:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1829:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif /* BSP_CFG_RTOS_USED */
1830:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt1_isr */
1831:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1832:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if   CMT_RX_NUM_CHANNELS == 4
1833:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1834:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1835:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt2_isr
1836:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Interrupt when compare match for this channel occurs.
1837:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : none
1838:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1839:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1840:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
1841:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_PRAGMA_STATIC_INTERRUPT (cmt2_isr,VECT(CMT2, CMI2))
1842:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_ATTRIB_STATIC_INTERRUPT void cmt2_isr(void)
1843:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 1954                             		.loc 1 1843 1 is_stmt 1 view -0
 1955                             		.global	$tableentry$128$.rvectors
 1956                             	$tableentry$128$.rvectors:
 1957                             		; Note: Interrupt Handler
 1958 0000 6E EF                   		pushm	r14-r15
 1959                             	.LCFI25:
 1960 0002 6E 15                   		pushm	r1-r5
 1961                             	.LCFI26:
 1962 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1963 0009 A8 1B                   		mov.L	4[r1], r3
 1964 000b EC 12                   		mov.L	[r1], r2
 1965 000d 7E A2                   		push.l	r2
 1966                             	.LCFI27:
 1967 000f 7E A3                   		push.l	r3
 1968                             	.LCFI28:
 1969 0011 60 40                   		sub	#4, r0
 1970                             	.LCFI29:
1844:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH2_EN_NESTED_INT == 1
1845:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1846:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1847:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1848:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_isr_common(2);
 1971                             		.loc 1 1848 5 view .LVU586
 1972 0013 F8 06 02                		mov.L	#2, [r0]
 1973                             	.LVL189:
 1974                             	.LBB18:
 1975                             	.LBI18:
1627:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 1976                             		.loc 1 1627 6 view .LVU587
 1977                             	.LBB19:
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1978                             		.loc 1 1630 5 view .LVU588
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1979                             		.loc 1 1630 44 is_stmt 0 view .LVU589
 1980 0016 FB 52 00 00 00 00       		mov.L	#_g_cmt_modes, r5
 1981 001c A8 D5                   		mov.L	8[r5], r5
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1982                             		.loc 1 1630 8 view .LVU590
 1983 001e 61 25                   		cmp	#2, r5
 1984 0020 20 31                   		beq	.L154
 1985                             	.LVL190:
 1986                             	.L151:
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1987                             		.loc 1 1636 5 is_stmt 1 view .LVU591
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1988                             		.loc 1 1636 33 is_stmt 0 view .LVU592
 1989 0022 FB 52 00 00 00 00       		mov.L	#_g_cmt_callbacks, r5
 1990 0028 EC 04                   		mov.L	[r0], r4
 1991 002a FE 64 55                		mov.L	[r4,r5], r5
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1992                             		.loc 1 1636 8 view .LVU593
 1993 002d 61 05                   		cmp	#0, r5
 1994 002f 20 0D                   		beq	.L150
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 1995                             		.loc 1 1636 44 view .LVU594
 1996 0031 74 05 00 00 00 10       		cmp	#0x10000000, r5
 1997 0037 15                      		beq	.L150
1639:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 1998                             		.loc 1 1639 9 is_stmt 1 view .LVU595
 1999 0038 EF 01                   		mov.L	r0, r1
 2000 003a 7F 15                   		jsr	r5
 2001                             	.LVL191:
 2002                             	.L150:
 2003                             	.LBE19:
 2004                             	.LBE18:
1849:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 2005                             		.loc 1 1849 1 is_stmt 0 view .LVU596
 2006 003c 62 40                   		add	#4, r0
 2007 003e 7E B3                   		pop	r3
 2008 0040 7E B2                   		pop	r2
 2009 0042 FB 1E 30 14 08          		mov.L	#0x81430, r1
 2010 0047 E3 12                   		mov.L	r2, [r1]
 2011 0049 A0 1B                   		mov.L	r3, 4[r1]
 2012 004b 6F 15                   		popm	r1-r5
 2013 004d 6F EF                   		popm	r14-r15
 2014 004f 7F 95                   		rte
 2015                             	.LVL192:
 2016                             	.L154:
 2017                             	.LBB21:
 2018                             	.LBB20:
1632:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 2019                             		.loc 1 1632 9 is_stmt 1 view .LVU597
 2020 0051 66 21                   		mov.L	#2, r1
 2021 0053 05 00 00 00             		bsr	_R_CMT_Stop
 2022                             	.LVL193:
1632:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 2023                             		.loc 1 1632 9 is_stmt 0 view .LVU598
 2024 0057 2E CB                   		bra	.L151
 2025                             	.LBE20:
 2026                             	.LBE21:
 2027                             	.LFE24:
 2029                             		.section	.text.cmt3_isr,"ax",@progbits
 2031                             	_cmt3_isr:
 2032                             	.LFB25:
1850:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 1    /* FreeRTOS */
1851:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if (BSP_CFG_RTOS_SYSTEM_TIMER != 2)
1852:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         R_BSP_PRAGMA_STATIC_INTERRUPT(cmt2_isr,VECT(CMT2, CMI2))
1853:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         R_BSP_ATTRIB_STATIC_INTERRUPT void cmt2_isr (void)
1854:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1855:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH2_EN_NESTED_INT == 1
1856:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1857:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1858:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1859:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             cmt_isr_common(2);
1860:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1861:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif /* (BSP_CFG_RTOS_SYSTEM_TIMER != 2) */
1862:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 2    /* SEGGER embOS */
1863:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 3    /* Micrium MicroC/OS */
1864:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #elif BSP_CFG_RTOS_USED == 4    /* Renesas RI600V4 & RI600PX */
1865:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #if (BSP_CFG_RTOS_SYSTEM_TIMER != 2 && _RI_TRACE_TIMER != 2)
1866:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         void cmt2_isr (void)
1867:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         {
1868:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH2_EN_NESTED_INT == 1
1869:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1870:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1871:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1872:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****             cmt_isr_common(2);
1873:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****         }
1874:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     #endif /* (BSP_CFG_RTOS_SYSTEM_TIMER != 2 && _RI_TRACE_TIMER != 2) */
1875:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #else /* Non-OS & others */
1876:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_PRAGMA_STATIC_INTERRUPT(cmt2_isr,VECT(CMT2, CMI2))
1877:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_ATTRIB_STATIC_INTERRUPT void cmt2_isr (void)
1878:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
1879:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH2_EN_NESTED_INT == 1
1880:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1881:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1882:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1883:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_isr_common(2);
1884:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
1885:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif /* BSP_CFG_RTOS_USED */
1886:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /* End of function cmt2_isr */
1887:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** 
1888:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** /**************************************************************************************************
1889:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Function Name: cmt3_isr
1890:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Description  : Interrupt when compare match for this channel occurs.
1891:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Arguments    : none
1892:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** * Return Value : none
1893:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** ***************************************************************************************************
1894:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if BSP_CFG_RTOS_USED == 0      /* Non-OS */
1895:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_PRAGMA_STATIC_INTERRUPT ( cmt3_isr,VECT(CMT3, CMI3))
1896:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** R_BSP_ATTRIB_STATIC_INTERRUPT void cmt3_isr(void)
1897:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 2033                             		.loc 1 1897 1 is_stmt 1 view -0
 2034                             		.global	$tableentry$129$.rvectors
 2035                             	$tableentry$129$.rvectors:
 2036                             		; Note: Interrupt Handler
 2037 0000 6E EF                   		pushm	r14-r15
 2038                             	.LCFI30:
 2039 0002 6E 15                   		pushm	r1-r5
 2040                             	.LCFI31:
 2041 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 2042 0009 A8 1B                   		mov.L	4[r1], r3
 2043 000b EC 12                   		mov.L	[r1], r2
 2044 000d 7E A2                   		push.l	r2
 2045                             	.LCFI32:
 2046 000f 7E A3                   		push.l	r3
 2047                             	.LCFI33:
 2048 0011 60 40                   		sub	#4, r0
 2049                             	.LCFI34:
1898:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #if CMT_CFG_CH3_EN_NESTED_INT == 1
1899:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     /* set bit PSW.I = 1 to allow nested interrupt */
1900:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     R_BSP_SETPSW_I();
1901:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** #endif
1902:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     cmt_isr_common(3);
 2050                             		.loc 1 1902 5 view .LVU600
 2051 0013 F8 06 03                		mov.L	#3, [r0]
 2052                             	.LVL194:
 2053                             	.LBB22:
 2054                             	.LBI22:
1627:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** {
 2055                             		.loc 1 1627 6 view .LVU601
 2056                             	.LBB23:
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 2057                             		.loc 1 1630 5 view .LVU602
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 2058                             		.loc 1 1630 44 is_stmt 0 view .LVU603
 2059 0016 FB 52 00 00 00 00       		mov.L	#_g_cmt_modes, r5
 2060 001c A8 DD                   		mov.L	12[r5], r5
1630:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 2061                             		.loc 1 1630 8 view .LVU604
 2062 001e 61 25                   		cmp	#2, r5
 2063 0020 20 31                   		beq	.L159
 2064                             	.LVL195:
 2065                             	.L156:
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 2066                             		.loc 1 1636 5 is_stmt 1 view .LVU605
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 2067                             		.loc 1 1636 33 is_stmt 0 view .LVU606
 2068 0022 FB 52 00 00 00 00       		mov.L	#_g_cmt_callbacks, r5
 2069 0028 EC 04                   		mov.L	[r0], r4
 2070 002a FE 64 55                		mov.L	[r4,r5], r5
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 2071                             		.loc 1 1636 8 view .LVU607
 2072 002d 61 05                   		cmp	#0, r5
 2073 002f 20 0D                   		beq	.L155
1636:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     {
 2074                             		.loc 1 1636 44 view .LVU608
 2075 0031 74 05 00 00 00 10       		cmp	#0x10000000, r5
 2076 0037 15                      		beq	.L155
1639:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 2077                             		.loc 1 1639 9 is_stmt 1 view .LVU609
 2078 0038 EF 01                   		mov.L	r0, r1
 2079 003a 7F 15                   		jsr	r5
 2080                             	.LVL196:
 2081                             	.L155:
 2082                             	.LBE23:
 2083                             	.LBE22:
1903:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c **** }
 2084                             		.loc 1 1903 1 is_stmt 0 view .LVU610
 2085 003c 62 40                   		add	#4, r0
 2086 003e 7E B3                   		pop	r3
 2087 0040 7E B2                   		pop	r2
 2088 0042 FB 1E 30 14 08          		mov.L	#0x81430, r1
 2089 0047 E3 12                   		mov.L	r2, [r1]
 2090 0049 A0 1B                   		mov.L	r3, 4[r1]
 2091 004b 6F 15                   		popm	r1-r5
 2092 004d 6F EF                   		popm	r14-r15
 2093 004f 7F 95                   		rte
 2094                             	.LVL197:
 2095                             	.L159:
 2096                             	.LBB25:
 2097                             	.LBB24:
1632:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 2098                             		.loc 1 1632 9 is_stmt 1 view .LVU611
 2099 0051 66 31                   		mov.L	#3, r1
 2100 0053 05 00 00 00             		bsr	_R_CMT_Stop
 2101                             	.LVL198:
1632:../src/smc_gen/r_cmt_rx/src/r_cmt_rx.c ****     }
 2102                             		.loc 1 1632 9 is_stmt 0 view .LVU612
 2103 0057 2E CB                   		bra	.L156
 2104                             	.LBE24:
 2105                             	.LBE25:
 2106                             	.LFE25:
 2108                             		.section	.bss.g_cmt_callbacks,"aw",@nobits
 2109                             		.balign 4
 2112                             	_g_cmt_callbacks:
 2113 0000 00 00 00 00 00 00 00 00 		.zero	16
 2113      00 00 00 00 00 00 00 00 
 2114                             		.section	.rodata.g_cmt_clock_dividers,"a"
 2115                             		.balign 4
 2118                             	_g_cmt_clock_dividers:
 2119 0000 08 00 00 00             		.long	8
 2120 0004 20 00 00 00             		.long	32
 2121 0008 80 00 00 00             		.long	0x80
 2122 000c 00 02 00 00             		.long	0x200
 2123                             		.section	.bss.g_cmt_modes,"aw",@nobits
 2124                             		.balign 4
 2127                             	_g_cmt_modes:
 2128 0000 00 00 00 00 00 00 00 00 		.zero	16
 2128      00 00 00 00 00 00 00 00 
 2129                             		.section	.rodata.g_cmt_channels,"a"
 2130                             		.balign 4
 2133                             	_g_cmt_channels:
 2134 0000 02 80 08 00             		.long	0x88002
 2135 0004 08 80 08 00             		.long	0x88008
 2136 0008 12 80 08 00             		.long	0x88012
 2137 000c 18 80 08 00             		.long	0x88018
 2634                             	.Letext0:
 2635                             		.file 2 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2636                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2637                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 2638                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2639                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2640                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2641                             		.file 8 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_rx_compi
 2642                             		.file 9 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/register
 2643                             		.file 10 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/r_bsp_c
 2644                             		.file 11 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_loc
 2645                             		.file 12 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_int
 2646                             		.file 13 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_cmt_rx/r_cmt_rx_if.h"
 2647                             		.file 14 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_bsp_int
 2648                             		.file 15 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/r_bsp_l
