   1                             	# 1 "../src/smc_gen/r_bsp/mcu/all/reset_program.S"
   1                             	;;/************************************************************************************************
   0                             	
   0                             	
   0                             	
   2                             	;;* DISCLAIMER
   3                             	;;* This software is supplied by Renesas Electronics Corporation and is only intended for use with 
   4                             	;;* other uses are authorized. This software is owned by Renesas Electronics Corporation and is pro
   5                             	;;* applicable laws, including copyright laws. 
   6                             	;;* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7                             	;;* THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES O
   8                             	;;* FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLA
   9                             	;;* EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS 
  10                             	;;* SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY 
  11                             	;;* SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
  12                             	;;* Renesas reserves the right, without notice, to make changes to this software and to discontinue
  13                             	;;* this software. By using this software, you agree to the additional terms and conditions found b
  14                             	;;* following link:
  15                             	;;* http://www.renesas.com/disclaimer 
  16                             	;;*
  17                             	;;* Copyright (C) 2019 Renesas Electronics Corporation. All rights reserved.
  18                             	;;*************************************************************************************************
  19                             	;;/************************************************************************************************
  20                             	;;* File Name    : reset_program.asm
  21                             	;;* Description  : Defines post-reset routines that are used to configure the MCU prior to the main
  22                             	;;*                This is where the program counter starts on power-up or reset.
  23                             	;;*************************************************************************************************
  24                             	;;/************************************************************************************************
  25                             	;;* History : DD.MM.YYYY Version   Description
  26                             	;;*         : 28.02.2019 1.00      First Release
  27                             	;;*         : 25.11.2022 1.01      Added initialization processing for expansion RAM area.
  28                             	;;*************************************************************************************************
  29                             	
  30                             	#include "r_bsp_config.h"
   1                             	/* Generated configuration header file - do not edit */
   2                             	/**************************************************************************************************
   3                             	* DISCLAIMER
   4                             	* This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   5                             	* other uses are authorized. This software is owned by Renesas Electronics Corporation and is prote
   6                             	* applicable laws, including copyright laws. 
   7                             	* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   8                             	* THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF 
   9                             	* FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIM
  10                             	* EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AF
  11                             	* SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY RE
  12                             	* SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  13                             	* Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  14                             	* this software. By using this software, you agree to the additional terms and conditions found by 
  15                             	* following link:
  16                             	* http://www.renesas.com/disclaimer
  17                             	*
  18                             	* Copyright (C) 2019 Renesas Electronics Corporation. All rights reserved.
  19                             	***************************************************************************************************
  20                             	/**************************************************************************************************
  21                             	* File Name    : r_bsp_config_reference.h
  22                             	* Device(s)    : RX72N
  23                             	* Description  : The file r_bsp_config.h is used to configure your BSP. r_bsp_config.h should be in
  24                             	*                somewhere in your package so that the r_bsp code has access to it. This file (r_bs
  25                             	*                is just a reference file that the user can use to make their own r_bsp_config.h fi
  26                             	***************************************************************************************************
  27                             	* History : DD.MM.YYYY Version  Description
  28                             	*         : 08.10.2019 1.00     First Release.
  29                             	*         : 31.07.2020 1.01     Modified comment.
  30                             	*         : 29.01.2021 1.02     Added the following macro definition.
  31                             	*                                - BSP_CFG_SCI_UART_TERMINAL_ENABLE
  32                             	*                                - BSP_CFG_SCI_UART_TERMINAL_CHANNEL
  33                             	*                                - BSP_CFG_SCI_UART_TERMINAL_BITRATE
  34                             	*                                - BSP_CFG_SCI_UART_TERMINAL_INTERRUPT_PRIORITY
  35                             	*         : 26.02.2021 1.03     Added a comment for Azure RTOS to BSP_CFG_RTOS_USED.
  36                             	*         : 30.11.2021 2.00     Added the following macro definitions.
  37                             	*                                - BSP_CFG_MAIN_CLOCK_OSCILLATE_ENABLE
  38                             	*                                - BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE
  39                             	*                                - BSP_CFG_HOCO_OSCILLATE_ENABLE
  40                             	*                                - BSP_CFG_LOCO_OSCILLATE_ENABLE
  41                             	*                                - BSP_CFG_IWDT_CLOCK_OSCILLATE_ENABLE
  42                             	*                                - BSP_CFG_CONFIGURATOR_VERSION
  43                             	*                                - BSP_CFG_CPLUSPLUS
  44                             	*                                - BSP_CFG_SERIAL_PROGRAMMER_CONECT_ENABLE
  45                             	*                               Changed initial value of the following macro definitions.
  46                             	*                                - BSP_CFG_MCU_PART_GROUP
  47                             	*                                - BSP_CFG_MCU_PART_SERIES
  48                             	*         : 11.02.2022 2.01     Changed initial value of the following macro definitions.
  49                             	*                                - BSP_CFG_SWINT_UNIT1_ENABLE
  50                             	*                                - BSP_CFG_SWINT_UNIT2_ENABLE
  51                             	*         : 25.11.2022 2.02     Modified comment.
  52                             	*                               Added the following macro definition.
  53                             	*                                - BSP_CFG_EXPANSION_RAM_ENABLE
  54                             	*         : 28.02.2023 2.03     Modified comment.
  55                             	*         : 21.11.2023 2.04     Added the following macro definitions.
  56                             	*                                - BSP_CFG_BUS_PRIORITY_INITIALIZE_ENABLE
  57                             	*                                - BSP_CFG_MEMORY_BUS1_3_PRIORITY
  58                             	*                                - BSP_CFG_MEMORY_BUS2_PRIORITY
  59                             	*                                - BSP_CFG_INTERNAL_PERIPHERAL_BUS1_PRIORITY
  60                             	*                                - BSP_CFG_INTERNAL_PERIPHERAL_BUS2_3_PRIORITY
  61                             	*                                - BSP_CFG_INTERNAL_PERIPHERAL_BUS4_5_PRIORITY
  62                             	*                                - BSP_CFG_INTERNAL_PERIPHERAL_BUS6_PRIORITY
  63                             	*                                - BSP_CFG_EXTERNAL_BUS_PRIORITY
  64                             	*                                - BSP_CFG_BOOTLOADER_PROJECT
  65                             	***************************************************************************************************
  66                             	#ifndef R_BSP_CONFIG_REF_HEADER_FILE
  67                             	#define R_BSP_CONFIG_REF_HEADER_FILE
  68                             	
  69                             	/**************************************************************************************************
  70                             	Configuration Options
  71                             	***************************************************************************************************
  72                             	
  73                             	/* NOTE:
  74                             	   The default settings are the same as when using RSKRX72N.
  75                             	   Change to the settings for the user board.
  76                             	*/
  77                             	
  78                             	/* Start up select
  79                             	   0 = Enable BSP startup program.
  80                             	   1 = Disable BSP startup program. (e.g. Using user startup program.)
  81                             	   NOTE: This setting is available only when using CCRX. */
  82                             	#define BSP_CFG_STARTUP_DISABLE (0)
  83                             	
  84                             	/* Enter the product part number for your MCU. This information will be used to obtain information 
  85                             	   as package and memory size.
  86                             	   To help parse this information, the part number will be defined using multiple macros.
  87                             	   R 5 F 57 2N N D D BD
  88                             	   | | | |  |  | | | |  Macro Name                             Description
  89                             	   | | | |  |  | | | |__BSP_CFG_MCU_PART_PACKAGE             = Package type, number of pins, and pi
  90                             	   | | | |  |  | | |____not used                             = Products with wide temperature range
  91                             	   | | | |  |  | |______BSP_CFG_MCU_PART_FUNCTION            = Encryption module included/not inclu
  92                             	   | | | |  |  |________BSP_CFG_MCU_PART_MEMORY_SIZE         = ROM, RAM, and Data Flash Capacity
  93                             	   | | | |  |___________BSP_CFG_MCU_PART_GROUP               = Group name
  94                             	   | | | |______________BSP_CFG_MCU_PART_SERIES              = Series name
  95                             	   | | |________________BSP_CFG_MCU_PART_MEMORY_TYPE         = Type of memory (Flash, ROMless)
  96                             	   | |__________________not used                             = Renesas MCU
  97                             	   |____________________not used                             = Renesas semiconductor product.
  98                             	*/
  99                             	
 100                             	/* Package type. Set the macro definition based on values below:
 101                             	   Character(s) = Value for macro = Package Type/Number of Pins/Pin Pitch
 102                             	   FC           = 0x0             = LFQFP/176/0.50
 103                             	   BG           = 0x1             = LFBGA/176/0.80
 104                             	   BD           = 0x2             = LFBGA/224/0.80
 105                             	   FB           = 0x3             = LFQFP/144/0.50
 106                             	   LK           = 0x4             = TFLGA/145/0.50
 107                             	   FP           = 0x5             = LFQFP/100/0.50
 108                             	*/
 109                             	#define BSP_CFG_MCU_PART_PACKAGE        (0x5) /* Generated value. Do not edit this manually */
 110                             	
 111                             	/* Whether Encryption is included or not.
 112                             	   Character(s) = Value for macro = Description
 113                             	   D            = 0xD             = Encryption module not included
 114                             	   H            = 0x11            = Encryption module included
 115                             	*/
 116                             	#define BSP_CFG_MCU_PART_FUNCTION       (0xD) /* Generated value. Do not edit this manually */
 117                             	
 118                             	/* ROM, RAM, and Data Flash Capacity.
 119                             	   Character(s) = Value for macro = ROM Size/Ram Size/Data Flash Size
 120                             	   D            = 0xD             = 2MB/1MB/32KB
 121                             	   N            = 0x17            = 4MB/1MB/32KB
 122                             	NOTE: The RAM areas are not contiguous.It is separated by 512 KB each.
 123                             	*/
 124                             	#define BSP_CFG_MCU_PART_MEMORY_SIZE    (0x17) /* Generated value. Do not edit this manually */
 125                             	
 126                             	/* Group name.
 127                             	   Character(s) = Description
 128                             	   2N           = RX72N Group
 129                             	*/
 130                             	#define BSP_CFG_MCU_PART_GROUP          "RX72N" /* Generated value. Do not edit this manually */
 131                             	
 132                             	/* Series name.
 133                             	   Character(s) = Description
 134                             	   57           = RX700 Series
 135                             	*/
 136                             	#define BSP_CFG_MCU_PART_SERIES         "RX700" /* Generated value. Do not edit this manually */
 137                             	
 138                             	/* Memory type.
 139                             	   Character(s) = Value for macro = Description
 140                             	   F            = 0x0             = Flash memory version
 141                             	*/
 142                             	#define BSP_CFG_MCU_PART_MEMORY_TYPE    (0x0) /* Generated value. Do not edit this manually */
 143                             	
 144                             	/* Whether to use 1 stack or 2. RX MCUs have the ability to use 2 stacks: an interrupt stack and a 
 145                             	 * When using 2 stacks the user stack will be used during normal user code. When an interrupt occur
 146                             	 * will automatically shift to using the interrupt stack. Having 2 stacks can make it easier to fig
 147                             	 * much stack space to allocate since the user does not have to worry about always having enough ro
 148                             	 * user stack for if-and-when an interrupt occurs. Some users will not want 2 stacks though because
 149                             	 * needed in all applications and can lead to wasted RAM (i.e. space in between stacks that is not 
 150                             	 * If only 1 stack is used then the interrupt stack is the one that will be used. If 1 stack is cho
 151                             	 * the user may want to remove the 'SU' section from the linker sections to remove any linker warni
 152                             	 *
 153                             	 * 0 = Use 1 stack. Disable user stack. User stack size set below will be ignored.
 154                             	 * 1 = Use 2 stacks. User stack and interrupt stack will both be used.
 155                             	 * NOTE: This setting is available only when using CCRX and GNUC.
 156                             	 *       This is invalid when using Renesas RTOS with CCRX.
 157                             	 */
 158                             	#define BSP_CFG_USER_STACK_ENABLE       (1)
 159                             	
 160                             	/* If only 1 stack is chosen using BSP_CFG_USER_STACK_ENABLE then no RAM will be allocated for the 
 161                             	#if BSP_CFG_USER_STACK_ENABLE == 1
 162                             	/* User Stack size in bytes.
 163                             	 * NOTE: This setting is available only when using CCRX and GNUC.
 164                             	 *       This is invalid when using Renesas RTOS with CCRX. */
 165                             	#define BSP_CFG_USTACK_BYTES            (0x1000)
 166                             	#endif
 167                             	
 168                             	/* Interrupt Stack size in bytes.
 169                             	 * NOTE: This setting is available only when using CCRX and GNUC. */
 170                             	#define BSP_CFG_ISTACK_BYTES            (0x400)
 171                             	
 172                             	/* Heap size in bytes.
 173                             	   To disable the heap you must follow these steps:
 174                             	   1) Set this macro (BSP_CFG_HEAP_BYTES) to 0.
 175                             	   2) Set the macro BSP_CFG_IO_LIB_ENABLE to 0.
 176                             	   3) Disable stdio from being built into the project library. This is done by going into the Renes
 177                             	      settings and choosing the Standard Library section. After that choose 'Contents' in e2 studio
 178                             	      This will present a list of modules that can be included. Uncheck the box for stdio.h.
 179                             	   NOTE: This setting is available only when using CCRX and GNUC. */
 180                             	#define BSP_CFG_HEAP_BYTES              (0x4000)
 181                             	
 182                             	/* Initializes C input & output library functions.
 183                             	   0 = Disable I/O library initialization in resetprg.c. If you are not using stdio then use this v
 184                             	   1 = Enable I/O library initialization in resetprg.c. This is default and needed if you are using
 185                             	   NOTE: This setting is available only when using CCRX. */
 186                             	#define BSP_CFG_IO_LIB_ENABLE           (0)
 187                             	
 188                             	/* If desired the user may redirect the stdio charget() and/or charput() functions to their own res
 189                             	   by enabling below and providing and replacing the my_sw_... function names with the names of the
 190                             	#define BSP_CFG_USER_CHARGET_ENABLED    (0)
 191                             	#define BSP_CFG_USER_CHARGET_FUNCTION     my_sw_charget_function
 192                             	
 193                             	#define BSP_CFG_USER_CHARPUT_ENABLED    (0)
 194                             	#define BSP_CFG_USER_CHARPUT_FUNCTION     my_sw_charput_function
 195                             	
 196                             	/* After reset MCU will operate in Supervisor mode. To switch to User mode, set this macro to '1'. 
 197                             	   on the differences between these 2 modes see the CPU >> Processor Mode section of your MCU's har
 198                             	   0 = Stay in Supervisor mode.
 199                             	   1 = Switch to User mode.
 200                             	   NOTE: This is invalid when using Renesas RTOS with CCRX.
 201                             	*/
 202                             	#define BSP_CFG_RUN_IN_USER_MODE        (0)
 203                             	
 204                             	/* Set your desired ID code. NOTE, leave at the default (all 0xFF's) if you do not wish to use an I
 205                             	   this value and program it into the MCU then you will need to remember the ID code because the de
 206                             	   it when trying to connect. Note that the E1/E20 will ignore the ID code when programming the MCU
 207                             	   If you set this value and then forget it then you can clear the ID code by connecting up in seri
 208                             	   FDT. The ID Code is 16 bytes long. The macro below define the ID Code in 4-byte sections. */
 209                             	/* Lowest 4-byte section, address 0xFE7F5D50. From MSB to LSB: ID code 4, ID code 3, ID code 2, ID 
 210                             	 */
 211                             	#define BSP_CFG_ID_CODE_LONG_1          (0xFFFFFFFF)
 212                             	/* 2nd ID Code section, address 0xFE7F5D54. From MSB to LSB: ID code 8, ID code 7, ID code 6, ID co
 213                             	#define BSP_CFG_ID_CODE_LONG_2          (0xFFFFFFFF)
 214                             	/* 3rd ID Code section, address 0xFE7F5D58. From MSB to LSB: ID code 12, ID code 11, ID code 10, ID
 215                             	#define BSP_CFG_ID_CODE_LONG_3          (0xFFFFFFFF)
 216                             	/* 4th ID Code section, address 0xFE7F5D5C. From MSB to LSB: ID code 16, ID code 15, ID code 14, ID
 217                             	#define BSP_CFG_ID_CODE_LONG_4          (0xFFFFFFFF)
 218                             	
 219                             	/* Select whether to enables or disables the connection of serial programmer.
 220                             	   0 = Connection of a serial programmer is prohibited after a reset.
 221                             	   1 = Connection of a serial programmer is permitted after a reset. (default)
 222                             	*/
 223                             	#define BSP_CFG_SERIAL_PROGRAMMER_CONECT_ENABLE   (1)
 224                             	
 225                             	/* Select whether to oscillate the Main Clock Oscillator.
 226                             	   0 = Stop Oscillating the Main Clock.
 227                             	   1 = Enable oscillating the Main Clock. (default)
 228                             	*/
 229                             	#define BSP_CFG_MAIN_CLOCK_OSCILLATE_ENABLE    (1) /* Generated value. Do not edit this manually */
 230                             	
 231                             	/* Select whether to oscillate the Sub Clock Oscillator.
 232                             	   0 = Stop Oscillating the Sub Clock. (default)
 233                             	   1 = Enable Oscillating the Sub Clock.
 234                             	*/
 235                             	#define BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE     (1) /* Generated value. Do not edit this manually */
 236                             	
 237                             	/* Select whether to oscillate the High Speed On-Chip Oscillator (HOCO).
 238                             	   0 = Stop Oscillating the HOCO. (default)
 239                             	   1 = Enable Oscillating the HOCO.
 240                             	*/
 241                             	#define BSP_CFG_HOCO_OSCILLATE_ENABLE          (0) /* Generated value. Do not edit this manually */
 242                             	
 243                             	/* Select whether to oscillate the Low Speed On-Chip Oscillator (LOCO).
 244                             	   0 = Stop Oscillating the LOCO. (default)
 245                             	   1 = Enable Oscillating the LOCO.
 246                             	*/
 247                             	#define BSP_CFG_LOCO_OSCILLATE_ENABLE          (0) /* Generated value. Do not edit this manually */
 248                             	
 249                             	/* Select whether to oscillate the IWDT-Dedicated On-Chip Oscillator (IWDT).
 250                             	   0 = Stop Oscillating the IWDT Clock. (default)
 251                             	   1 = Enable Oscillating the IWDT Clock.
 252                             	*/
 253                             	#define BSP_CFG_IWDT_CLOCK_OSCILLATE_ENABLE    (0) /* Generated value. Do not edit this manually */
 254                             	
 255                             	/* Clock source select (CKSEL).
 256                             	   0 = Low Speed On-Chip Oscillator  (LOCO)
 257                             	   1 = High Speed On-Chip Oscillator (HOCO)
 258                             	   2 = Main Clock Oscillator
 259                             	   3 = Sub-Clock Oscillator
 260                             	   4 = PLL Circuit (default)
 261                             	*/
 262                             	#define BSP_CFG_CLOCK_SOURCE            (4) /* Generated value. Do not edit this manually */
 263                             	
 264                             	/* Main clock Oscillator Switching (MOSEL).
 265                             	   0 = Resonator (default)
 266                             	   1 = External clock input
 267                             	*/
 268                             	#define BSP_CFG_MAIN_CLOCK_SOURCE       (0) /* Generated value. Do not edit this manually */
 269                             	
 270                             	/* USB Clock source select (UPLLSEL). Choose which clock source to input to the USB circuit.
 271                             	   0 = System Clock (PLL Circuit/No division) (This is not available.)
 272                             	   1 = USB PLL Circuit (This is not available.)
 273                             	   2 = PLL Circuit (UDIVCLK) (default)
 274                             	   3 = PPLL Circuit (PPLLDIVCLK)
 275                             	*/
 276                             	#define BSP_CFG_USB_CLOCK_SOURCE        (2) /* Generated value. Do not edit this manually */
 277                             	
 278                             	/* Ethernet-PHY clock source (OUTCKSEL). Choose which clock source to input to the Ethernet PHY LSI
 279                             	   Available clock sources:
 280                             	   0 = PLL circuit
 281                             	   1 = PPLL circuit (default)
 282                             	   2 = Ethernet-PHY not use
 283                             	*/
 284                             	#define BSP_CFG_PHY_CLOCK_SOURCE        (1) /* Generated value. Do not edit this manually */
 285                             	
 286                             	/* Configure clock source of clock output(CLKOUT) pin (CKOSEL).
 287                             	   Available clock sources:
 288                             	   0 = LOCO
 289                             	   1 = HOCO
 290                             	   2 = Main clock oscillator (default)
 291                             	   3 = Sub-clock oscillator
 292                             	   4 = PLL circuit
 293                             	   6 = PPLL circuit
 294                             	 */
 295                             	#define BSP_CFG_CLKOUT_SOURCE           (2) /* Generated value. Do not edit this manually */
 296                             	
 297                             	/* The sub-clock oscillation control for using the RTC.
 298                             	   When '1' is selected, the registers related to RTC are initialized and the sub-clock oscillator 
 299                             	   0 = The RTC is not to be used.
 300                             	   1 = The RTC is to be used.
 301                             	*/
 302                             	#define BSP_CFG_RTC_ENABLE              (1) /* Generated value. Do not edit this manually */
 303                             	
 304                             	/* Sub-Clock Oscillator Drive Capacity Control (RTCDV).
 305                             	   0 = Drive capacity for standard CL. (default)
 306                             	   1 = Drive capacity for low CL.
 307                             	*/
 308                             	#define BSP_CFG_SOSC_DRV_CAP            (0) /* Generated value. Do not edit this manually */
 309                             	
 310                             	/* Clock configuration options.
 311                             	   The input clock frequency is specified and then the system clocks are set by specifying the mult
 312                             	   multiplier settings are used to set the clock registers in resetprg.c. If a 24MHz clock is used 
 313                             	   ICLK is 120MHz, PCLKA is 120MHz, PCLKB is 60MHz, PCLKC is 60MHz, PCLKD is 60MHz, FCLK is 60MHz, 
 314                             	   USB Clock is 48MHz, ESC Clock is 100MHz, Ether-Phy Clock is 25MHz then the settings would be:
 315                             	
 316                             	   BSP_CFG_XTAL_HZ   = 24000000
 317                             	   BSP_CFG_PLL_DIV   = 1       (no division)
 318                             	   BSP_CFG_PLL_MUL   = 10.0    (24MHz x 10.0 = 240MHz)
 319                             	   BSP_CFG_PPLL_DIV  = 3       (divide by 3)
 320                             	   BSP_CFG_PPLL_MUL  = 25.0    (8MHz x 25.0 = 200MHz)
 321                             	   BSP_CFG_PPLCK_DIV = 2       (divide by 2)
 322                             	   BSP_CFG_ICK_DIV   = 1     : System Clock (ICLK)        = 
 323                             	                              (((BSP_CFG_XTAL_HZ/BSP_CFG_PLL_DIV) * BSP_CFG_PLL_MUL) / BSP_CFG_ICK_
 324                             	   BSP_CFG_PCKA_DIV  = 2     : Peripheral Clock A (PCLKA) = 
 325                             	                              (((BSP_CFG_XTAL_HZ/BSP_CFG_PLL_DIV) * BSP_CFG_PLL_MUL) / BSP_CFG_PCKA
 326                             	   BSP_CFG_PCKB_DIV  = 4     : Peripheral Clock B (PCLKB) = 
 327                             	                              (((BSP_CFG_XTAL_HZ/BSP_CFG_PLL_DIV) * BSP_CFG_PLL_MUL) / BSP_CFG_PCKB
 328                             	   BSP_CFG_PCKC_DIV  = 4     : Peripheral Clock C (PCLKC) = 
 329                             	                              (((BSP_CFG_XTAL_HZ/BSP_CFG_PLL_DIV) * BSP_CFG_PLL_MUL) / BSP_CFG_PCKC
 330                             	   BSP_CFG_PCKD_DIV  = 4     : Peripheral Clock D (PCLKD) = 
 331                             	                              (((BSP_CFG_XTAL_HZ/BSP_CFG_PLL_DIV) * BSP_CFG_PLL_MUL) / BSP_CFG_PCKD
 332                             	   BSP_CFG_FCK_DIV   = 4     : Flash IF Clock (FCLK)      = 
 333                             	                              (((BSP_CFG_XTAL_HZ/BSP_CFG_PLL_DIV) * BSP_CFG_PLL_MUL) / BSP_CFG_FCK_
 334                             	   BSP_CFG_BCK_DIV   = 3     : External Bus Clock (BCK)   = 
 335                             	                              (((BSP_CFG_XTAL_HZ/BSP_CFG_PLL_DIV) * BSP_CFG_PLL_MUL) / BSP_CFG_BCK_
 336                             	   BSP_CFG_UCK_DIV   = 5     : USB Clock (UCLK)           = 
 337                             	                              (((BSP_CFG_XTAL_HZ/BSP_CFG_PLL_DIV) * BSP_CFG_PLL_MUL) / BSP_CFG_UCK_
 338                             	*/
 339                             	
 340                             	/* Input clock frequency in Hz (XTAL or EXTAL). */
 341                             	#define BSP_CFG_XTAL_HZ                 (24000000) /* Generated value. Do not edit this manually */
 342                             	
 343                             	/* The HOCO can operate at several different frequencies. Choose which one using the macro below.
 344                             	   Available frequency settings:
 345                             	   0 = 16MHz (default)
 346                             	   1 = 18MHz
 347                             	   2 = 20MHz
 348                             	*/
 349                             	#define BSP_CFG_HOCO_FREQUENCY          (0) /* Generated value. Do not edit this manually */
 350                             	
 351                             	/* PLL clock source (PLLSRCSEL). Choose which clock source to input to the PLL circuit.
 352                             	   Available clock sources:
 353                             	   0 = Main clock (default)
 354                             	   1 = HOCO
 355                             	*/
 356                             	#define BSP_CFG_PLL_SRC                 (0) /* Generated value. Do not edit this manually */
 357                             	
 358                             	/* PLL Input Frequency Division Ratio Select (PLIDIV).
 359                             	   Available divisors = /1 (no division), /2, /3
 360                             	*/
 361                             	#define BSP_CFG_PLL_DIV                 (1) /* Generated value. Do not edit this manually */
 362                             	
 363                             	/* PLL Frequency Multiplication Factor Select (STC).
 364                             	   Available multipliers = x10.0 to x30.0 in 0.5 increments (e.g. 10.0, 10.5, 11.0, 11.5, ..., 29.0
 365                             	*/
 366                             	#define BSP_CFG_PLL_MUL                 (10.0) /* Generated value. Do not edit this manually */
 367                             	
 368                             	/* System Clock Divider (ICK).
 369                             	   Available divisors = /1 (no division), /2, /4, /8, /16, /32, /64
 370                             	*/
 371                             	#define BSP_CFG_ICK_DIV                 (1) /* Generated value. Do not edit this manually */
 372                             	
 373                             	/* Peripheral Module Clock A Divider (PCKA).
 374                             	   Available divisors = /1 (no division), /2, /4, /8, /16, /32, /64
 375                             	*/
 376                             	#define BSP_CFG_PCKA_DIV                (2) /* Generated value. Do not edit this manually */
 377                             	
 378                             	/* Peripheral Module Clock B Divider (PCKB).
 379                             	   Available divisors = /1 (no division), /2, /4, /8, /16, /32, /64
 380                             	*/
 381                             	#define BSP_CFG_PCKB_DIV                (4) /* Generated value. Do not edit this manually */
 382                             	
 383                             	/* Peripheral Module Clock C Divider (PCKC).
 384                             	   Available divisors = /1 (no division), /2, /4, /8, /16, /32, /64
 385                             	*/
 386                             	#define BSP_CFG_PCKC_DIV                (4) /* Generated value. Do not edit this manually */
 387                             	
 388                             	/* Peripheral Module Clock D Divider (PCKD).
 389                             	   Available divisors = /1 (no division), /2, /4, /8, /16, /32, /64
 390                             	*/
 391                             	#define BSP_CFG_PCKD_DIV                (4) /* Generated value. Do not edit this manually */
 392                             	
 393                             	/* External Bus Clock Divider (BCLK).
 394                             	   Available divisors = /1 (no division), /2, /3, /4, /8, /16, /32, /64
 395                             	*/
 396                             	#define BSP_CFG_BCK_DIV                 (3) /* Generated value. Do not edit this manually */
 397                             	
 398                             	/* Flash IF Clock Divider (FCK).
 399                             	   Available divisors = /1 (no division), /2, /4, /8, /16, /32, /64
 400                             	*/
 401                             	#define BSP_CFG_FCK_DIV                 (4) /* Generated value. Do not edit this manually */
 402                             	
 403                             	/* USB Clock Divider Select.
 404                             	   Available divisors = /2, /3, /4, /5
 405                             	*/
 406                             	#define BSP_CFG_UCK_DIV                 (5) /* Generated value. Do not edit this manually */
 407                             	
 408                             	/* PPLL Input Frequency Division Ratio Select (PPLIDIV).
 409                             	   Available divisors = /1 (no division), /2, /3
 410                             	*/
 411                             	#define BSP_CFG_PPLL_DIV                (3) /* Generated value. Do not edit this manually */
 412                             	
 413                             	/* PPLL Frequency Multiplication Factor Select (PPLSTC). 
 414                             	   Available multipliers = x10.0 to x30.0 in 0.5 increments (e.g. 10.0, 10.5, 11.0, 11.5, ..., 29.0
 415                             	*/
 416                             	#define BSP_CFG_PPLL_MUL                (25.0) /* Generated value. Do not edit this manually */
 417                             	
 418                             	/* PPLL Clock Divider Select. 
 419                             	   Available divisors = /2, /3, /4, /5
 420                             	*/
 421                             	#define BSP_CFG_PPLCK_DIV               (2) /* Generated value. Do not edit this manually */
 422                             	
 423                             	/* Configure BCLK output pin (only effective when external bus enabled)
 424                             	   Values 0=no output, 1 = BCK frequency, 2= BCK/2 frequency
 425                             	*/
 426                             	#define BSP_CFG_BCLK_OUTPUT             (0) /* Generated value. Do not edit this manually */
 427                             	
 428                             	/* Configure SDCLK output pin (only effective when external bus enabled)
 429                             	   Values 0=no output, 1 = BCK frequency
 430                             	*/
 431                             	#define BSP_CFG_SDCLK_OUTPUT            (0)
 432                             	
 433                             	/* CLKOUT Output Frequency Division Ratio Select. (CKODIV)
 434                             	   Values
 435                             	   0 = x1/1 (default)
 436                             	   1 = x1/2
 437                             	   2 = x1/4
 438                             	   3 = x1/8
 439                             	   4 = x1/16
 440                             	 */
 441                             	#define BSP_CFG_CLKOUT_DIV              (0) /* Generated value. Do not edit this manually */
 442                             	
 443                             	/* Configure clock output(CLKOUT) pin (CKOSTP).
 444                             	   Values
 445                             	   0 = CLKOUT pin output stopped. (Fixed to the low level) (default)
 446                             	   1 = CLKOUT pin output enabled.
 447                             	 */
 448                             	#define BSP_CFG_CLKOUT_OUTPUT           (0) /* Generated value. Do not edit this manually */
 449                             	
 450                             	/* Main Clock Oscillator Wait Time (MOSCWTCR).
 451                             	   The value of MOSCWTCR register required for correspondence with the waiting time required to sec
 452                             	   oscillation by the main clock oscillator is obtained by using the maximum frequency for fLOCO in
 453                             	
 454                             	   BSP_CFG_MOSC_WAIT_TIME > (tMAINOSC * (fLOCO_max) + 16)/32
 455                             	   (tMAINOSC: main clock oscillation stabilization time; fLOCO_max: maximum frequency for fLOCO)
 456                             	
 457                             	   If tMAINOSC is 9.98 ms and fLOCO_max is 264 kHz (the period is 1/3.78 us), the formula gives 
 458                             	   BSP_CFG_MOSC_WAIT_TIME > (9.98 ms * (264 kHZ) + 16)/32 = 82.83, so set the BSP_CFG_MOSC_WAIT_TIM
 459                             	
 460                             	   NOTE: The waiting time is not required when an external clock signal is input for the main clock
 461                             	         Set the BSP_CFG_MOSC_WAIT_TIME to 00h.
 462                             	*/
 463                             	#define BSP_CFG_MOSC_WAIT_TIME          (0x53) /* Generated value. Do not edit this manually */
 464                             	
 465                             	/* Sub-Clock Oscillator Wait Time (SOSCWTCR).
 466                             	   The value of SOSCWTCR register required for correspondence with the expected time to secure sett
 467                             	   by the sub-clock oscillator is obtained by using the maximum frequency for fLOCO in the formula 
 468                             	
 469                             	   BSP_CFG_SOSC_WAIT_TIME > (tSUBOSC * (fLOCO_max) + 16)/16384
 470                             	   (tSUBOSC: sub-clock oscillation stabilization time; fLOCO_max: maximum frequency for fLOCO)
 471                             	
 472                             	   If tSUBOSC is 2 s and fLOCO is 264 kHz (the period is 1/3.78 us), the formula gives
 473                             	    BSP_CFG_SOSC_WAIT_TIME > (2 s * (264 kHz) +16)/16384 = 32.22, so set the  BSP_CFG_SOSC_WAIT_TIM
 474                             	*/
 475                             	#define BSP_CFG_SOSC_WAIT_TIME          (0x01) /* Generated value. Do not edit this manually */
 476                             	
 477                             	/* ROM Cache Enable Register (ROMCE).
 478                             	   0 = ROM cache operation disabled.
 479                             	   1 = ROM cache operation enabled.
 480                             	*/ 
 481                             	#define BSP_CFG_ROM_CACHE_ENABLE        (1)
 482                             	
 483                             	/* Configure non-cacheable area 0 of the ROM cache function.
 484                             	   0 = Non-cacheable area 0 settings disabled.
 485                             	   1 = Non-cacheable area 0 settings enabled.
 486                             	*/
 487                             	#define BSP_CFG_NONCACHEABLE_AREA0_ENABLE    (0)
 488                             	
 489                             	/* Specifies the start address of non-cacheable area 0.
 490                             	   Selects the start address of non-cacheable area 0.
 491                             	   The upper 10 bits are fixed at 1. The lower 4 bits are fixed at 0.
 492                             	*/
 493                             	#define BSP_CFG_NONCACHEABLE_AREA0_ADDR      (0xFFE00000)
 494                             	
 495                             	/* Configures the size of non-cacheable area 0.
 496                             	   Selects the size of non-cacheable area 0 in byte units from among the following:
 497                             	   0x0 =  16 bytes, 0xA =  16K bytes,
 498                             	   0x1 =  32 bytes, 0xB =  32K bytes,
 499                             	   0x2 =  64 bytes, 0xC =  64K bytes,
 500                             	   0x3 = 128 bytes, 0xD = 128K bytes,
 501                             	   0x4 = 256 bytes, 0xE = 256K bytes,
 502                             	   0x5 = 512 bytes, 0xF = 512K bytes,
 503                             	   0x6 =  1K bytes, 0x10=   1M bytes,
 504                             	   0x7 =  2K bytes, 0x11=   2M bytes,
 505                             	   0x8 =  4K bytes,
 506                             	   0x9 =  8K bytes
 507                             	*/
 508                             	#define BSP_CFG_NONCACHEABLE_AREA0_SIZE      (0x0)
 509                             	
 510                             	/* Specifies the IF non-cacheable area enable bit setting of non-cacheable area 0.
 511                             	   0 = Non-cacheable area 0 setting of IF cache disabled.
 512                             	   1 = Non-cacheable area 0 setting of IF cache enabled.
 513                             	*/
 514                             	#define BSP_CFG_NONCACHEABLE_AREA0_IF_ENABLE (1)
 515                             	
 516                             	/* Specifies the OA non-cacheable area enable bit setting of non-cacheable area 0.
 517                             	   0 = Non-cacheable area 0 setting of OA cache disabled.
 518                             	   1 = Non-cacheable area 0 setting of OA cache enabled.
 519                             	*/
 520                             	#define BSP_CFG_NONCACHEABLE_AREA0_OA_ENABLE (1)
 521                             	
 522                             	/* Specifies the DM non-cacheable area enable bit setting of non-cacheable area 0.
 523                             	   0 = Non-cacheable area 0 setting of DM cache disabled.
 524                             	   1 = Non-cacheable area 0 setting of DM cache enabled.
 525                             	*/
 526                             	#define BSP_CFG_NONCACHEABLE_AREA0_DM_ENABLE (1)
 527                             	
 528                             	/* Configure non-cacheable area 1 of the ROM cache function.
 529                             	   0 = Non-cacheable area 1 settings disabled.
 530                             	   1 = Non-cacheable area 1 settings enabled.
 531                             	*/
 532                             	#define BSP_CFG_NONCACHEABLE_AREA1_ENABLE    (0)
 533                             	
 534                             	/* Specifies the start address of non-cacheable area 1.
 535                             	   Selects the start address of non-cacheable area 1.
 536                             	   The upper 10 bits are fixed at 1. The lower 4 bits are fixed at 0.
 537                             	*/
 538                             	#define BSP_CFG_NONCACHEABLE_AREA1_ADDR      (0xFFE00000)
 539                             	
 540                             	/* Configures the size of non-cacheable area 1.
 541                             	   Selects the size of non-cacheable area 0 in byte units from among the following:
 542                             	   0x0 =  16 bytes, 0xA =  16K bytes,
 543                             	   0x1 =  32 bytes, 0xB =  32K bytes,
 544                             	   0x2 =  64 bytes, 0xC =  64K bytes,
 545                             	   0x3 = 128 bytes, 0xD = 128K bytes,
 546                             	   0x4 = 256 bytes, 0xE = 256K bytes,
 547                             	   0x5 = 512 bytes, 0xF = 512K bytes,
 548                             	   0x6 =  1K bytes, 0x10=   1M bytes,
 549                             	   0x7 =  2K bytes, 0x11=   2M bytes,
 550                             	   0x8 =  4K bytes,
 551                             	   0x9 =  8K bytes
 552                             	*/
 553                             	#define BSP_CFG_NONCACHEABLE_AREA1_SIZE      (0x0)
 554                             	
 555                             	/* Specifies the IF non-cacheable area enable bit setting of non-cacheable area 1.
 556                             	   0 = Non-cacheable area 1 setting of IF cache disabled.
 557                             	   1 = Non-cacheable area 1 setting of IF cache enabled.
 558                             	*/
 559                             	#define BSP_CFG_NONCACHEABLE_AREA1_IF_ENABLE (1)
 560                             	
 561                             	/* Specifies the OA non-cacheable area enable bit setting of non-cacheable area 1.
 562                             	   0 = Non-cacheable area 1 setting of OA cache disabled.
 563                             	   1 = Non-cacheable area 1 setting of OA cache enabled.
 564                             	*/
 565                             	#define BSP_CFG_NONCACHEABLE_AREA1_OA_ENABLE (1)
 566                             	
 567                             	/* Specifies the DM non-cacheable area enable bit setting of non-cacheable area 1.
 568                             	   0 = Non-cacheable area 1 setting of DM cache disabled.
 569                             	   1 = Non-cacheable area 1 setting of DM cache enabled.
 570                             	*/
 571                             	#define BSP_CFG_NONCACHEABLE_AREA1_DM_ENABLE (1)
 572                             	
 573                             	/* Configure WDT and IWDT settings.
 574                             	   OFS0 - Option Function Select Register 0
 575                             	       b31:b29 Reserved When reading, these bits return the value written by the user. The write va
 576                             	       b28     WDTRSTIRQS - WDT Reset Interrupt Request - What to do on underflow (0=take interrupt
 577                             	       b27:b26 WDTRPSS   - WDT Window Start Position Select - (0=25%, 1=50%, 2=75%, 3=100%,don't us
 578                             	       b25:b24 WDTRPES   - WDT Window End Position Select - (0=75%, 1=50%, 2=25%, 3=0%,don't use)
 579                             	       b23:b20 WDTCKS    - WDT Clock Frequency Division Ratio - (1=PCLKB/4, 4=PCLKB/64, 0xF=PCLKB/1
 580                             	                                                                 7=PCLKB/2048, 8=PCLKB/8192)
 581                             	       b19:b18 WDTTOPS   - WDT Timeout Period Select (0=1024 cycles, 1=4096, 2=8192, 3=16384)
 582                             	       b17     WDTSTRT   - WDT Start Mode Select - (0=auto-start after reset, 1=halt after reset)
 583                             	       b16:b15 Reserved (set to 1)
 584                             	       b14     IWDTSLCSTP - IWDT Sleep Mode Count Stop Control - (0=can't stop count, 1=stop w/some
 585                             	       b13     Reserved (set to 1)
 586                             	       b12     IWDTRSTIRQS - IWDT Reset Interrupt Request - What to do on underflow (0=take interru
 587                             	       b11:b10 IWDTRPSS - IWDT Window Start Position Select - (0=25%, 1=50%, 2=75%, 3=100%,don't us
 588                             	       b9:b8   IWDTRPES - IWDT Window End Position Select - (0=75%, 1=50%, 2=25%, 3=0%,don't use)
 589                             	       b7:b4   IWDTCKS - IWDT Clock Frequency Division Ratio - (0=none, 2=/16, 3 = /32, 4=/64, 0xF=
 590                             	       b3:b2   IWDTTOPS - IWDT Timeout Period Select - (0=1024 cycles, 1=4096, 2=8192, 3=16384)
 591                             	       b1      IWDTSTRT - IWDT Start Mode Select - (0=auto-start after reset, 1=halt after reset)
 592                             	       b0      Reserved (set to 1)
 593                             	   Default value is 0xFFFFFFFF.
 594                             	*/
 595                             	#define BSP_CFG_OFS0_REG_VALUE  (0xFFFFFFFF) /* Generated value. Do not edit this manually */
 596                             	
 597                             	/* Configure whether voltage detection 0 circuit and HOCO are enabled after reset.
 598                             	   OFS1 - Option Function Select Register 1
 599                             	       b31:b9 Reserved (set to 1)
 600                             	       b8     HOCOEN - Enable/disable HOCO oscillation after a reset (0=enable, 1=disable)
 601                             	       b7:b3  Reserved When reading, these bits return the value written by the user. The write val
 602                             	       b2     LVDAS - Voltage Detection 0 circuit start (1=monitoring disabled)
 603                             	       b1:b0  VDSEL - Voltage Detection 0 level select (1=2.94v, 2=2.87v, 3=2.80v)
 604                             	       NOTE: If HOCO oscillation is enabled by OFS1.HOCOEN, HOCO frequency is 16MHz.
 605                             	             BSP_CFG_HOCO_FREQUENCY should be default value.
 606                             	   Default value is 0xFFFFFFFF.
 607                             	*/
 608                             	#define BSP_CFG_OFS1_REG_VALUE  (0xFFFFFFFF) /* Generated value. Do not edit this manually */
 609                             	
 610                             	/* Trusted memory is facility to prevent the reading of blocks 8 and 9 and blocks 78 and 79 (in dua
 611                             	   the code flash memory by third party software. This feature is disabled by default.
 612                             	   TMEF - TM Enable Flag Register
 613                             	       b31     Reserved (set to 1)
 614                             	       b30:b28 TMEFDB - Dual-Bank TM Enable - 000: The TM function in the address range from FFDE 0
 615                             	                                                   FFDE FFFFh is enabled in dual mode.
 616                             	                                            - 111: The TM function in the address range from FFDE 0
 617                             	                                                   FFDE FFFFh is disabled in dual mode.
 618                             	       b27     Reserved (set to 1)
 619                             	       b26:b24 TMEF   - TM Enable - 000: TM function is enabled.
 620                             	                                  - 111: TM function is disabled.
 621                             	       b23:b0  Reserved (set to 1)
 622                             	   Default value is 0xFFFFFFFF.
 623                             	*/
 624                             	#define BSP_CFG_TRUSTED_MODE_FUNCTION  (0xFFFFFFFF)
 625                             	
 626                             	/* Configure FAW register is used to set the write protection flag and boot area select flag 
 627                             	   for setting the flash access window startaddress and flash access window end address.
 628                             	   FAW - Flash Access Window Setting Register
 629                             	       b31      BTFLG - Boot Area Select Flag - 0: FFFF C000h to FFFF DFFFh are used as the boot ar
 630                             	                                              - 1: FFFF E000h to FFFF FFFFh are used as the boot ar
 631                             	       b30:b28  Reserved - When reading, these bits return the value written by the user.The write 
 632                             	       b27:b16  FAWE - Flash Access Window End Address - Flash access window end address
 633                             	       b15      FSPR - Access Window Protection Flag - 0: With protection (P/E disabled)
 634                             	                                                     - 1: Without protection (P/E enabled)
 635                             	       b14:b12  Reserved - When reading, these bits return the value written by the user.The write 
 636                             	       b11:b0   FAWS - Flash Access Window Start Address - Flash access window start address 
 637                             	       NOTE: Once 0 is written to this bit, the bit can never be restored to 1.
 638                             	             Therefore, the access window and the BTFLG bit never be set again or the TM function 
 639                             	             never be disabled once it has been enabled.
 640                             	             Exercise extra caution when handling the FSPR bit.
 641                             	   Default value is 0xFFFFFFFF.
 642                             	*/
 643                             	#define BSP_CFG_FAW_REG_VALUE  (0xFFFFFFFF)
 644                             	
 645                             	/* The ROM code protection register is a function to prohibit reading from or programming to the fl
 646                             	   when the flash programmer is used during off-board programming.
 647                             	   ROMCODE - ROM Code Protection Register
 648                             	       b31:b0  ROM Code - 0000 0000h: ROM code protection enabled (ROM code protection 1).
 649                             	                          0000 0001h: ROM code protection enabled (ROM code protection 2).
 650                             	                          Other than above: ROM code protection disabled.
 651                             	       Note: The ROMCODE register should be set in 32-bit units.
 652                             	   Default value is 0xFFFFFFFF.
 653                             	*/
 654                             	#define BSP_CFG_ROMCODE_REG_VALUE  (0xFFFFFFFF)
 655                             	
 656                             	/* Select the bank mode of dual-bank function of the code flash memory.
 657                             	   0 = Dual mode.
 658                             	   1 = Linear mode. (default)
 659                             	   NOTE: If the dual bank function has been incorporated in a device, select the bank mode in this 
 660                             	         Default setting of the bank mode is linear mode.
 661                             	         If the dual bank function has not been incorporated in a device, this macro should be 1.
 662                             	*/
 663                             	#define BSP_CFG_CODE_FLASH_BANK_MODE    (1)
 664                             	
 665                             	/* Select the startup bank of the program when dual bank function is in dual mode.
 666                             	   0 = The address range of bank 1 from FFC00000h to FFDFFFFFh and bank 0 from FFE00000h to FFFFFFF
 667                             	   1 = The address range of bank 1 from FFE00000h to FFFFFFFFh and bank 0 from FFC00000h to FFDFFFF
 668                             	   NOTE: If the dual bank function has been incorporated in a device, select the start bank in this
 669                             	         Default setting of the start bank is bank0.
 670                             	         If the dual bank function has not been incorporated in a device, this macro should be 0.
 671                             	*/
 672                             	#define BSP_CFG_CODE_FLASH_START_BANK   (0)
 673                             	
 674                             	/* This macro lets other modules no if a RTOS is being used.
 675                             	   0 = RTOS is not used.
 676                             	   1 = FreeRTOS is used.
 677                             	   2 = embOS is used.(This is not available.)
 678                             	   3 = MicroC_OS is used.(This is not available.)
 679                             	   4 = Renesas ITRON OS (RI600V4 or RI600PX) is used.
 680                             	   5 = Azure RTOS is used.
 681                             	*/
 682                             	#define BSP_CFG_RTOS_USED               (0)
 683                             	
 684                             	/* This macro is used to select which Renesas ITRON OS.
 685                             	   0 = RI600V4 is used.
 686                             	   1 = RI600PX is used.
 687                             	*/
 688                             	#define BSP_CFG_RENESAS_RTOS_USED       (0)
 689                             	
 690                             	/* This macro is used to select which CMT channel used for system timer of RTOS.
 691                             	 * The setting of this macro is only valid if the macro BSP_CFG_RTOS_USED is set to a value other t
 692                             	#if BSP_CFG_RTOS_USED != 0
 693                             	/* Setting value.
 694                             	 * 0      = CMT channel 0 used for system timer of RTOS (recommended to be used for RTOS).
 695                             	 * 1      = CMT channel 1 used for system timer of RTOS.
 696                             	 * 2      = CMT channel 2 used for system timer of RTOS.
 697                             	 * 3      = CMT channel 3 used for system timer of RTOS.
 698                             	 * Others = Invalid.
 699                             	 * NOTE: This is invalid when using Renesas RTOS with CCRX.
 700                             	 */
 701                             	#define BSP_CFG_RTOS_SYSTEM_TIMER       (0)
 702                             	#endif
 703                             	
 704                             	/* By default modules will use global locks found in mcu_locks.c. If the user is using a RTOS and w
 705                             	   locking mechanisms then they can change this macro.
 706                             	   NOTE: If '1' is chosen for this macro then the user must also change the next macro 'BSP_CFG_USE
 707                             	   0 = Use default locking (non-RTOS)
 708                             	   1 = Use user defined locking mechanism.
 709                             	*/
 710                             	#define BSP_CFG_USER_LOCKING_ENABLED    (0)
 711                             	
 712                             	/* If the user decides to use their own locking mechanism with FIT modules then they will need to r
 713                             	   that is used for the locks. If the user is using a RTOS then they would likely redefine the type
 714                             	   a semaphore/mutex type of their RTOS. Use the macro below to set the type that will be used for 
 715                             	   NOTE: If BSP_CFG_USER_LOCKING_ENABLED == 0 then this typedef is ignored.
 716                             	   NOTE: Do not surround the type with parentheses '(' ')'.
 717                             	*/
 718                             	#define BSP_CFG_USER_LOCKING_TYPE       bsp_lock_t
 719                             	
 720                             	/* If the user decides to use their own locking mechanism with FIT modules then they will need to d
 721                             	   that will handle the locking and unlocking. These functions should be defined below.
 722                             	   If BSP_CFG_USER_LOCKING_ENABLED is != 0:
 723                             	   R_BSP_HardwareLock(mcu_lock_t hw_index) will call BSP_CFG_USER_LOCKING_HW_LOCK_FUNCTION(mcu_lock
 724                             	   R_BSP_HardwareUnlock(mcu_lock_t hw_index) will call BSP_CFG_USER_LOCKING_HW_UNLOCK_FUNCTION(mcu_
 725                             	       NOTE:With these functions the index into the array holding the global hardware locks is pass
 726                             	   R_BSP_SoftwareLock(BSP_CFG_USER_LOCKING_TYPE * plock) will call 
 727                             	   BSP_CFG_USER_LOCKING_SW_LOCK_FUNCTION(BSP_CFG_USER_LOCKING_TYPE * plock)
 728                             	   R_BSP_SoftwareUnlock(BSP_CFG_USER_LOCKING_TYPE * plock) will call 
 729                             	   BSP_CFG_USER_LOCKING_SW_UNLOCK_FUNCTION(BSP_CFG_USER_LOCKING_TYPE * plock)
 730                             	       NOTE:With these functions the actual address of the lock to use is passed as the parameter.
 731                             	   NOTE: These functions must return a boolean. If lock was obtained or released successfully then 
 732                             	         return false.
 733                             	   NOTE: If BSP_CFG_USER_LOCKING_ENABLED == 0 then this typedef is ignored.
 734                             	   NOTE: Do not surround the type with parentheses '(' ')'.
 735                             	*/
 736                             	#define BSP_CFG_USER_LOCKING_HW_LOCK_FUNCTION      my_hw_locking_function
 737                             	#define BSP_CFG_USER_LOCKING_HW_UNLOCK_FUNCTION    my_hw_unlocking_function
 738                             	#define BSP_CFG_USER_LOCKING_SW_LOCK_FUNCTION      my_sw_locking_function
 739                             	#define BSP_CFG_USER_LOCKING_SW_UNLOCK_FUNCTION    my_sw_unlocking_function
 740                             	
 741                             	/* If the user would like to determine if a warm start reset has occurred, then they may enable one
 742                             	   following callback definitions AND provide a call back function name for the respective callback
 743                             	   function (to be defined by the user). Setting BSP_CFG_USER_WARM_START_CALLBACK_PRE_INITC_ENABLED
 744                             	   in a callback to the user defined my_sw_warmstart_prec_function just prior to the initialization
 745                             	   runtime environment by resetprg.
 746                             	   Setting BSP_CFG_USER_WARM_START_CALLBACK_POST_INITC_ENABLED = 1 will result in a callback to the
 747                             	   my_sw_warmstart_postc_function just after the initialization of the C runtime environment by res
 748                             	*/
 749                             	#define BSP_CFG_USER_WARM_START_CALLBACK_PRE_INITC_ENABLED    (0)
 750                             	#define BSP_CFG_USER_WARM_START_PRE_C_FUNCTION     my_sw_warmstart_prec_function
 751                             	
 752                             	#define BSP_CFG_USER_WARM_START_CALLBACK_POST_INITC_ENABLED    (0)
 753                             	#define BSP_CFG_USER_WARM_START_POST_C_FUNCTION    my_sw_warmstart_postc_function
 754                             	
 755                             	/* By default FIT modules will check input parameters to be valid. This is helpful during developme
 756                             	   will want to disable this for production code. The reason for this would be to save execution ti
 757                             	   This macro is a global setting for enabling or disabling parameter checking. Each FIT module wil
 758                             	   own local macro for this same purpose. By default the local macros will take the global value fr
 759                             	   they can be overridden. Therefore, the local setting has priority over this global setting. Disa
 760                             	   checking should only used when inputs are known to be good and the increase in speed or decrease
 761                             	   needed.
 762                             	   0 = Global setting for parameter checking is disabled.
 763                             	   1 = Global setting for parameter checking is enabled (Default).
 764                             	*/
 765                             	#define BSP_CFG_PARAM_CHECKING_ENABLE               (1)
 766                             	
 767                             	/* The extended bus master has five transfer sources: EDMAC, GLCDC-GRA1 (GLCDC graphics 1 data read
 768                             	   graphics 2 data read), DRW2D-TX (DRW2D texture data read), and DRW2D-FB (DRW2D frame buffer data
 769                             	   display list data read).
 770                             	   The default priority order in bsp is below
 771                             	   GLCDC-GRA1 > GLCDC-GRA2 > DRW2D-TX > DRW2D-FB > EDMAC.
 772                             	   Priority can be changed with this macro.
 773                             	
 774                             	   Extended Bus Master Priority setting
 775                             	   0 = GLCDC graphics 1 data read
 776                             	   1 = DRW2D texture data read
 777                             	   2 = DRW2D frame buffer data read write and display list data read
 778                             	   3 = GLCDC graphics 2 data read
 779                             	   4 = EDMAC
 780                             	
 781                             	   Note : Settings other than above are prohibited.
 782                             	          Duplicate priority settings can not be made.
 783                             	*/
 784                             	#define BSP_CFG_EBMAPCR_1ST_PRIORITY                (0) /* Extended Bus Master 1st Priority Selecti
 785                             	#define BSP_CFG_EBMAPCR_2ND_PRIORITY                (3) /* Extended Bus Master 2nd Priority Selecti
 786                             	#define BSP_CFG_EBMAPCR_3RD_PRIORITY                (1) /* Extended Bus Master 3rd Priority Selecti
 787                             	#define BSP_CFG_EBMAPCR_4TH_PRIORITY                (2) /* Extended Bus Master 4th Priority Selecti
 788                             	#define BSP_CFG_EBMAPCR_5TH_PRIORITY                (4) /* Extended Bus Master 5th Priority Selecti
 789                             	
 790                             	/* This macro is used to define the voltage that is supplied to the MCU (Vcc). This macro is define
 791                             	   macro does not actually change anything on the MCU. Some FIT modules need this information so it
 792                             	#define BSP_CFG_MCU_VCC_MV                          (3300) /* Generated value. Do not edit this man
 793                             	
 794                             	/* Allow initialization of auto-generated peripheral initialization code by Smart Configurator tool
 795                             	   When not using the Smart Configurator, set the value of BSP_CFG_CONFIGURATOR_SELECT to 0.
 796                             	   0 = Disabled (default)
 797                             	   1 = Smart Configurator initialization code used
 798                             	*/
 799                             	#define BSP_CFG_CONFIGURATOR_SELECT                 (1) /* Generated value. Do not edit this manual
 800                             	
 801                             	/* Version number of Smart Configurator.
 802                             	   This macro definition is updated by Smart Configurator.
 803                             	*/
 804                             	#define BSP_CFG_CONFIGURATOR_VERSION                (2220) /* Generated value. Do not edit this man
 805                             	
 806                             	/* For some BSP functions, it is necessary to ensure that, while these functions are executing, int
 807                             	   FIT modules do not occur. By controlling the IPL, these functions disable interrupts that are at
 808                             	   specified interrupt priority level.
 809                             	   This macro sets the IPL. Range is 0x0 - 0xF.
 810                             	   Please set this macro more than IPR for other FIT module interrupts.
 811                             	   The default value is 0xF (maximum value).
 812                             	   Don't change if there is no special processing with higher priority than all fit modules.
 813                             	*/
 814                             	#define BSP_CFG_FIT_IPL_MAX                         (0xF)
 815                             	
 816                             	/* Software Interrupt (SWINT).
 817                             	   0 = Software interrupt is not used.
 818                             	   1 = Software interrupt is used.
 819                             	   NOTE: When this macro is set to 1, the software interrupt is initialized in bsp startup routine.
 820                             	*/
 821                             	#define BSP_CFG_SWINT_UNIT1_ENABLE    (0)
 822                             	#define BSP_CFG_SWINT_UNIT2_ENABLE    (0)
 823                             	
 824                             	/* Software Interrupt Task Buffer Number.
 825                             	   For software interrupt, this value is number of buffering user tasks.
 826                             	   So user can increase this value if user system would have many software interrupt tasks
 827                             	   and user system has enough buffer. This value requires 9 byte per task.
 828                             	   NOTE: This setting is common to all units. It can not be set individually. 
 829                             	         The maximum value is 254.
 830                             	*/
 831                             	#define BSP_CFG_SWINT_TASK_BUFFER_NUMBER     (8)
 832                             	
 833                             	/* Initial value of the software interrupt priority.
 834                             	   For software interrupt, this value is interrupt priority. Range is 0x0 - 0xF.
 835                             	   NOTE: This setting is common to all units. It can not be set individually. 
 836                             	         Please be careful that this setting is the initial value of the interrupt priority registe
 837                             	         It is possible to dynamically change the IPR.
 838                             	*/
 839                             	#define BSP_CFG_SWINT_IPR_INITIAL_VALUE     (0x1)
 840                             	
 841                             	/* This macro is used for serial terminal on the board selected by smart configurator.
 842                             	   0 = SCI UART Terminal is disabled.
 843                             	   1 = SCI UART Terminal is enabled.
 844                             	*/
 845                             	#define BSP_CFG_SCI_UART_TERMINAL_ENABLE         (0)
 846                             	
 847                             	/* This macro is channel number for serial terminal.
 848                             	*/
 849                             	#define BSP_CFG_SCI_UART_TERMINAL_CHANNEL        (9)
 850                             	
 851                             	/* This macro is bit-rate for serial terminal.
 852                             	*/
 853                             	#define BSP_CFG_SCI_UART_TERMINAL_BITRATE        (115200)
 854                             	
 855                             	/* This macro is interrupt priority for serial terminal.
 856                             	   0(low) - 15(high)
 857                             	*/
 858                             	#define BSP_CFG_SCI_UART_TERMINAL_INTERRUPT_PRIORITY   (15)
 859                             	
 860                             	/* This macro is used for C++ project and updated by Smart Configurator.
 861                             	   0 = This project is a C project.(Not a C++ project).
 862                             	   1 = This project is a C++ project.
 863                             	*/
 864                             	#define BSP_CFG_CPLUSPLUS             (0) /* Generated value. Do not edit this manually */
 865                             	
 866                             	/* Select whether to enable sections of the expansion RAM area.
 867                             	   0 = Sections of the expansion RAM area is disabled. (default)
 868                             	   1 = Sections of the expansion RAM area is enabled.
 869                             	*/
 870                             	#define BSP_CFG_EXPANSION_RAM_ENABLE  (0)
 871                             	
 872                             	/* Select whether to enable bus priority initialization.
 873                             	   0 = Bus priority initialization is disabled.
 874                             	   1 = Bus priority initialization is enabled.
 875                             	*/
 876                             	#define BSP_CFG_BUS_PRIORITY_INITIALIZE_ENABLE      (0)
 877                             	
 878                             	/* Select the priority order for memory bus 1 (RAM) and memory bus 3 (expansion RAM/ECCRAM).
 879                             	   0 = The order of priority is fixed.
 880                             	   1 = The order of priority is toggled.
 881                             	*/
 882                             	#define BSP_CFG_MEMORY_BUS1_3_PRIORITY              (0)
 883                             	
 884                             	/* Select the priority order for memory bus 2 (code flash memory).
 885                             	   0 = The order of priority is fixed.
 886                             	   1 = The order of priority is toggled.
 887                             	*/
 888                             	#define BSP_CFG_MEMORY_BUS2_PRIORITY                (0)
 889                             	
 890                             	/* Select the priority order for internal peripheral bus 1.
 891                             	   0 = The order of priority is fixed.
 892                             	   1 = The order of priority is toggled.
 893                             	*/
 894                             	#define BSP_CFG_INTERNAL_PERIPHERAL_BUS1_PRIORITY   (0)
 895                             	
 896                             	/* Select the priority order for internal peripheral buses 2 and 3.
 897                             	   0 = The order of priority is fixed.
 898                             	   1 = The order of priority is toggled.
 899                             	*/
 900                             	#define BSP_CFG_INTERNAL_PERIPHERAL_BUS2_3_PRIORITY (0)
 901                             	
 902                             	/* Select the priority order for internal peripheral buses 4 and 5.
 903                             	   0 = The order of priority is fixed.
 904                             	   1 = The order of priority is toggled.
 905                             	*/
 906                             	#define BSP_CFG_INTERNAL_PERIPHERAL_BUS4_5_PRIORITY (0)
 907                             	
 908                             	/* Select the priority order for internal peripheral bus 6.
 909                             	   0 = The order of priority is fixed.
 910                             	   1 = The order of priority is toggled.
 911                             	*/
 912                             	#define BSP_CFG_INTERNAL_PERIPHERAL_BUS6_PRIORITY   (0)
 913                             	
 914                             	/* Select the priority order for the external bus.
 915                             	   0 = The order of priority is fixed.
 916                             	   1 = The order of priority is toggled.
 917                             	*/
 918                             	#define BSP_CFG_EXTERNAL_BUS_PRIORITY               (0)
 919                             	
 920                             	/* Select whether it is bootloader project.
 921                             	   0 = This project isn't a bootloader project.
 922                             	   1 = This project is a bootloader project.
 923                             	   NOTE: Not normally used. Set this to "1" only in the bootloader project.
 924                             	*/
 925                             	#define BSP_CFG_BOOTLOADER_PROJECT    (0)
 926                             	
  31                             	
  32                             	    .if __GNUC__
  33                             	
  34                             	;;reset_program.asm
  35                             	
