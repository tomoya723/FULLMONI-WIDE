   1                             		.file	"r_bsp_cpu.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.R_BSP_InterruptsDisable,"ax",@progbits
   5                             		.global	_R_BSP_InterruptsDisable
   7                             	_R_BSP_InterruptsDisable:
   8                             	.LFB3:
   9                             		.file 1 "../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c"
   1:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
   2:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * DISCLAIMER
   3:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prote
   5:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * applicable laws, including copyright laws.
   6:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF 
   8:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIM
   9:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AF
  10:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY RE
  11:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * this software. By using this software, you agree to the additional terms and conditions found by 
  14:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * following link:
  15:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * http://www.renesas.com/disclaimer
  16:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *
  17:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Copyright (C) 2013 Renesas Electronics Corporation. All rights reserved.
  18:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** ***************************************************************************************************
  19:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
  20:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * File Name    : r_bsp_cpu.c
  21:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Description  : This module implements CPU specific functions. An example is enabling/disabling in
  22:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** ***************************************************************************************************
  23:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
  24:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * History : DD.MM.YYYY Version  Description
  25:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *         : 28.02.2019 3.00     Merged processing of all devices.
  26:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               Added support for GNUC and ICCRX.
  27:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               Fixed coding style.
  28:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *         : 26.07.2019 3.10     Added the API function(R_BSP_SoftwareReset).
  29:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               Modified comment of API function to Doxygen style.
  30:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               Added the vbatt_voltage_stability_wait function.
  31:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               Modified the following functions.
  32:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - R_BSP_RegisterProtectEnable
  33:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - R_BSP_RegisterProtectDisable
  34:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *         : 31.07.2019 3.11     Deleted the compile condition for R_BSP_SoftwareReset.
  35:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *         : 08.10.2019 3.12     Changed the following functions.
  36:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - R_BSP_InterruptsDisable
  37:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - R_BSP_InterruptsEnable
  38:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - R_BSP_CpuInterruptLevelWrite
  39:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *         : 10.12.2019 3.13     Modified the following functions.
  40:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - R_BSP_RegisterProtectEnable
  41:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - R_BSP_RegisterProtectDisable
  42:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *         : 22.04.2022 3.14     Modified the following functions.
  43:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - R_BSP_VoltageLevelSetting
  44:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *         : 28.02.2023 3.15     Modified comment.
  45:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *         : 21.11.2023 3.16     Added the following macro definitions.
  46:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - BSP_PRV_BUSPRI_BPRA_TOGGLE
  47:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - BSP_PRV_BUSPRI_BPRO_TOGGLE
  48:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - BSP_PRV_BUSPRI_BPIB_TOGGLE
  49:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - BSP_PRV_BUSPRI_BPGB_TOGGLE
  50:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - BSP_PRV_BUSPRI_BPHB_TOGGLE
  51:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - BSP_PRV_BUSPRI_BPFB_TOGGLE
  52:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - BSP_PRV_BUSPRI_BPEB_TOGGLE
  53:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               - BSP_PRV_BUSPRI_BPXB_TOGGLE
  54:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** *                               Added bsp_bus_priority_initialize function.
  55:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** ***************************************************************************************************
  56:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
  57:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
  58:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** Includes   <System Includes> , "Project Includes"
  59:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** ***************************************************************************************************
  60:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /* Platform support. */
  61:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #include "platform.h"
  62:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
  63:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
  64:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** Macro definitions
  65:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** ***************************************************************************************************
  66:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_REGISTER_WRITE_PROTECTION
  67:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /* Key code for writing PRCR register. */
  68:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_PRCR_KEY        (0xA500)
  69:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif
  70:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
  71:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING
  72:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_USB
  73:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /* The macro definition for combinations where settings of USBVON bit conflict. */
  74:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_USBVON_CONFLICT (BSP_VOL_USB_POWEROFF | BSP_VOL_USB_POWERON)
  75:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
  76:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /* Bit number of VOLSR register. */
  77:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_VOLSR_USBVON_BIT_NUM  (2)
  78:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_USB */
  79:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
  80:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_AD
  81:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /* The macro definition for combinations where settings of PGAVLS bit conflict. */
  82:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_PGAVLS_CONFLICT (BSP_VOL_AD_NEGATIVE_VOLTAGE_INPUT | BSP_VOL_AD_NEGATIVE_VOLTAGE_NO
  83:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
  84:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /* Bit number of VOLSR register. */
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_VOLSR_PGAVLS_BIT_NUM  (6)
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_AD */
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
  88:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_RIIC
  89:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /* The macro definition for combinations where settings of RICVLS bit conflict. */
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_RICVLS_CONFLICT (BSP_VOL_RIIC_4_5V_OROVER | BSP_VOL_RIIC_UNDER_4_5V)
  91:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /* Bit number of VOLSR register. */
  92:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_VOLSR_RICVLS_BIT_NUM  (7)
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_RIIC */
  94:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING */
  95:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #if BSP_CFG_BUS_PRIORITY_INITIALIZE_ENABLE == 1
  97:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_BUSPRI_BPRA_TOGGLE    (0x0001)
  98:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_BUSPRI_BPRO_TOGGLE    (0x0004)
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_BUSPRI_BPIB_TOGGLE    (0x0010)
 100:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_BUSPRI_BPGB_TOGGLE    (0x0040)
 101:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_BUSPRI_BPHB_TOGGLE    (0x0100)
 102:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_BUSPRI_BPFB_TOGGLE    (0x0400)
 103:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_BUSPRI_BPEB_TOGGLE    (0x1000)
 104:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #define BSP_PRV_BUSPRI_BPXB_TOGGLE    (0x4000)
 105:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_CFG_BUS_PRIORITY_INITIALIZE_ENABLE == 1 */
 106:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 107:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 108:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** Typedef definitions
 109:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** ***************************************************************************************************
 110:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 111:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 112:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** Exported global variables (to be accessed by other files)
 113:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** ***************************************************************************************************
 114:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** Private global variables and functions
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** ***************************************************************************************************
 118:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_REGISTER_WRITE_PROTECTION
 119:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /* Used for holding reference counters for protection bits. */
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** static volatile uint16_t s_protect_counters[BSP_REG_PROTECT_TOTAL_ITEMS];
 121:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 122:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /* Masks for setting or clearing the PRCR register. Use -1 for size because PWPR in MPC is used dif
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** static const    uint16_t s_prcr_masks[BSP_REG_PROTECT_TOTAL_ITEMS-1] = 
 124:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
 125:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_RCPC_PRC0
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     0x0001,         /* PRC0. */
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif
 128:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_RCPC_PRC1
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     0x0002,         /* PRC1. */
 130:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif
 131:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_RCPC_PRC2
 132:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     0x0004,         /* PRC2. */
 133:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif
 134:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_RCPC_PRC3
 135:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     0x0008,         /* PRC3. */
 136:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif
 137:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** };
 138:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif
 139:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 140:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 141:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Function Name: R_BSP_InterruptsDisable
 142:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  **************************************************************************************************
 143:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @brief Globally disables interrupts.
 144:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @details This function globally disables interrupts. This is performed by clearing the 'I' bit i
 145:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Processor Status Word (PSW) register.
 146:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @note The 'I' bit of the PSW can only be modified when in Supervisor Mode. If the CPU is in User
 147:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * function is called, this function does nothing.
 148:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  */
 149:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** void R_BSP_InterruptsDisable (void)
 150:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
  10                             		.loc 1 150 1 view -0
 151:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     uint32_t    pmode;
  11                             		.loc 1 151 5 view .LVU1
 152:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 153:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Read current processor mode. */
 154:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     pmode = (R_BSP_GET_PSW() & 0x00100000);
  12                             		.loc 1 154 5 view .LVU2
  13                             		.loc 1 154 14 is_stmt 0 view .LVU3
  14 0000 FD 6A 05                		mvfc	psw, r5
  15                             	.LVL0:
 155:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 156:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Check current processor mode. */
 157:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if (0 == pmode)
  16                             		.loc 1 157 5 is_stmt 1 view .LVU4
  17                             		.loc 1 157 8 is_stmt 0 view .LVU5
  18 0003 FD 7C C5 00 00 10       		tst	#0x100000, r5
  19 0009 1B                      		bne	.L1
 158:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 159:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         /* Use the compiler intrinsic function to clear the I flag. */
 160:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         R_BSP_CLRPSW_I();
  20                             		.loc 1 160 9 is_stmt 1 view .LVU6
  21 000a 7F B8                   		clrpsw	I
  22                             	.L1:
 161:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 162:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 163:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** } /* End of function R_BSP_InterruptsDisable() */
  23                             		.loc 1 163 1 is_stmt 0 view .LVU7
  24 000c 02                      		rts
  25                             	.LFE3:
  27                             		.section	.text.R_BSP_InterruptsEnable,"ax",@progbits
  28                             		.global	_R_BSP_InterruptsEnable
  30                             	_R_BSP_InterruptsEnable:
  31                             	.LFB4:
 164:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 165:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 166:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Function Name: R_BSP_InterruptsEnable
 167:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  **************************************************************************************************
 168:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @brief Globally enable interrupts.
 169:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @details This function globally enables interrupts. This is performed by setting the 'I' bit in 
 170:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Status Word (PSW) register.
 171:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @note The 'I' bit of the PSW can only be modified when in Supervisor Mode. If the CPU is in User
 172:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * function is called, this function does nothing.
 173:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  */
 174:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** void R_BSP_InterruptsEnable (void)
 175:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
  32                             		.loc 1 175 1 is_stmt 1 view -0
 176:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     uint32_t    pmode;
  33                             		.loc 1 176 5 view .LVU9
 177:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 178:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Read current processor mode. */
 179:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     pmode = (R_BSP_GET_PSW() & 0x00100000);
  34                             		.loc 1 179 5 view .LVU10
  35                             		.loc 1 179 14 is_stmt 0 view .LVU11
  36 0000 FD 6A 05                		mvfc	psw, r5
  37                             	.LVL1:
 180:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 181:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Check current processor mode. */
 182:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if (0 == pmode)
  38                             		.loc 1 182 5 is_stmt 1 view .LVU12
  39                             		.loc 1 182 8 is_stmt 0 view .LVU13
  40 0003 FD 7C C5 00 00 10       		tst	#0x100000, r5
  41 0009 1B                      		bne	.L3
 183:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 184:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         /* Use the compiler intrinsic function to set the I flag. */
 185:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         R_BSP_SETPSW_I();
  42                             		.loc 1 185 9 is_stmt 1 view .LVU14
  43 000a 7F A8                   		setpsw	I
  44                             	.L3:
 186:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 187:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 188:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** } /* End of function R_BSP_InterruptsEnable() */
  45                             		.loc 1 188 1 is_stmt 0 view .LVU15
  46 000c 02                      		rts
  47                             	.LFE4:
  49                             		.section	.text.R_BSP_CpuInterruptLevelRead,"ax",@progbits
  50                             		.global	_R_BSP_CpuInterruptLevelRead
  52                             	_R_BSP_CpuInterruptLevelRead:
  53                             	.LFB5:
 189:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 190:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 191:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Function Name: R_BSP_CpuInterruptLevelRead
 192:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  **************************************************************************************************
 193:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @brief Reads the CPU's Interrupt Priority Level.
 194:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @return The CPU's Interrupt Priority Level.
 195:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @details This function reads the CPU's Interrupt Priority Level. This level is stored in the IPL
 196:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Processor Status Word (PSW) register.
 197:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  */
 198:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** uint32_t R_BSP_CpuInterruptLevelRead (void)
 199:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
  54                             		.loc 1 199 1 is_stmt 1 view -0
 200:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Use the compiler intrinsic function to read the CPU IPL. */
 201:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     uint32_t psw_value;
  55                             		.loc 1 201 5 view .LVU17
 202:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 203:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Casting is valid because it matches the type to the right side or argument. */
 204:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     psw_value = (uint32_t)R_BSP_GET_PSW();
  56                             		.loc 1 204 5 view .LVU18
  57                             		.loc 1 204 27 is_stmt 0 view .LVU19
  58 0000 FD 6A 01                		mvfc	psw, r1
  59                             	.LVL2:
 205:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     psw_value = psw_value & 0x0f000000;
  60                             		.loc 1 205 5 is_stmt 1 view .LVU20
 206:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     psw_value = psw_value >> 24;
  61                             		.loc 1 206 5 view .LVU21
  62 0003 69 81                   		shlr	#24, r1
  63                             	.LVL3:
 207:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 208:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     return psw_value;
  64                             		.loc 1 208 5 view .LVU22
 209:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** } /* End of function R_BSP_CpuInterruptLevelRead() */
  65                             		.loc 1 209 1 is_stmt 0 view .LVU23
  66 0005 64 F1                   		and #15, r1
  67                             	.LVL4:
  68                             		.loc 1 209 1 view .LVU24
  69 0007 02                      		rts
  70                             	.LFE5:
  72                             		.section	.text.R_BSP_CpuInterruptLevelWrite,"ax",@progbits
  73                             		.global	_R_BSP_CpuInterruptLevelWrite
  75                             	_R_BSP_CpuInterruptLevelWrite:
  76                             	.LVL5:
  77                             	.LFB6:
 210:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 211:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 212:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Function Name: R_BSP_CpuInterruptLevelWrite
 213:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  **************************************************************************************************
 214:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @brief Writes the CPU's Interrupt Priority Level.
 215:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @param[in] level The level to write to the CPU's IPL.
 216:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @retval true Successful, CPU's IPL has been written.
 217:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @retval false Failure, provided 'level' has invalid IPL value or called when the CPU is in User 
 218:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @details This function writes the CPU's Interrupt Priority Level. This level is stored in the IP
 219:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Processor Status Word (PSW) register. This function does check to make sure that the IPL being w
 220:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * The maximum and minimum valid settings for the CPU IPL are defined in mcu_info.h using the BSP_M
 221:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * BSP_MCU_IPL_MIN macros.
 222:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @note The CPU's IPL can only be modified by the user when in Supervisor Mode. If the CPU is in U
 223:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * function is called, this function does not control IPL and return false.
 224:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  */
 225:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** bool R_BSP_CpuInterruptLevelWrite (uint32_t level)
 226:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
  78                             		.loc 1 226 1 is_stmt 1 view -0
 227:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     bool ret;
  79                             		.loc 1 227 5 view .LVU26
 228:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     uint32_t pmode;
  80                             		.loc 1 228 5 view .LVU27
 229:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 230:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* The R_BSP_SET_IPL() function use the MVTIPL instruction.
 231:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****        The MVTIPL instruction needs to set an immediate value to src. */
 232:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 233:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     ret = false;
  81                             		.loc 1 233 5 view .LVU28
 234:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 235:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Read current processor mode. */
 236:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     pmode = (R_BSP_GET_PSW() & 0x00100000);
  82                             		.loc 1 236 5 view .LVU29
  83                             		.loc 1 236 14 is_stmt 0 view .LVU30
  84 0000 FD 6A 05                		mvfc	psw, r5
  85                             	.LVL6:
 237:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 238:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Check current processor mode. */
 239:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if (0 == pmode)
  86                             		.loc 1 239 5 is_stmt 1 view .LVU31
  87                             		.loc 1 239 8 is_stmt 0 view .LVU32
  88 0003 FD 7C C5 00 00 10       		tst	#0x100000, r5
  89 0009 3B 84 00                		bne	.L25
 240:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         ret = true;
  90                             		.loc 1 241 9 is_stmt 1 view .LVU33
  91                             	.LVL7:
 242:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 243:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         /* Use the compiler intrinsic function to set the CPU IPL. */
 244:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         switch (level)
  92                             		.loc 1 244 9 view .LVU34
  93 000c 61 F1                   		cmp	#15, r1
  94 000e 25 05 38 83 00          		bgtu	.L26
  95 0013 6C 21                   		shll	#2, r1
  96                             	.LVL8:
  97                             		.loc 1 244 9 is_stmt 0 view .LVU35
  98 0015 70 11 00 00 00 00       		add	#.L9, r1
  99 001b EC 15                   		mov.L	[r1], r5
 100                             	.LVL9:
 101                             		.loc 1 244 9 view .LVU36
 102                             		
 103 001d 7F 05                   	1:jmp	r5
 104                             		.section	.rodata.R_BSP_CpuInterruptLevelWrite,"a",@progbits
 105                             		.balign 4
 106                             		.balign 4
 107                             	.L9:
 108 0000 1F 00 00 00             		.long .L24
 109 0004 26 00 00 00             		.long .L23
 110 0008 2D 00 00 00             		.long .L22
 111 000c 34 00 00 00             		.long .L21
 112 0010 3B 00 00 00             		.long .L20
 113 0014 42 00 00 00             		.long .L19
 114 0018 49 00 00 00             		.long .L18
 115 001c 50 00 00 00             		.long .L17
 116 0020 57 00 00 00             		.long .L16
 117 0024 5E 00 00 00             		.long .L15
 118 0028 65 00 00 00             		.long .L14
 119 002c 6C 00 00 00             		.long .L13
 120 0030 73 00 00 00             		.long .L12
 121 0034 7A 00 00 00             		.long .L11
 122 0038 81 00 00 00             		.long .L10
 123 003c 87 00 00 00             		.long .L8
 124                             		.section	.text.R_BSP_CpuInterruptLevelWrite
 125                             	.L24:
 245:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         {
 246:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (0):
 247:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 248:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 0 */
 249:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(0);
 126                             		.loc 1 249 17 is_stmt 1 view .LVU37
 127 001f 75 70 00                		mvtipl	#0
 250:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 128                             		.loc 1 250 17 view .LVU38
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 129                             		.loc 1 241 13 is_stmt 0 view .LVU39
 130 0022 66 11                   		mov	#1, r1
 131                             		.loc 1 250 17 view .LVU40
 132 0024 2E 6C                   		bra	.L7
 133                             	.L23:
 251:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 252:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (1):
 253:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 254:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 1 */
 255:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(1);
 134                             		.loc 1 255 17 is_stmt 1 view .LVU41
 135 0026 75 70 01                		mvtipl	#1
 256:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 136                             		.loc 1 256 17 view .LVU42
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 137                             		.loc 1 241 13 is_stmt 0 view .LVU43
 138 0029 66 11                   		mov	#1, r1
 139                             		.loc 1 256 17 view .LVU44
 140 002b 2E 65                   		bra	.L7
 141                             	.L22:
 257:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 258:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (2):
 259:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 260:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 2 */
 261:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(2);
 142                             		.loc 1 261 17 is_stmt 1 view .LVU45
 143 002d 75 70 02                		mvtipl	#2
 262:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 144                             		.loc 1 262 17 view .LVU46
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 145                             		.loc 1 241 13 is_stmt 0 view .LVU47
 146 0030 66 11                   		mov	#1, r1
 147                             		.loc 1 262 17 view .LVU48
 148 0032 2E 5E                   		bra	.L7
 149                             	.L21:
 263:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 264:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (3):
 265:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 266:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 3 */
 267:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(3);
 150                             		.loc 1 267 17 is_stmt 1 view .LVU49
 151 0034 75 70 03                		mvtipl	#3
 268:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 152                             		.loc 1 268 17 view .LVU50
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 153                             		.loc 1 241 13 is_stmt 0 view .LVU51
 154 0037 66 11                   		mov	#1, r1
 155                             		.loc 1 268 17 view .LVU52
 156 0039 2E 57                   		bra	.L7
 157                             	.L20:
 269:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 270:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (4):
 271:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 272:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 4 */
 273:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(4);
 158                             		.loc 1 273 17 is_stmt 1 view .LVU53
 159 003b 75 70 04                		mvtipl	#4
 274:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 160                             		.loc 1 274 17 view .LVU54
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 161                             		.loc 1 241 13 is_stmt 0 view .LVU55
 162 003e 66 11                   		mov	#1, r1
 163                             		.loc 1 274 17 view .LVU56
 164 0040 2E 50                   		bra	.L7
 165                             	.L19:
 275:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 276:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (5):
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 278:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 5 */
 279:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(5);
 166                             		.loc 1 279 17 is_stmt 1 view .LVU57
 167 0042 75 70 05                		mvtipl	#5
 280:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 168                             		.loc 1 280 17 view .LVU58
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 169                             		.loc 1 241 13 is_stmt 0 view .LVU59
 170 0045 66 11                   		mov	#1, r1
 171                             		.loc 1 280 17 view .LVU60
 172 0047 2E 49                   		bra	.L7
 173                             	.L18:
 281:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 282:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (6):
 283:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 284:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 6 */
 285:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(6);
 174                             		.loc 1 285 17 is_stmt 1 view .LVU61
 175 0049 75 70 06                		mvtipl	#6
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 176                             		.loc 1 286 17 view .LVU62
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 177                             		.loc 1 241 13 is_stmt 0 view .LVU63
 178 004c 66 11                   		mov	#1, r1
 179                             		.loc 1 286 17 view .LVU64
 180 004e 2E 42                   		bra	.L7
 181                             	.L17:
 287:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 288:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (7):
 289:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 290:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 7 */
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(7);
 182                             		.loc 1 291 17 is_stmt 1 view .LVU65
 183 0050 75 70 07                		mvtipl	#7
 292:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 184                             		.loc 1 292 17 view .LVU66
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 185                             		.loc 1 241 13 is_stmt 0 view .LVU67
 186 0053 66 11                   		mov	#1, r1
 187                             		.loc 1 292 17 view .LVU68
 188 0055 2E 3B                   		bra	.L7
 189                             	.L16:
 293:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     #if 7 < BSP_MCU_IPL_MAX
 295:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (8):
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 297:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 8 */
 298:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(8);
 190                             		.loc 1 298 17 is_stmt 1 view .LVU69
 191 0057 75 70 08                		mvtipl	#8
 299:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 192                             		.loc 1 299 17 view .LVU70
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 193                             		.loc 1 241 13 is_stmt 0 view .LVU71
 194 005a 66 11                   		mov	#1, r1
 195                             		.loc 1 299 17 view .LVU72
 196 005c 2E 34                   		bra	.L7
 197                             	.L15:
 300:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 301:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (9):
 302:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 303:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 9 */
 304:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(9);
 198                             		.loc 1 304 17 is_stmt 1 view .LVU73
 199 005e 75 70 09                		mvtipl	#9
 305:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 200                             		.loc 1 305 17 view .LVU74
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 201                             		.loc 1 241 13 is_stmt 0 view .LVU75
 202 0061 66 11                   		mov	#1, r1
 203                             		.loc 1 305 17 view .LVU76
 204 0063 2E 2D                   		bra	.L7
 205                             	.L14:
 306:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 307:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (10):
 308:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 309:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 10 */
 310:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(10);
 206                             		.loc 1 310 17 is_stmt 1 view .LVU77
 207 0065 75 70 0A                		mvtipl	#10
 311:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 208                             		.loc 1 311 17 view .LVU78
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 209                             		.loc 1 241 13 is_stmt 0 view .LVU79
 210 0068 66 11                   		mov	#1, r1
 211                             		.loc 1 311 17 view .LVU80
 212 006a 2E 26                   		bra	.L7
 213                             	.L13:
 312:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 313:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (11):
 314:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 315:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 11 */
 316:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(11);
 214                             		.loc 1 316 17 is_stmt 1 view .LVU81
 215 006c 75 70 0B                		mvtipl	#11
 317:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 216                             		.loc 1 317 17 view .LVU82
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 217                             		.loc 1 241 13 is_stmt 0 view .LVU83
 218 006f 66 11                   		mov	#1, r1
 219                             		.loc 1 317 17 view .LVU84
 220 0071 2E 1F                   		bra	.L7
 221                             	.L12:
 318:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 319:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (12):
 320:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 321:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 12 */
 322:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(12);
 222                             		.loc 1 322 17 is_stmt 1 view .LVU85
 223 0073 75 70 0C                		mvtipl	#12
 323:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 224                             		.loc 1 323 17 view .LVU86
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 225                             		.loc 1 241 13 is_stmt 0 view .LVU87
 226 0076 66 11                   		mov	#1, r1
 227                             		.loc 1 323 17 view .LVU88
 228 0078 2E 18                   		bra	.L7
 229                             	.L11:
 324:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 325:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (13):
 326:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 327:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 13 */
 328:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(13);
 230                             		.loc 1 328 17 is_stmt 1 view .LVU89
 231 007a 75 70 0D                		mvtipl	#13
 329:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 232                             		.loc 1 329 17 view .LVU90
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 233                             		.loc 1 241 13 is_stmt 0 view .LVU91
 234 007d 66 11                   		mov	#1, r1
 235                             		.loc 1 329 17 view .LVU92
 236 007f 2E 11                   		bra	.L7
 237                             	.L10:
 330:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 331:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (14):
 332:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 333:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 14 */
 334:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(14);
 238                             		.loc 1 334 17 is_stmt 1 view .LVU93
 239 0081 75 70 0E                		mvtipl	#14
 335:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 240                             		.loc 1 335 17 view .LVU94
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 241                             		.loc 1 241 13 is_stmt 0 view .LVU95
 242 0084 66 11                   		mov	#1, r1
 243                             		.loc 1 335 17 view .LVU96
 244 0086 0A                      		bra	.L7
 245                             	.L8:
 336:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 337:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             case (15):
 338:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 339:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 /* IPL = 15 */
 340:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 R_BSP_SET_IPL(15);
 246                             		.loc 1 340 17 is_stmt 1 view .LVU97
 247 0087 75 70 0F                		mvtipl	#15
 341:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 248                             		.loc 1 341 17 view .LVU98
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 249                             		.loc 1 241 13 is_stmt 0 view .LVU99
 250 008a 66 11                   		mov	#1, r1
 251                             		.loc 1 341 17 view .LVU100
 252 008c 0C                      		bra	.L7
 253                             	.LVL10:
 254                             	.L25:
 233:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 255                             		.loc 1 233 9 view .LVU101
 256 008d 66 01                   		mov	#0, r1
 257                             	.LVL11:
 258 008f 03                      		.balign 8,3,1
 259                             	.L7:
 342:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     #endif /* BSP_MCU_IPL_MAX */
 343:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 344:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             default:
 345:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 ret = false;
 346:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 347:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 348:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 350:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     return ret;
 260                             		.loc 1 350 5 is_stmt 1 view .LVU102
 351:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** } /* End of function R_BSP_CpuInterruptLevelWrite() */
 261                             		.loc 1 351 1 is_stmt 0 view .LVU103
 262 0090 64 11                   		and #1, r1
 263                             	.LVL12:
 264                             		.loc 1 351 1 view .LVU104
 265 0092 02                      		rts
 266                             	.LVL13:
 267                             	.L26:
 345:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 268                             		.loc 1 345 21 view .LVU105
 269 0093 66 01                   		mov	#0, r1
 270                             	.LVL14:
 345:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                 break;
 271                             		.loc 1 345 21 view .LVU106
 272 0095 2E FB                   		bra	.L7
 273                             	.LFE6:
 275 0097 03                      		.section	.text.R_BSP_RegisterProtectEnable,"ax",@progbits
 276                             		.global	_R_BSP_RegisterProtectEnable
 278                             	_R_BSP_RegisterProtectEnable:
 279                             	.LVL15:
 280                             	.LFB7:
 352:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 353:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 354:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Function Name: R_BSP_RegisterProtectEnable
 355:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  **************************************************************************************************
 356:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @brief Enables write protection for selected registers.
 357:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @param[in] regs_to_protect Which registers to enable write protection for.
 358:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @details This function enables write protection for the input registers. Only certain MCU regist
 359:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * ability to be write protected. To see which registers are available to be protected by this func
 360:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * bsp_reg_protect_t enum in r_bsp_cpu.h for your MCU.
 361:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * This function, and R_BSP_RegisterProtectDisable(), use counters for each entry in the bsp_reg_pr
 362:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * that users can call these functions multiple times without problem. This function uses the inter
 363:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * enable function by controlling the Processor Interrupt Priority Level (IPL) of the R_BSP_Interru
 364:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * because counter control is the critical section. If the function is executed while the processor
 365:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * mode, interrupts that are at or below the specified interrupt priority level will be disabled by
 366:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * IPL. If the function is executed while the processor mode is user mode, the IPL controlling does
 367:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * example of why this is needed is shown below in the Special Notes section below.
 368:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @note 
 369:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * (1) About why counters are needed. \n
 370:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * See Section 5.7 in the application note for details.\n
 371:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * (2) Notes on user mode \n
 372:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * The R_BSP_InterruptControl function used to secure atomicity in the critical section of the coun
 373:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * this function is valid only in supervisor mode. When this function is executed in user mode, the
 374:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * R_BSP_InterruptControl function is executed but atomicity is not to secure.
 375:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  */
 376:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** void R_BSP_RegisterProtectEnable (bsp_reg_protect_t regs_to_protect)
 377:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
 281                             		.loc 1 377 1 is_stmt 1 view -0
 282                             		.loc 1 377 1 is_stmt 0 view .LVU108
 283 0000 7E A7                   		push.l	r7
 284                             	.LCFI0:
 285 0002 60 40                   		sub	#4, r0
 286                             	.LCFI1:
 287 0004 EF 17                   		mov.L	r1, r7
 378:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_REGISTER_WRITE_PROTECTION
 379:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     bsp_int_ctrl_t int_ctrl;
 288                             		.loc 1 379 5 is_stmt 1 view .LVU109
 380:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 381:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Set IPL to the maximum value to disable all interrupts,
 382:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****      * so the scheduler can not be scheduled in critical region.
 383:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****      * Note: Please set this macro more than IPR for other FIT module interrupts. */
 384:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EMPTY, BSP_INT_CMD_FIT_INTERRUPT_DISABLE, &int_ctrl);
 289                             		.loc 1 384 5 view .LVU110
 290 0006 EF 03                   		mov.L	r0, r3
 291 0008 66 62                   		mov.L	#6, r2
 292 000a 75 41 6E                		mov.L	#0x6e, r1
 293                             	.LVL16:
 294                             		.loc 1 384 5 is_stmt 0 view .LVU111
 295 000d 05 00 00 00             		bsr	_R_BSP_InterruptControl
 296                             	.LVL17:
 385:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 386:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Is it safe to disable write access? */
 387:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if (0 != s_protect_counters[regs_to_protect])
 297                             		.loc 1 387 5 is_stmt 1 view .LVU112
 298                             		.loc 1 387 32 is_stmt 0 view .LVU113
 299 0011 FB 52 00 00 00 00       		mov.L	#_s_protect_counters, r5
 300 0017 FE 57 55                		mov.W	[r7,r5], r5
 301                             		.loc 1 387 8 view .LVU114
 302 001a 5F 55                   		movu.W	r5, r5
 303 001c 61 05                   		cmp	#0, r5
 304 001e 20 10                   		beq	.L28
 388:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 389:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         /* Decrement the protect counter */
 390:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         s_protect_counters[regs_to_protect]--;
 305                             		.loc 1 390 9 is_stmt 1 view .LVU115
 306                             		.loc 1 390 27 is_stmt 0 view .LVU116
 307 0020 FB 42 00 00 00 00       		mov.L	#_s_protect_counters, r4
 308 0026 FE 57 45                		mov.W	[r7,r4], r5
 309                             		.loc 1 390 44 view .LVU117
 310 0029 60 15                   		sub	#1, r5
 311 002b FE 17 45                		mov.W	r5, [r7,r4]
 312                             	.L28:
 391:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 392:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 393:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Is it safe to disable write access? */
 394:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if (0 == s_protect_counters[regs_to_protect])
 313                             		.loc 1 394 5 is_stmt 1 view .LVU118
 314                             		.loc 1 394 32 is_stmt 0 view .LVU119
 315 002e FB 52 00 00 00 00       		mov.L	#_s_protect_counters, r5
 316 0034 FE 57 55                		mov.W	[r7,r5], r5
 317                             		.loc 1 394 8 view .LVU120
 318 0037 5F 55                   		movu.W	r5, r5
 319 0039 61 05                   		cmp	#0, r5
 320 003b 21 24                   		bne	.L29
 395:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 396:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         if (BSP_REG_PROTECT_MPC != regs_to_protect)
 321                             		.loc 1 396 9 is_stmt 1 view .LVU121
 322                             		.loc 1 396 12 is_stmt 0 view .LVU122
 323 003d 61 37                   		cmp	#3, r7
 324 003f 20 2E                   		beq	.L30
 397:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         {
 398:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* Enable protection using PRCR register. */
 399:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* When writing to the PRCR register the upper 8-bits must be the correct key. Set lowe
 400:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                disable writes.
 401:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b15:b8 PRKEY - Write 0xA5 to upper byte to enable writing to lower byte
 402:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b7:b4  Reserved (set to 0)
 403:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b3     PRC3  - Please check the user's manual.
 404:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b2     PRC2  - Please check the user's manual.
 405:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b1     PRC1  - Please check the user's manual.
 406:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b0     PRC0  - Please check the user's manual.
 407:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             */
 408:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             SYSTEM.PRCR.WORD = (uint16_t)((SYSTEM.PRCR.WORD | BSP_PRV_PRCR_KEY) & (~s_prcr_masks[re
 325                             		.loc 1 408 13 is_stmt 1 view .LVU123
 326                             		.loc 1 408 55 is_stmt 0 view .LVU124
 327 0041 FB 3E 00 00 08          		mov.L	#0x80000, r3
 328 0046 DE 35 FF 01             		mov.W	1022[r3], r5
 329                             		.loc 1 408 97 view .LVU125
 330 004a FB 42 00 00 00 00       		mov.L	#_s_prcr_masks, r4
 331 0050 FE 57 44                		mov.W	[r7,r4], r4
 332                             		.loc 1 408 81 view .LVU126
 333 0053 76 35 00 A5             		or	#-23296, r5
 334 0057 7E 04                   		not	r4
 335 0059 53 45                   		and	r4, r5
 336                             		.loc 1 408 30 view .LVU127
 337 005b DB 35 FF 01             		mov.W	r5, 1022[r3]
 338                             	.LVL18:
 339                             	.L29:
 409:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 410:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         else
 411:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         {
 412:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* Enable protection for MPC using PWPR register. */
 413:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* Enable writing of PFSWE bit. It could be assumed that the B0WI bit is still cleared 
 414:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                protection disable function, but it is written here to make sure that the PFSWE bit 
 415:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                cleared. */
 416:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             MPC.PWPR.BIT.B0WI = 0;
 417:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 418:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* Disable writing to PFS registers. */
 419:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             MPC.PWPR.BIT.PFSWE = 0;
 420:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 421:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* Disable writing of PFSWE bit. */
 422:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             MPC.PWPR.BIT.B0WI = 1;
 423:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 424:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 425:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 426:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Restore the IPL. */
 427:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EMPTY, BSP_INT_CMD_FIT_INTERRUPT_ENABLE, &int_ctrl);
 340                             		.loc 1 427 5 is_stmt 1 view .LVU128
 341 005f EF 03                   		mov.L	r0, r3
 342 0061 66 52                   		mov.L	#5, r2
 343 0063 75 41 6E                		mov.L	#0x6e, r1
 344 0066 05 00 00 00             		bsr	_R_BSP_InterruptControl
 345                             	.LVL19:
 428:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 429:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #else /* BSP_MCU_REGISTER_WRITE_PROTECTION */
 430:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* No registers to protect. */
 431:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* This code is only used to remove compiler info messages about this parameter not being used.
 432:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     INTERNAL_NOT_USED(regs_to_protect);
 433:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_REGISTER_WRITE_PROTECTION */
 434:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** } /* End of function R_BSP_RegisterProtectEnable() */
 346                             		.loc 1 434 1 is_stmt 0 view .LVU129
 347 006a 3F 77 02                		rtsd	#8, r7-r7
 348                             	.LVL20:
 349                             	.L30:
 416:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 350                             		.loc 1 416 13 is_stmt 1 view .LVU130
 416:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 351                             		.loc 1 416 31 is_stmt 0 view .LVU131
 352 006d FB 7E 00 C1 08          		mov.L	#0x8c100, r7
 353                             	.LVL21:
 416:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 354                             		.loc 1 416 31 view .LVU132
 355 0072 8F FD                   		mov.B	31[r7], r5
 356 0074 7A 75                   		bclr	#7, r5
 357 0076 87 FD                   		mov.B	r5, 31[r7]
 419:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 358                             		.loc 1 419 13 is_stmt 1 view .LVU133
 419:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 359                             		.loc 1 419 32 is_stmt 0 view .LVU134
 360 0078 8F FD                   		mov.B	31[r7], r5
 361 007a 7A 65                   		bclr	#6, r5
 362 007c 87 FD                   		mov.B	r5, 31[r7]
 422:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 363                             		.loc 1 422 13 is_stmt 1 view .LVU135
 422:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 364                             		.loc 1 422 31 is_stmt 0 view .LVU136
 365 007e 8F FD                   		mov.B	31[r7], r5
 366 0080 78 75                   		bset	#7, r5
 367 0082 87 FD                   		mov.B	r5, 31[r7]
 368 0084 2E DB                   		bra	.L29
 369                             	.LFE7:
 371                             		.section	.text.R_BSP_RegisterProtectDisable,"ax",@progbits
 372                             		.global	_R_BSP_RegisterProtectDisable
 374                             	_R_BSP_RegisterProtectDisable:
 375                             	.LVL22:
 376                             	.LFB8:
 435:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 436:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 437:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Function Name: R_BSP_RegisterProtectDisable
 438:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  **************************************************************************************************
 439:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @brief Disables write protection for selected registers.
 440:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @param[in] regs_to_unprotect Which registers to disable write protection for.
 441:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @details This function disables write protection for the input registers. Only certain MCU regis
 442:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * ability to be write protected. To see which registers are available to be protected by this func
 443:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * bsp_reg_protect_t enum in r_bsp_cpu.h for your MCU.
 444:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * This function, and R_BSP_RegisterProtectEnable(), use counters for each entry in the bsp_reg_pro
 445:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * users can call these functions multiple times without problem. This function uses the interrupt 
 446:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * enable function by controlling the Processor Interrupt Priority Level (IPL) of the R_BSP_Interru
 447:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * because counter control is the critical section. If the function is executed while the processor
 448:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * mode, interrupts that are at or below the specified interrupt priority level will be disabled by
 449:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * IPL. If the function is executed while the processor mode is user mode, the IPL controlling does
 450:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @note The R_BSP_InterruptControl function used to secure atomicity in the critical section of th
 451:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * with this function is valid only in supervisor mode. When this function is executed in user mode
 452:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * R_BSP_InterruptControl function is executed but atomicity is not to secure.
 453:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  */
 454:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** void R_BSP_RegisterProtectDisable (bsp_reg_protect_t regs_to_unprotect)
 455:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
 377                             		.loc 1 455 1 is_stmt 1 view -0
 378                             		.loc 1 455 1 is_stmt 0 view .LVU138
 379 0000 7E A7                   		push.l	r7
 380                             	.LCFI2:
 381 0002 60 40                   		sub	#4, r0
 382                             	.LCFI3:
 383 0004 EF 17                   		mov.L	r1, r7
 456:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_REGISTER_WRITE_PROTECTION
 457:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     bsp_int_ctrl_t int_ctrl;
 384                             		.loc 1 457 5 is_stmt 1 view .LVU139
 458:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 459:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Set IPL to the maximum value to disable all interrupts,
 460:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****      * so the scheduler can not be scheduled in critical region.
 461:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****      * Note: Please set this macro more than IPR for other FIT module interrupts. */
 462:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EMPTY, BSP_INT_CMD_FIT_INTERRUPT_DISABLE, &int_ctrl);
 385                             		.loc 1 462 5 view .LVU140
 386 0006 EF 03                   		mov.L	r0, r3
 387 0008 66 62                   		mov.L	#6, r2
 388 000a 75 41 6E                		mov.L	#0x6e, r1
 389                             	.LVL23:
 390                             		.loc 1 462 5 is_stmt 0 view .LVU141
 391 000d 05 00 00 00             		bsr	_R_BSP_InterruptControl
 392                             	.LVL24:
 463:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 464:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* If this is first entry then disable protection. */
 465:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if (0 == s_protect_counters[regs_to_unprotect])
 393                             		.loc 1 465 5 is_stmt 1 view .LVU142
 394                             		.loc 1 465 32 is_stmt 0 view .LVU143
 395 0011 FB 52 00 00 00 00       		mov.L	#_s_protect_counters, r5
 396 0017 FE 57 55                		mov.W	[r7,r5], r5
 397                             		.loc 1 465 8 view .LVU144
 398 001a 5F 55                   		movu.W	r5, r5
 399 001c 61 05                   		cmp	#0, r5
 400 001e 21 22                   		bne	.L33
 466:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 467:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         if (BSP_REG_PROTECT_MPC != regs_to_unprotect)
 401                             		.loc 1 467 9 is_stmt 1 view .LVU145
 402                             		.loc 1 467 12 is_stmt 0 view .LVU146
 403 0020 61 37                   		cmp	#3, r7
 404 0022 20 3A                   		beq	.L34
 468:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         {
 469:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* Enable protection using PRCR register. */
 470:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* When writing to the PRCR register the upper 8-bits must be the correct key.
 471:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                Set lower bits to 1 to enable writes.
 472:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b15:b8 PRKEY - Write 0xA5 to upper byte to enable writing to lower byte
 473:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b7:b4  Reserved (set to 0)
 474:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b3     PRC3  - Please check the user's manual.
 475:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b2     PRC2  - Please check the user's manual.
 476:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b1     PRC1  - Please check the user's manual.
 477:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****                b0     PRC0  - Please check the user's manual.
 478:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             */
 479:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             SYSTEM.PRCR.WORD = (uint16_t)((SYSTEM.PRCR.WORD | BSP_PRV_PRCR_KEY) | s_prcr_masks[regs
 405                             		.loc 1 479 13 is_stmt 1 view .LVU147
 406                             		.loc 1 479 55 is_stmt 0 view .LVU148
 407 0024 FB 4E 00 00 08          		mov.L	#0x80000, r4
 408 0029 DE 45 FF 01             		mov.W	1022[r4], r5
 409                             		.loc 1 479 95 view .LVU149
 410 002d FB 32 00 00 00 00       		mov.L	#_s_prcr_masks, r3
 411 0033 FE 57 33                		mov.W	[r7,r3], r3
 412                             		.loc 1 479 32 view .LVU150
 413 0036 57 35                   		or	r3, r5
 414 0038 76 35 00 A5             		or	#-23296, r5
 415                             		.loc 1 479 30 view .LVU151
 416 003c DB 45 FF 01             		mov.W	r5, 1022[r4]
 417                             	.L33:
 480:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 481:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         else
 482:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         {
 483:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* Disable protection for MPC using PWPR register. */
 484:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* Enable writing of PFSWE bit. */
 485:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             MPC.PWPR.BIT.B0WI = 0;
 486:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 487:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             /* Enable writing to PFS registers. */
 488:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             MPC.PWPR.BIT.PFSWE = 1;
 489:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 490:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 491:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 492:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Increment the protect counter */
 493:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     s_protect_counters[regs_to_unprotect]++;
 418                             		.loc 1 493 5 is_stmt 1 view .LVU152
 419                             		.loc 1 493 23 is_stmt 0 view .LVU153
 420 0040 FB 42 00 00 00 00       		mov.L	#_s_protect_counters, r4
 421 0046 FE 57 45                		mov.W	[r7,r4], r5
 422                             		.loc 1 493 42 view .LVU154
 423 0049 62 15                   		add	#1, r5
 424 004b FE 17 45                		mov.W	r5, [r7,r4]
 494:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 495:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Restore the IPL. */
 496:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EMPTY, BSP_INT_CMD_FIT_INTERRUPT_ENABLE, &int_ctrl);
 425                             		.loc 1 496 5 is_stmt 1 view .LVU155
 426 004e EF 03                   		mov.L	r0, r3
 427 0050 66 52                   		mov.L	#5, r2
 428 0052 75 41 6E                		mov.L	#0x6e, r1
 429 0055 05 00 00 00             		bsr	_R_BSP_InterruptControl
 430                             	.LVL25:
 497:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 498:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #else /* BSP_MCU_REGISTER_WRITE_PROTECTION */
 499:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* No registers to protect. */
 500:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* This code is only used to remove compiler info messages about this parameter not being used.
 501:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     INTERNAL_NOT_USED(regs_to_unprotect);
 502:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_REGISTER_WRITE_PROTECTION */
 503:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** } /* End of function R_BSP_RegisterProtectDisable() */
 431                             		.loc 1 503 1 is_stmt 0 view .LVU156
 432 0059 3F 77 02                		rtsd	#8, r7-r7
 433                             	.LVL26:
 434                             	.L34:
 485:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 435                             		.loc 1 485 13 is_stmt 1 view .LVU157
 485:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 436                             		.loc 1 485 31 is_stmt 0 view .LVU158
 437 005c FB 5E 00 C1 08          		mov.L	#0x8c100, r5
 438 0061 8F DC                   		mov.B	31[r5], r4
 439 0063 7A 74                   		bclr	#7, r4
 440 0065 87 DC                   		mov.B	r4, 31[r5]
 488:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 441                             		.loc 1 488 13 is_stmt 1 view .LVU159
 488:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 442                             		.loc 1 488 32 is_stmt 0 view .LVU160
 443 0067 8F DC                   		mov.B	31[r5], r4
 444 0069 78 64                   		bset	#6, r4
 445 006b 87 DC                   		mov.B	r4, 31[r5]
 446 006d 2E D3                   		bra	.L33
 447                             	.LFE8:
 449                             		.section	.text.R_BSP_SoftwareReset,"ax",@progbits
 450                             		.global	_R_BSP_SoftwareReset
 452                             	_R_BSP_SoftwareReset:
 453                             	.LFB9:
 504:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 505:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING
 506:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 507:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Function Name: R_BSP_VoltageLevelSetting
 508:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  **************************************************************************************************
 509:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @brief This API function is used excessively with the RX26T, RX660, RX66T and RX72T. It makes se
 510:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * voltage level setting register (VOLSR) that are necessary in order to use the USB, AD, and RIIC 
 511:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Call this function only when it is necessary to change the register settings.
 512:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @param[in] ctrl_ptn Register Setting Patterns
 513:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * The following setting patterns cannot be selected at the same time.
 514:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * When specifying more than one pattern at the same time, use the "|" (OR) operator.
 515:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * - BSP_VOL_USB_POWEROFF and BSP_VOL_USB_POWERON
 516:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * - BSP_VOL_AD_NEGATIVE_VOLTAGE_INPUT and BSP_VOL_AD_NEGATIVE_VOLTAGE_NOINPUT
 517:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * - BSP_VOL_RIIC_4_5V_OROVER and BSP_VOL_RIIC_UNDER_4_5V
 518:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *
 519:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *   BSP_VOL_USB_POWEROFF: Updates the USBVON bit to 0.
 520:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *
 521:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *   BSP_VOL_USB_POWERON: Updates the USBVON bit to 1.
 522:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *
 523:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *   BSP_VOL_AD_NEGATIVE_VOLTAGE_INPUT: Updates the PGAVLS bit to 0.
 524:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *
 525:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *   BSP_VOL_AD_NEGATIVE_VOLTAGE_NOINPUT: Updates the PGAVLS bit to 1.
 526:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *
 527:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *   BSP_VOL_RIIC_4_5V_OROVER: Updates the RICVLS bit to 0.
 528:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *
 529:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  *   BSP_VOL_RIIC_UNDER_4_5V: Updates the RICVLS bit to 1.
 530:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @retval true Processing completed, register successfully updated.
 531:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @retval false The function was called under the following conditions, so the register setting wa
 532:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * - Setting patterns that cannot be selected at the same time were selected.
 533:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * - A setting pattern related to the USB was selected when the USB was not in the module stop stat
 534:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * - A setting pattern related to the AD was selected when the AD was not in the module stop state.
 535:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * - A setting pattern related to the RIIC was selected when the RIIC was not in the module stop st
 536:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @details This function initializes the voltage level setting register (VOLSR), which is necessar
 537:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * the USB, AD and RIIC peripheral modules. When specifying a setting pattern related to the USB, c
 538:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * before the USB is released from the module stop state. When specifying a setting pattern related
 539:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * this function before the AD (unit 0 and unit 1) is released from the module stop state. When spe
 540:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * pattern related to the RIIC, call this function before the RIIC is released from the module stop
 541:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * function is called with a setting pattern related to the USB specified after the USB is released
 542:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * stop state, the function returns "false" as the return value and does not update the register se
 543:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * function is called with a setting pattern related to the AD specified after the AD (unit 0 and u
 544:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * from the module stop state, the function returns "false" as the return value and does not update
 545:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * settings. Finally, if the function is called with a setting pattern related to the RIIC specifie
 546:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * released from the module stop state, the function returns "false" as the return value and does n
 547:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * register settings.
 548:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  */
 549:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** bool R_BSP_VoltageLevelSetting (uint8_t ctrl_ptn)
 550:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
 551:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     uint8_t  *p_volsr_addr;
 552:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 553:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #if BSP_CFG_PARAM_CHECKING_ENABLE == 1
 554:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* ---- CHECK ARGUMENTS ---- */
 555:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_USB
 556:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if (BSP_PRV_USBVON_CONFLICT == (ctrl_ptn & BSP_PRV_USBVON_CONFLICT))
 557:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 558:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         return false;
 559:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 560:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_USB */
 561:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 562:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_AD
 563:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if (BSP_PRV_PGAVLS_CONFLICT == (ctrl_ptn & BSP_PRV_PGAVLS_CONFLICT))
 564:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 565:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         return false;
 566:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 567:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_AD */
 568:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 569:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_RIIC
 570:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if (BSP_PRV_RICVLS_CONFLICT == (ctrl_ptn & BSP_PRV_RICVLS_CONFLICT))
 571:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 572:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         return false;
 573:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 574:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_RIIC */
 575:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_CFG_PARAM_CHECKING_ENABLE == 1 */
 576:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 577:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_USB
 578:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Check USB module stop state. */
 579:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if(0 != (ctrl_ptn & BSP_PRV_USBVON_CONFLICT))
 580:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 581:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 582:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         if(0 == MSTP(USB0))
 583:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         {
 584:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             return false;
 585:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 586:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 587:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_USB */
 588:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 589:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_AD
 590:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Check AD module stop state. */
 591:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if(0 != (ctrl_ptn & BSP_PRV_PGAVLS_CONFLICT))
 592:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 593:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 594:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         if((0 == MSTP(S12AD)) || (0 == MSTP(S12AD1)))
 595:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         {
 596:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             return false;
 597:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 598:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 599:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_AD */
 600:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 601:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_RIIC
 602:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Check RIIC module stop state. */
 603:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if(0 != (ctrl_ptn & BSP_PRV_RICVLS_CONFLICT))
 604:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 605:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 606:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef RIIC0
 607:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         if(0 == MSTP(RIIC0))
 608:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         {
 609:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             return false;
 610:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 611:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif
 612:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 613:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef RIIC2
 614:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         if(0 == MSTP(RIIC2))
 615:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         {
 616:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****             return false;
 617:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         }
 618:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif
 619:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 620:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_RIIC */
 621:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 622:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Protect off. */
 623:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     SYSTEM.PRCR.WORD = 0xA502;
 624:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 625:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Casting is valid because it matches the type to the right side or argument. */
 626:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     p_volsr_addr = (uint8_t *)&SYSTEM.VOLSR.BYTE;
 627:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 628:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_RIIC
 629:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Updated the RICVLS bit. */
 630:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if(0 != (ctrl_ptn & BSP_VOL_RIIC_UNDER_4_5V))
 631:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 632:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         R_BSP_BIT_SET(p_volsr_addr, BSP_PRV_VOLSR_RICVLS_BIT_NUM);
 633:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 634:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 635:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if(0 != (ctrl_ptn & BSP_VOL_RIIC_4_5V_OROVER))
 636:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 637:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         R_BSP_BIT_CLEAR(p_volsr_addr, BSP_PRV_VOLSR_RICVLS_BIT_NUM);
 638:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 639:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_RIIC */
 640:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 641:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_AD
 642:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Updated the PGAVLS bit. */
 643:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if(0 != (ctrl_ptn & BSP_VOL_AD_NEGATIVE_VOLTAGE_NOINPUT))
 644:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 645:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         R_BSP_BIT_SET(p_volsr_addr, BSP_PRV_VOLSR_PGAVLS_BIT_NUM);
 646:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 647:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 648:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if(0 != (ctrl_ptn & BSP_VOL_AD_NEGATIVE_VOLTAGE_INPUT))
 649:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 650:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         R_BSP_BIT_CLEAR(p_volsr_addr, BSP_PRV_VOLSR_PGAVLS_BIT_NUM);
 651:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 652:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_AD */
 653:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 654:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_VOLTAGE_LEVEL_SETTING_USB
 655:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Updated the USBVON bit. */
 656:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if(0 != (ctrl_ptn & BSP_VOL_USB_POWERON))
 657:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 658:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         R_BSP_BIT_SET(p_volsr_addr, BSP_PRV_VOLSR_USBVON_BIT_NUM);
 659:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 660:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 661:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     if(0 != (ctrl_ptn & BSP_VOL_USB_POWEROFF))
 662:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 663:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         R_BSP_BIT_CLEAR(p_volsr_addr, BSP_PRV_VOLSR_USBVON_BIT_NUM);
 664:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 665:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING_USB */
 666:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 667:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Protect on. */
 668:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     SYSTEM.PRCR.WORD = 0xA500;
 669:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 670:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     return true;
 671:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** }  /* End of function R_BSP_VoltageLevelSetting() */ 
 672:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif /* BSP_MCU_VOLTAGE_LEVEL_SETTING */
 673:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 674:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 675:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * Function Name: R_BSP_SoftwareReset
 676:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  **************************************************************************************************
 677:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  * @details Reset the MCU by Software Reset.
 678:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****  */
 679:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** void R_BSP_SoftwareReset(void)
 680:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
 454                             		.loc 1 680 1 is_stmt 1 view -0
 681:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_REGISTER_WRITE_PROTECTION
 682:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Protect off. */
 683:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     R_BSP_RegisterProtectDisable(BSP_REG_PROTECT_LPC_CGC_SWR);
 455                             		.loc 1 683 5 view .LVU162
 456 0000 66 11                   		mov.L	#1, r1
 457 0002 05 00 00 00             		bsr	_R_BSP_RegisterProtectDisable
 458                             	.LVL27:
 684:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif
 685:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 686:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Resets the MCU. */
 687:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     SYSTEM.SWRR = 0xA501;
 459                             		.loc 1 687 5 view .LVU163
 460                             		.loc 1 687 17 is_stmt 0 view .LVU164
 461 0006 FB 5E 00 00 08          		mov.L	#0x80000, r5
 462 000b F9 59 61 01 A5          		mov.W	#-23295, 194[r5]
 463                             	.L37:
 688:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 689:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* WAIT_LOOP */
 690:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     while(1)
 464                             		.loc 1 690 5 is_stmt 1 discriminator 1 view .LVU165
 691:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 692:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****          R_BSP_NOP();
 465                             		.loc 1 692 10 discriminator 1 view .LVU166
 466                             	 ; 692 "../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c" 1
 467 0010 03                      		nop
 468                             	 ; 0 "" 2
 469 0011 2E FF                   		bra	.L37
 470                             	.LFE9:
 472                             		.section	.text.bsp_register_protect_open,"ax",@progbits
 473                             		.global	_bsp_register_protect_open
 475                             	_bsp_register_protect_open:
 476                             	.LFB10:
 693:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 694:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** } /* End of function R_BSP_SoftwareReset() */
 695:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 696:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 697:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Function Name: bsp_register_protect_open
 698:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Description  : Initializes variables needed for register protection functionality.
 699:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Arguments    : none
 700:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Return Value : none
 701:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** ***************************************************************************************************
 702:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** void bsp_register_protect_open (void)
 703:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
 477                             		.loc 1 703 1 view -0
 704:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_REGISTER_WRITE_PROTECTION
 705:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     uint32_t i;
 478                             		.loc 1 705 5 view .LVU168
 706:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 707:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Initialize reference counters to 0. */
 708:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* WAIT_LOOP */
 709:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     for (i = 0; i < BSP_REG_PROTECT_TOTAL_ITEMS; i++)
 479                             		.loc 1 709 5 view .LVU169
 480                             	.LVL28:
 481                             		.loc 1 709 12 is_stmt 0 view .LVU170
 482 0000 66 05                   		mov.L	#0, r5
 483                             	.LVL29:
 484                             		.loc 1 709 5 view .LVU171
 485 0002 61 35                   		cmp	#3, r5
 486 0004 24 18                   		bgtu	.L44
 703:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #ifdef BSP_MCU_REGISTER_WRITE_PROTECTION
 487                             		.loc 1 703 1 view .LVU172
 488 0006 7E A7                   		push.l	r7
 489                             	.LCFI4:
 490                             	.L40:
 710:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 711:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         s_protect_counters[i] = 0;
 491                             		.loc 1 711 9 is_stmt 1 discriminator 3 view .LVU173
 492                             		.loc 1 711 31 is_stmt 0 discriminator 3 view .LVU174
 493 0008 FB 42 00 00 00 00       		mov.L	#_s_protect_counters, r4
 494 000e 66 07                   		mov	#0, r7
 495 0010 FE 15 47                		mov.W	r7, [r5,r4]
 709:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 496                             		.loc 1 709 51 discriminator 3 view .LVU175
 497 0013 62 15                   		add	#1, r5
 498                             	.LVL30:
 709:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 499                             		.loc 1 709 5 discriminator 3 view .LVU176
 500 0015 61 35                   		cmp	#3, r5
 501 0017 25 F1                   		bleu	.L40
 712:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 713:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #else
 714:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* No registers to protect. */
 715:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** #endif
 716:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** } /* End of function bsp_register_protect_open() */
 502                             		.loc 1 716 1 view .LVU177
 503 0019 3F 77 01                		rtsd	#4, r7-r7
 504                             	.L44:
 505                             	.LCFI5:
 506                             		.loc 1 716 1 view .LVU178
 507 001c 02                      		rts
 508                             	.LFE10:
 510                             		.section	.text.bsp_ram_initialize,"ax",@progbits
 511                             		.global	_bsp_ram_initialize
 513                             	_bsp_ram_initialize:
 514                             	.LFB11:
 717:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 718:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** /**************************************************************************************************
 719:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Function Name: bsp_ram_initialize
 720:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Description  : Initialize ram variable.
 721:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Arguments    : none
 722:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** * Return Value : none
 723:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** ***************************************************************************************************
 724:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** void bsp_ram_initialize (void)
 725:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** {
 515                             		.loc 1 725 1 is_stmt 1 view -0
 726:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     uint32_t i;
 516                             		.loc 1 726 5 view .LVU180
 727:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** 
 728:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* Initialize g_bsp_Locks to 0. */
 729:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     /* WAIT_LOOP */
 730:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     for (i = 0; i < BSP_NUM_LOCKS; i++)
 517                             		.loc 1 730 5 view .LVU181
 518                             	.LVL31:
 519                             		.loc 1 730 12 is_stmt 0 view .LVU182
 520 0000 66 05                   		mov.L	#0, r5
 521                             	.LVL32:
 522                             		.loc 1 730 5 view .LVU183
 523 0002 75 55 83                		cmp	#0x83, r5
 524 0005 24 19                   		bgtu	.L51
 725:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     uint32_t i;
 525                             		.loc 1 725 1 view .LVU184
 526 0007 7E A7                   		push.l	r7
 527                             	.LCFI6:
 528                             	.L47:
 731:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 732:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****         g_bsp_Locks[i].lock = 0;
 529                             		.loc 1 732 9 is_stmt 1 discriminator 3 view .LVU185
 530                             		.loc 1 732 29 is_stmt 0 discriminator 3 view .LVU186
 531 0009 FB 42 00 00 00 00       		mov.L	#_g_bsp_Locks, r4
 532 000f 66 07                   		mov.L	#0, r7
 533 0011 FE 25 47                		mov.L	r7, [r5,r4]
 730:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 534                             		.loc 1 730 37 discriminator 3 view .LVU187
 535 0014 62 15                   		add	#1, r5
 536                             	.LVL33:
 730:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     {
 537                             		.loc 1 730 5 discriminator 3 view .LVU188
 538 0016 75 55 83                		cmp	#0x83, r5
 539 0019 25 F0                   		bleu	.L47
 733:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c ****     }
 734:../src/smc_gen/r_bsp/mcu/all/r_bsp_cpu.c **** } /* End of function bsp_ram_initialize() */
 540                             		.loc 1 734 1 view .LVU189
 541 001b 3F 77 01                		rtsd	#4, r7-r7
 542                             	.L51:
 543                             	.LCFI7:
 544                             		.loc 1 734 1 view .LVU190
 545 001e 02                      		rts
 546                             	.LFE11:
 548                             		.section	.rodata.s_prcr_masks,"a"
 549                             		.balign 2
 552                             	_s_prcr_masks:
 553 0000 01 00                   		.short	1
 554 0002 02 00                   		.short	2
 555 0004 08 00                   		.short	8
 556                             		.section	.bss.s_protect_counters,"aw",@nobits
 557                             		.balign 2
 560                             	_s_protect_counters:
 561 0000 00 00 00 00 00 00 00 00 		.zero	8
 694                             	.Letext0:
 695                             		.file 2 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 696                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 697                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 698                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 699                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 700                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 701                             		.file 8 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_rx_compi
 702                             		.file 9 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/register
 703                             		.file 10 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/r_bsp_c
 704                             		.file 11 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_loc
 705                             		.file 12 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_int
 706                             		.file 13 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_bsp_int
