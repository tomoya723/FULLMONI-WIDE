   1                             		.file	"r_bsp_common.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.delay_wait,"ax",@progbits
   6                             	_delay_wait:
   7                             	.LVL0:
   8                             	.LFB4:
   9                             		.file 1 "../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c"
   1:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
   2:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * DISCLAIMER
   3:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prote
   5:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * applicable laws, including copyright laws.
   6:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF 
   8:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIM
   9:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AF
  10:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY RE
  11:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * this software. By using this software, you agree to the additional terms and conditions found by 
  14:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * following link:
  15:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * http://www.renesas.com/disclaimer
  16:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *
  17:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Copyright (C) 2013 Renesas Electronics Corporation. All rights reserved.
  18:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  19:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  20:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * File Name    : r_bsp_common.c
  21:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Description  : Implements functions that apply to all r_bsp boards and MCUs.
  22:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  23:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  24:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * History : DD.MM.YYYY Version  Description
  25:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 06.05.2013 1.00     First Release
  26:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 26.03.2014 1.10     Added R_BSP_SoftwareDelay() function
  27:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 03.09.2014 1.20     Corrected R_BSP_SoftwareDelay() timing when using an RX64M
  28:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 30.09.2015 1.30     Added RX23T
  29:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 01.02.2016 1.40     Added RX24T
  30:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               Changed the value of the following macro definition.
  31:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - OVERHEAD_CYCLES
  32:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - OVERHEAD_CYCLES_64
  33:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 29.02.2016 1.50     Added RX230
  34:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 01.10.2016 1.60     Added RX65N
  35:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 22.08.2016 1.70     Added RX24U
  36:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 15.05.2017 1.80     Changed method of selecting the number of CPU cycles required to ex
  37:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               the delayWait() loop.
  38:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 27.07.2018 1.90     Changed the value of the following macro definition, because added 
  39:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - CPU_CYCLES_PER_LOOP
  40:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 28.02.2019 2.00     Deleted the following definition. 
  41:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               (The following definition moved to the common file (mcu_info.h).)
  42:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - CPU_CYCLES_PER_LOOP
  43:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               Added support for GNUC and ICCRX.
  44:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               Fixed coding style.
  45:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               Renamed following macro definitions.
  46:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - BSP_PRV_OVERHEAD_CYCLES
  47:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - BSP_PRV_OVERHEAD_CYCLES_64
  48:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - BSP_PRV_CKSEL_LOCO
  49:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               Renamed following function.
  50:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - delay_wait
  51:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 26.07.2019 2.01     Modified comment of API function to Doxygen style.
  52:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 21.11.2023 2.02     Added the R_BSP_ClockReset_Bootloader function.
  53:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  54:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  55:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  56:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** Includes   <System Includes> , "Project Includes"
  57:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  58:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /* Get information about current board and MCU. */
  59:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #include "platform.h"
  60:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  61:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  62:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** Macro definitions
  63:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  64:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #define BSP_PRV_OVERHEAD_CYCLES        (2)    /* R_BSP_SoftwareDelay() overhead per call */
  65:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #define BSP_PRV_OVERHEAD_CYCLES_64     (2)    /* R_BSP_SoftwareDelay() overhead per call using 64-b
  66:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  67:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #define BSP_PRV_CKSEL_LOCO             (0x0)  /* SCKCR3 register setting for LOCO */
  68:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  69:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  70:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** Typedef definitions
  71:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  72:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  73:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  74:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** Exported global variables (to be accessed by other files)
  75:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  76:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  77:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  78:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** Private global variables and functions
  79:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  80:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  81:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  82:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * Function Name: R_BSP_GetVersion
  83:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  **************************************************************************************************
  84:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @brief Returns the current version of the r_bsp.
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @return Version of the r_bsp.
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @details This function will return the version of the currently installed r_bsp. The version num
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * where the top 2 bytes are the major version number and the bottom 2 bytes are the minor version 
  88:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * example, Version 4.25 would be returned as 0x00040019.
  89:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  */
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** uint32_t R_BSP_GetVersion (void)
  91:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** {
  92:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     /* These version macros are defined in platform.h. */
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     return ((((uint32_t)R_BSP_VERSION_MAJOR) << 16) | (uint32_t)R_BSP_VERSION_MINOR);
  94:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_GetVersion() */
  95:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  97:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  98:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Function Name: delay_wait
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Description  : This asm loop executes a known number (5) of CPU cycles. If a value of '4' is pass
 100:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                in as an argument, then this function would consume 20 CPU cycles before returning
 101:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Arguments    : loop_cnt - A single 32-bit value is provided as the number of loops to execute.
 102:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Return Value : None
 103:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
 104:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** R_BSP_PRAGMA_STATIC_INLINE_ASM(delay_wait)
 105:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** void delay_wait (unsigned long loop_cnt)
 106:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** {
  10                             		.loc 1 106 1 view -0
  11                             		; Note: Naked Function
 107:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM_INTERNAL_USED(loop_cnt)
  12                             		.loc 1 107 5 view .LVU1
 108:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM_BEGIN
  13                             		.loc 1 108 5 view .LVU2
  14                             	 ; 108 "../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c" 1
  15 0000 2E 03                   		BRA.B ?+
  16 0002 03                      	NOP
  17                             	?:
  18 0003 03                      	NOP
  19 0004 60 11                   	SUB #01H, R1
  20 0006 21 FD                   	BNE.B ?-
  21 0008 02                      	rts
  22                             	
  23                             	 ; 0 "" 2
 109:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM(    BRA.B   R_BSP_ASM_LAB_NEXT(0)     )
 110:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM(    NOP                               )
 111:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM_LAB(0:                                )
 112:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM(    NOP                               )
 113:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM(    SUB     #01H, R1                  )
 114:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM(    BNE.B   R_BSP_ASM_LAB_PREV(0)     )
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM_END
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function delay_wait() */
  24                             		.loc 1 116 1 is_stmt 0 view .LVU3
  25                             		; Naked function: epilogue provided by programmer.
  26                             	.LFE4:
  28                             		.section	.text.R_BSP_GetVersion,"ax",@progbits
  29                             		.global	_R_BSP_GetVersion
  31                             	_R_BSP_GetVersion:
  32                             	.LFB3:
  91:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     /* These version macros are defined in platform.h. */
  33                             		.loc 1 91 1 is_stmt 1 view -0
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_GetVersion() */
  34                             		.loc 1 93 5 view .LVU5
  94:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  35                             		.loc 1 94 1 is_stmt 0 view .LVU6
  36 0000 FB 1E 2A 00 07          		mov.L	#0x7002a, r1
  37 0005 02                      		rts
  38                             	.LFE3:
  40                             		.section	.text.R_BSP_GetIClkFreqHz,"ax",@progbits
  41                             		.global	_R_BSP_GetIClkFreqHz
  43                             	_R_BSP_GetIClkFreqHz:
  44                             	.LFB5:
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 118:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 119:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * Function Name: R_BSP_GetIClkFreqHz
 121:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  **************************************************************************************************
 122:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @brief Returns the system clock frequency.
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @return System clock frequency specified by the r_bsp.
 124:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @details This function returns the system clock frequency. For example, when the system clock is
 125:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * r_bsp_config_h and the r_bsp has completed to specify the clock setting, then even if the user c
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * clock frequency to 60 MHz, the return value is '60000000'.
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  */
 128:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** uint32_t R_BSP_GetIClkFreqHz(void)
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** {
  45                             		.loc 1 129 1 is_stmt 1 view -0
 130:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     return get_iclk_freq_hz();  // Get the MCU specific ICLK frequency
  46                             		.loc 1 130 5 view .LVU8
  47                             		.loc 1 130 12 is_stmt 0 view .LVU9
  48 0000 05 00 00 00             		bsr	_get_iclk_freq_hz
  49                             	.LVL1:
 131:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_GetIClkFreqHz() */
  50                             		.loc 1 131 1 view .LVU10
  51 0004 02                      		rts
  52                             	.LFE5:
  54                             		.global	___udivdi3
  55                             		.section	.text.R_BSP_SoftwareDelay,"ax",@progbits
  56                             		.global	_R_BSP_SoftwareDelay
  58                             	_R_BSP_SoftwareDelay:
  59                             	.LVL2:
  60                             	.LFB6:
 132:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 133:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 134:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
 135:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * Function Name: R_BSP_SoftwareDelay
 136:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  **************************************************************************************************
 137:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @brief Delay the specified duration in units and return.
 138:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @param[in] delay The number of 'units' to delay.
 139:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @param[in] units The 'base' for the units specified.
 140:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @retval true True if delay executed.
 141:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @retval false False if delay/units combination resulted in overflow/underflow.
 142:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @details This is function that may be called for all MCU targets to implement a specific wait ti
 143:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * The actual delay time is plus the overhead at a specified duration. The overhead changes under t
 144:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * the compiler, operating frequency and ROM cache. When the operating frequency is low, or the spe
 145:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * units of microsecond level, please note that the error becomes large.
 146:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  */
 147:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** bool R_BSP_SoftwareDelay(uint32_t delay, bsp_delay_units_t units)
 148:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** {
  61                             		.loc 1 148 1 is_stmt 1 view -0
 149:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint32_t iclk_rate;
  62                             		.loc 1 149 5 view .LVU12
 150:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint32_t delay_cycles;
  63                             		.loc 1 150 5 view .LVU13
 151:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint32_t loop_cnt;
  64                             		.loc 1 151 5 view .LVU14
 152:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint64_t delay_cycles_64;
  65                             		.loc 1 152 5 view .LVU15
 153:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint64_t loop_cnt_64;
  66                             		.loc 1 153 5 view .LVU16
 154:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 155:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #ifdef BSP_CFG_PARAM_CHECKING_ENABLE
 156:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     if ((BSP_DELAY_MICROSECS != units) && (BSP_DELAY_MILLISECS != units) && (BSP_DELAY_SECS != unit
  67                             		.loc 1 156 5 view .LVU17
  68                             		.loc 1 156 8 is_stmt 0 view .LVU18
  69 0000 77 02 40 42 0F          		cmp	#0xf4240, r2
  70 0005 20 0C                   		beq	.L5
  71                             		.loc 1 156 40 discriminator 1 view .LVU19
  72 0007 76 02 E8 03             		cmp	#0x3e8, r2
  73 000b 16                      		beq	.L5
  74                             		.loc 1 156 74 discriminator 2 view .LVU20
  75 000c 61 12                   		cmp	#1, r2
  76 000e 3B D7 00                		bne	.L18
  77                             	.L5:
 148:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint32_t iclk_rate;
  78                             		.loc 1 148 1 view .LVU21
  79 0011 6E 7A                   		pushm	r7-r10
  80                             	.LCFI0:
  81 0013 71 00 E4                		add	#-28, r0
  82                             	.LCFI1:
  83 0016 EF 27                   		mov.L	r2, r7
  84 0018 EF 1A                   		mov.L	r1, r10
 157:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     {
 158:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         return(false);
 159:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     }
 160:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #endif
 161:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 162:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     iclk_rate = R_BSP_GetIClkFreqHz();  /* Get the current ICLK frequency */
  85                             		.loc 1 162 5 is_stmt 1 view .LVU22
  86                             		.loc 1 162 17 is_stmt 0 view .LVU23
  87 001a 05 00 00 00             		bsr	_R_BSP_GetIClkFreqHz
  88                             	.LVL3:
  89                             		.loc 1 162 15 view .LVU24
  90 001e E3 01                   		mov.L	r1, [r0]
 163:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 164:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     /*
 165:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * In order to handle all possible combinations of delay/ICLK it is necessary to use 64-bit
 166:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * integers (not all MCUs have floating point support). However, there is no native hw support
 167:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * for 64 bit integers so it requires many more clock cycles. This is not an issue if the
 168:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * requested delay is long enough and the ICLK is fast, but for delays in the low microseconds
 169:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * and/or a slow ICLK we use 32 bit integers to reduce the overhead cycles of this function
 170:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * by approximately a third and stand the best chance of achieving the requested delay.
 171:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      */
 172:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     if ( (BSP_DELAY_MICROSECS == units) &&
  91                             		.loc 1 172 5 is_stmt 1 view .LVU25
  92                             		.loc 1 172 8 is_stmt 0 view .LVU26
  93 0020 77 07 40 42 0F          		cmp	#0xf4240, r7
  94 0025 20 73                   		beq	.L26
  95                             	.L7:
 173:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****          (delay <= (0xFFFFFFFFUL / iclk_rate)) )  /* Ensure (iclk_rate * delay) will not exceed 32 
 174:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     {
 175:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         delay_cycles = ((iclk_rate * delay) / units);
 176:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 177:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         if (delay_cycles > BSP_PRV_OVERHEAD_CYCLES)
 178:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 179:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             delay_cycles -= BSP_PRV_OVERHEAD_CYCLES;
 180:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 181:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         else
 182:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 183:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             delay_cycles = 0;
 184:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 185:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 186:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         loop_cnt = delay_cycles / CPU_CYCLES_PER_LOOP;
 187:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 188:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         if (0 == loop_cnt)
 189:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 190:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             /* The requested delay is too large/small for the current ICLK. Return false which
 191:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****              * also results in the minimum possible delay. */
 192:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             return(false);
 193:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 194:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     }
 195:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     else
 196:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     {
 197:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 198:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         delay_cycles_64 = (((uint64_t)iclk_rate * (uint64_t)delay) / units);
  96                             		.loc 1 198 9 is_stmt 1 view .LVU27
  97                             		.loc 1 198 29 is_stmt 0 view .LVU28
  98 0027 EC 0E                   		mov.L	[r0], r14
  99                             		.loc 1 198 49 view .LVU29
 100 0029 FC 1F AE                		emulu	r10, r14
 101                             		.loc 1 198 68 view .LVU30
 102 002c EF 73                   		mov.L	r7, r3
 103 002e 66 04                   		mov.L	#0, r4
 104 0030 EF E1                   		mov.L	r14, r1
 105 0032 EF F2                   		mov.L	r15, r2
 106 0034 05 00 00 00             		bsr	___udivdi3
 107                             	.LVL4:
 108                             		.loc 1 198 25 view .LVU31
 109 0038 A0 89                   		mov.L	r1, 12[r0]
 110 003a A1 02                   		mov.L	r2, 16[r0]
 199:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 200:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         if (delay_cycles_64 > BSP_PRV_OVERHEAD_CYCLES_64)
 111                             		.loc 1 200 9 is_stmt 1 view .LVU32
 112                             		.loc 1 200 29 is_stmt 0 view .LVU33
 113 003c ED 0A 03                		mov.L	12[r0], r10
 114                             	.LVL5:
 115                             		.loc 1 200 29 view .LVU34
 116 003f A9 07                   		mov.L	16[r0], r7
 117                             	.LVL6:
 118                             		.loc 1 200 12 view .LVU35
 119 0041 61 07                   		cmp	#0, r7
 120 0043 21 0C                   		bne	.L22
 121 0045 3B 9A 00                		bne	.L13
 122 0048 61 2A                   		cmp	#2, r10
 123 004a 24 05 38 93 00          		bleu	.L13
 124                             	.L22:
 201:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 202:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             delay_cycles_64 -= BSP_PRV_OVERHEAD_CYCLES_64;
 125                             		.loc 1 202 13 is_stmt 1 view .LVU36
 126                             		.loc 1 202 29 is_stmt 0 view .LVU37
 127 004f ED 0A 03                		mov.L	12[r0], r10
 128 0052 A9 07                   		mov.L	16[r0], r7
 129 0054 71 A5 FE                		add	#-2, r10, r5
 130 0057 FD 74 27 FF             		adc	#-1, r7
 131 005b A0 8D                   		mov.L	r5, 12[r0]
 132 005d A1 07                   		mov.L	r7, 16[r0]
 133                             	.L15:
 203:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 204:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         else
 205:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 206:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             delay_cycles = 0;
 207:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 208:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 209:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         loop_cnt_64 = delay_cycles_64 / CPU_CYCLES_PER_LOOP;
 134                             		.loc 1 209 9 is_stmt 1 view .LVU38
 135                             		.loc 1 209 39 is_stmt 0 view .LVU39
 136 005f A8 89                   		mov.L	12[r0], r1
 137 0061 A9 02                   		mov.L	16[r0], r2
 138 0063 66 33                   		mov.L	#3, r3
 139 0065 66 04                   		mov.L	#0, r4
 140 0067 05 00 00 00             		bsr	___udivdi3
 141                             	.LVL7:
 142                             		.loc 1 209 21 view .LVU40
 143 006b A1 09                   		mov.L	r1, 20[r0]
 144 006d A1 82                   		mov.L	r2, 24[r0]
 210:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 211:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         if ((loop_cnt_64 > 0xFFFFFFFFUL) || (0 == loop_cnt_64))
 145                             		.loc 1 211 9 is_stmt 1 view .LVU41
 146                             		.loc 1 211 26 is_stmt 0 view .LVU42
 147 006f A9 0F                   		mov.L	20[r0], r7
 148 0071 A9 87                   		mov.L	24[r0], r7
 149                             		.loc 1 211 12 view .LVU43
 150 0073 61 07                   		cmp	#0, r7
 151 0075 21 75                   		bne	.L20
 152                             		.loc 1 211 48 view .LVU44
 153 0077 ED 0A 05                		mov.L	20[r0], r10
 154                             		.loc 1 211 42 view .LVU45
 155 007a EF A7                   		mov.L	r10, r7
 156                             		
 157 007c 06 95 07 06             	   or	24[r0].L, r7
 158 0080 61 07                   		cmp	#0, r7
 159 0082 20 6C                   		beq	.L21
 212:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 213:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             /* The requested delay is too large/small for the current ICLK. Return false which
 214:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****              * also results in the minimum possible delay. */
 215:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             return(false);
 216:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 217:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 218:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 219:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         loop_cnt = (uint32_t)loop_cnt_64;
 160                             		.loc 1 219 9 is_stmt 1 discriminator 1 view .LVU46
 161                             		.loc 1 219 20 is_stmt 0 discriminator 1 view .LVU47
 162 0084 A9 0F                   		mov.L	20[r0], r7
 163 0086 ED 0A 06                		mov.L	24[r0], r10
 164                             		.loc 1 219 18 discriminator 1 view .LVU48
 165 0089 A0 87                   		mov.L	r7, 8[r0]
 166                             	.L12:
 220:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     }
 221:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 222:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     delay_wait(loop_cnt);
 167                             		.loc 1 222 5 is_stmt 1 view .LVU49
 168 008b A8 81                   		mov.L	8[r0], r1
 169 008d 05 00 00 00             		bsr	_delay_wait
 170                             	.LVL8:
 223:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 224:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     return(true);
 171                             		.loc 1 224 5 view .LVU50
 172                             		.loc 1 224 11 is_stmt 0 view .LVU51
 173 0091 66 11                   		mov	#1, r1
 174                             		.balign 8,3,1
 175                             	.L6:
 225:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_SoftwareDelay() */
 176                             		.loc 1 225 1 view .LVU52
 177 0093 64 11                   		and #1, r1
 178 0095 3F 7A 0B                		rtsd	#44, r7-r10
 179                             	.LVL9:
 180                             	.L26:
 173:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     {
 181                             		.loc 1 173 34 discriminator 1 view .LVU53
 182 0098 EC 04                   		mov.L	[r0], r4
 183 009a 66 03                   		mov.L	#0, r3
 184 009c FC 1F A4                		emulu	r10, r4
 185 009f 61 05                   		cmp	#0, r5
 186 00a1 21 35                   		bne	.L27
 187                             	.L8:
 172:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****          (delay <= (0xFFFFFFFFUL / iclk_rate)) )  /* Ensure (iclk_rate * delay) will not exceed 32 
 188                             		.loc 1 172 41 discriminator 1 view .LVU54
 189 00a3 61 03                   		cmp	#0, r3
 190 00a5 21 82                   		bne	.L7
 175:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 191                             		.loc 1 175 9 is_stmt 1 view .LVU55
 175:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 192                             		.loc 1 175 36 is_stmt 0 view .LVU56
 193 00a7 EC 01                   		mov.L	[r0], r1
 194 00a9 4F A1                   		mul	r10, r1
 175:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 195                             		.loc 1 175 45 view .LVU57
 196 00ab FC 27 71                		divu	r7, r1
 175:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 197                             		.loc 1 175 22 view .LVU58
 198 00ae A0 09                   		mov.L	r1, 4[r0]
 177:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 199                             		.loc 1 177 9 is_stmt 1 view .LVU59
 177:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 200                             		.loc 1 177 26 is_stmt 0 view .LVU60
 201 00b0 A8 0F                   		mov.L	4[r0], r7
 202                             	.LVL10:
 177:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 203                             		.loc 1 177 12 view .LVU61
 204 00b2 61 27                   		cmp	#2, r7
 205 00b4 25 26                   		bleu	.L10
 179:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 206                             		.loc 1 179 13 is_stmt 1 view .LVU62
 179:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 207                             		.loc 1 179 26 is_stmt 0 view .LVU63
 208 00b6 A8 0F                   		mov.L	4[r0], r7
 209 00b8 60 27                   		sub	#2, r7
 210 00ba A0 0F                   		mov.L	r7, 4[r0]
 211                             	.L11:
 186:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 212                             		.loc 1 186 9 is_stmt 1 view .LVU64
 186:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 213                             		.loc 1 186 33 is_stmt 0 view .LVU65
 214 00bc A8 0C                   		mov.L	4[r0], r4
 215 00be FB 72 AB AA AA AA       		mov.L	#-1431655765, r7
 216 00c4 FC 1F 74                		emulu	r7, r4
 217 00c7 FD 81 57                		shlr	#1, r5, r7
 186:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 218                             		.loc 1 186 18 view .LVU66
 219 00ca A0 87                   		mov.L	r7, 8[r0]
 188:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 220                             		.loc 1 188 9 is_stmt 1 view .LVU67
 188:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 221                             		.loc 1 188 15 is_stmt 0 view .LVU68
 222 00cc A8 87                   		mov.L	8[r0], r7
 188:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 223                             		.loc 1 188 12 view .LVU69
 224 00ce 61 07                   		cmp	#0, r7
 225 00d0 21 BB                   		bne	.L12
 192:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 226                             		.loc 1 192 19 view .LVU70
 227 00d2 66 01                   		mov	#0, r1
 228 00d4 2E BF                   		bra	.L6
 229                             	.LVL11:
 230                             	.L27:
 192:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 231                             		.loc 1 192 19 view .LVU71
 232 00d6 66 13                   		mov.L	#1, r3
 233 00d8 2E CB                   		bra	.L8
 234                             	.LVL12:
 235                             	.L10:
 183:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 236                             		.loc 1 183 13 is_stmt 1 view .LVU72
 183:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 237                             		.loc 1 183 26 is_stmt 0 view .LVU73
 238 00da 3E 01 00                		mov.L	#0, 4[r0]
 239 00dd 2E DF                   		bra	.L11
 240                             	.LVL13:
 241                             	.L13:
 206:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 242                             		.loc 1 206 13 is_stmt 1 view .LVU74
 206:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 243                             		.loc 1 206 26 is_stmt 0 view .LVU75
 244 00df 3E 01 00                		mov.L	#0, 4[r0]
 245 00e2 38 7D FF                		bra	.L15
 246                             	.LVL14:
 247                             	.L18:
 248                             	.LCFI2:
 158:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     }
 249                             		.loc 1 158 15 view .LVU76
 250 00e5 66 01                   		mov	#0, r1
 251                             	.LVL15:
 252                             		.loc 1 225 1 view .LVU77
 253 00e7 64 11                   		and #1, r1
 254 00e9 02                      		rts
 255                             	.LVL16:
 256                             	.L20:
 257                             	.LCFI3:
 215:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 258                             		.loc 1 215 19 view .LVU78
 259 00ea 66 01                   		mov	#0, r1
 260 00ec 2E A7                   		bra	.L6
 261                             	.L21:
 262 00ee 66 01                   		mov	#0, r1
 263 00f0 2E A3                   		bra	.L6
 264                             	.LFE6:
 352                             	.Letext0:
 353                             		.file 2 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 354                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 355                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 356                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 357                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 358                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 359                             		.file 8 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_bsp_comm
 360                             		.file 9 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_rx_compi
 361                             		.file 10 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_loc
 362                             		.file 11 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_clo
