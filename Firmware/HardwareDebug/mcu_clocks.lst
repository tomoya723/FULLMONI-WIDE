   1                             		.file	"mcu_clocks.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.clock_source_select,"ax",@progbits
   6                             	_clock_source_select:
   7                             	.LFB6:
   8                             		.file 1 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c"
   1:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
   2:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * DISCLAIMER
   3:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prote
   5:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * applicable laws, including copyright laws. 
   6:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF 
   8:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIM
   9:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AF
  10:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY RE
  11:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * this software. By using this software, you agree to the additional terms and conditions found by 
  14:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * following link:
  15:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * http://www.renesas.com/disclaimer
  16:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *
  17:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Copyright (C) 2019 Renesas Electronics Corporation. All rights reserved.
  18:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
  19:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
  20:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * File Name    : mcu_clocks.c
  21:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Description  : Contains clock specific routines
  22:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
  23:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
  24:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * History : DD.MM.YYYY Version  Description
  25:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *         : 08.10.2019 1.00     First Release
  26:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *         : 10.12.2019 1.01     Removed unnecessary processing from the clock_source_select fucntio
  27:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *         : 17.12.2019 1.02     Fixed warning of clock_source_select function with IAR compiler.
  28:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *         : 14.02.2020 1.03     Fixed warning of clock_source_select function with CCRX and IAR com
  29:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *         : 31.07.2020 1.04     Added the setting of PSTOP0 bit.
  30:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *         : 29.01.2021 1.05     Fixed the initialization settings of sub-clock for Technical Update
  31:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               (TN-RX*-A0236B).
  32:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *         : 30.11.2021 2.00     Changed compile switch of clock settings by the following new macro
  33:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               - BSP_CFG_MAIN_CLOCK_OSCILLATE_ENABLE
  34:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               - BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE
  35:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               - BSP_CFG_HOCO_OSCILLATE_ENABLE
  36:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               - BSP_CFG_LOCO_OSCILLATE_ENABLE
  37:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               Deleted the following macro definitions.
  38:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               - BSP_PRV_LOCO_CLK_OPERATING
  39:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               - BSP_PRV_HOCO_CLK_OPERATING
  40:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               - BSP_PRV_MAIN_CLK_OPERATING
  41:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               - BSP_PRV_SUB_CLK_OPERATING
  42:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               Added the setting of the IWDT-Dedicated On-Chip Oscillator in opera
  43:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               function.
  44:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               Added comments for when use simulator.
  45:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               Added version check of smart configurator.
  46:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *         : 22.04.2022 2.01     Added comments for Technical Update Information(TN-RX*-A0257A).
  47:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               Deleted version check of smart configurator.
  48:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *         : 21.11.2023 2.02     Modified comment.
  49:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               Added compile switch of BSP_CFG_BOOTLOADER_PROJECT.
  50:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               Added the bsp_mcu_clock_reset_bootloader function.
  51:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               Renamed local variable for subclock in the clock_source_select func
  52:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                               Changed MOFCR setting timing.
  53:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
  54:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
  55:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
  56:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** Includes   <System Includes> , "Project Includes"
  57:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
  58:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #include "platform.h"
  59:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
  60:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
  61:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** Macro definitions
  62:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
  63:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_CKSEL_LOCO            (0x0)
  64:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_CKSEL_HOCO            (0x1)
  65:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_CKSEL_MAIN_OSC        (0x2)
  66:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_CKSEL_SUBCLOCK        (0x3)
  67:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_CKSEL_PLL             (0x4)
  68:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
  69:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_NORMALIZE_X10  (10)   /* used to avoid floating point arithmetic */
  70:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
  71:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* This macro runs or stops the PLL circuit.
  72:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****    If the following conditions are satisfied, PLL circuit will operate.
  73:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****    1. System clock source is PLL circuit.
  74:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****    2. PHY clock source is PLL circuit.
  75:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****    3. Clock output enable and clock output source is PLL circuit.
  76:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****  */
  77:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if (BSP_CFG_CLOCK_SOURCE == 4) \
  78:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****      || (BSP_CFG_PHY_CLOCK_SOURCE == 0) \
  79:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****      || ((BSP_CFG_CLKOUT_OUTPUT == 1) && (BSP_CFG_CLKOUT_SOURCE == 4))
  80:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #define BSP_PRV_PLL_CLK_OPERATING    (1)    /* PLL circuit is operating. */
  81:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else /* PLL is not used as clock source. */
  82:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #define BSP_PRV_PLL_CLK_OPERATING    (0)    /* PLL circuit is stopped. */
  83:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
  84:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
  85:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* This macro runs or stops the PPLL circuit.
  86:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****    If the following conditions are satisfied, PPLL circuit will operate.
  87:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****    1. USB clock source is PPLL circuit.
  88:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****    2. PHY clock source is PPLL circuit.
  89:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****    3. Clock output enable and clock output source is PPLL circuit.
  90:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****  */
  91:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if (BSP_CFG_USB_CLOCK_SOURCE == 3) \
  92:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****      || (BSP_CFG_PHY_CLOCK_SOURCE == 1) \
  93:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****      || ((BSP_CFG_CLKOUT_OUTPUT == 1) && (BSP_CFG_CLKOUT_SOURCE == 6))
  94:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #define BSP_PRV_PPLL_CLK_OPERATING    (1)    /* PPLL circuit is operating. */
  95:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else /* PPLL is not used for USB clock. */
  96:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #define BSP_PRV_PPLL_CLK_OPERATING    (0)    /* PPLL circuit is stopped. */
  97:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
  98:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
  99:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_BOOTLOADER_PROJECT == 1
 100:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* Enable the following macro definitions in the bootloader project. */
 101:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_SCKCR_RESET_VALUE        (0x00000000)
 102:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_SCKCR2_RESET_VALUE       (0x0011)
 103:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_SCKCR3_RESET_VALUE       (0x0000)
 104:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_MEMWAIT_RESET_VALUE      (0x00)
 105:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_BCKCR_RESET_VALUE        (0x00)
 106:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_PLLCR_RESET_VALUE        (0x1d00)
 107:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_PLLCR2_RESET_VALUE       (0x01)
 108:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_MOSCCR_RESET_VALUE       (0x01)
 109:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_MOSCWTCR_RESET_VALUE     (0x53)
 110:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #define BSP_PRV_MOFCR_RESET_VALUE        (0x00)
 111:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_BOOTLOADER_PROJECT == 1 */
 112:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 113:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
 114:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** Typedef definitions
 115:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
 116:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 117:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
 118:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** Exported global variables (to be accessed by other files)
 119:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
 120:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 121:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
 122:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** Private global variables and functions
 123:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
 124:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* When using the user startup program, disable the following code. */
 125:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_STARTUP_DISABLE == 0
 126:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** static void operating_frequency_set(void);
 127:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** static void clock_source_select(void);
 128:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_BOOTLOADER_PROJECT == 0
 129:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* Disable the following functions in the bootloader project. */
 130:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_CLKOUT_OUTPUT != 0
 131:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* CLKOUT initial configuration function declaration */
 132:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** static void bsp_clkout_initial_configure(void);
 133:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_CLKOUT_OUTPUT != 0 */
 134:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_BOOTLOADER_PROJECT == 0 */
 135:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_STARTUP_DISABLE == 0 */
 136:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 137:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
 138:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Function Name: get_iclk_freq_hz
 139:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Description  : Return the current ICLK frequency in Hz. Called by R_BSP_GetIClkFreqHz().
 140:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                The system clock source can be changed at any time via SYSTEM.SCKCR3.BIT.CKSEL, so
 141:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                determine the ICLK frequency we need to first find the current system clock source
 142:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                in some cases where the clock source can be configured for multiple frequencies, c
 143:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                frequency at which it is currently running.
 144:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Arguments    : None
 145:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Return Value : uint32_t - the iclk frequency in Hz
 146:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
 147:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** uint32_t get_iclk_freq_hz(void)
 148:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** {
 149:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t sys_clock_src_freq;
 150:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t pll_multiplier;
 151:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t pll_source_freq;
 152:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t hoco_frequency[3] = {16000000, 18000000, 20000000};
 153:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 154:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Casting is valid because it matches the type to the retern value. */
 155:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint8_t  cksel = (uint8_t)SYSTEM.SCKCR3.BIT.CKSEL;
 156:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 157:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     switch (cksel)
 158:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 159:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         case BSP_PRV_CKSEL_LOCO:
 160:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             sys_clock_src_freq = BSP_LOCO_HZ;
 161:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 162:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 163:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         case BSP_PRV_CKSEL_HOCO:
 164:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 165:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* Set HOCO frequency. */
 166:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             sys_clock_src_freq = hoco_frequency[SYSTEM.HOCOCR2.BIT.HCFRQ];
 167:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 168:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 169:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         case BSP_PRV_CKSEL_MAIN_OSC:
 170:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             sys_clock_src_freq = BSP_CFG_XTAL_HZ;
 171:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 172:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 173:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         case BSP_PRV_CKSEL_SUBCLOCK:
 174:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             sys_clock_src_freq = BSP_SUB_CLOCK_HZ;
 175:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 176:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 177:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         case BSP_PRV_CKSEL_PLL:
 178:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 179:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* The RX72N have two possible sources for the PLL */
 180:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 181:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* Casting is valid because it matches the type to the retern value. */
 182:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             pll_multiplier = ((((uint32_t)(SYSTEM.PLLCR.BIT.STC + 1)) * BSP_PRV_NORMALIZE_X10) / 2)
 183:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 184:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* Default to the MAIN OSC as the PLL source */
 185:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             pll_source_freq = BSP_CFG_XTAL_HZ;
 186:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 187:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* If 1 then the HOCO is the PLL source */
 188:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             if (0x1 == SYSTEM.PLLCR.BIT.PLLSRCSEL)
 189:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             {
 190:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****                 /* Set HOCO frequency. */
 191:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****                 pll_source_freq = hoco_frequency[SYSTEM.HOCOCR2.BIT.HCFRQ];
 192:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             }
 193:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 194:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* Casting is valid because it matches the type to the retern value. */
 195:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             sys_clock_src_freq = ((pll_source_freq / (((uint32_t)(SYSTEM.PLLCR.BIT.PLIDIV + 1)) * B
 196:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 197:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 198:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         default:
 199:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 200:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* Should never arrive here. Use the Main OSC freq as a default... */
 201:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             sys_clock_src_freq = BSP_CFG_XTAL_HZ;
 202:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 203:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 204:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 205:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Finally, divide the system clock source frequency by the currently set ICLK divider to get t
 206:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     return (sys_clock_src_freq / (uint32_t)(1 << SYSTEM.SCKCR.BIT.ICK));
 207:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** } /* End of function get_iclk_freq_hz() */
 208:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 209:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* When using the user startup program, disable the following code. */
 210:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_STARTUP_DISABLE == 0
 211:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 212:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
 213:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Function name: mcu_clock_setup
 214:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Description  : Contains clock functions called at device restart.
 215:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Arguments    : none
 216:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Return value : none
 217:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
 218:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** void mcu_clock_setup(void)
 219:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** {
 220:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Switch to high-speed operation */
 221:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     operating_frequency_set();
 222:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 223:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_BOOTLOADER_PROJECT == 0
 224:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* Disable the following functions in the bootloader project. */
 225:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_CLKOUT_OUTPUT != 0
 226:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     bsp_clkout_initial_configure();
 227:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_CLKOUT_OUTPUT != 0 */
 228:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_BOOTLOADER_PROJECT == 0 */
 229:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** } /* End of function mcu_clock_setup() */
 230:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 231:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
 232:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Function name: operating_frequency_set
 233:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Description  : Configures the clock settings for each of the device clocks
 234:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Arguments    : none
 235:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Return value : none
 236:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
 237:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** static void operating_frequency_set (void)
 238:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** {
 239:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Used for constructing value to write to SCKCR, SCKCR2, and SCKCR3 registers. */
 240:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t tmp_clock = 0;
 241:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t tmp_restore_clock = 0;
 242:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 243:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Protect off. */
 244:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PRCR.WORD = 0xA50B;
 245:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 246:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Select the clock based upon user's choice. */
 247:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     clock_source_select();
 248:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 249:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Figure out setting for FCK bits. */
 250:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if   BSP_CFG_FCK_DIV == 1
 251:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Do nothing since FCK bits should be 0. */
 252:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_FCK_DIV == 2
 253:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x10000000;
 254:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_FCK_DIV == 4
 255:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x20000000;
 256:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_FCK_DIV == 8
 257:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x30000000;
 258:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_FCK_DIV == 16
 259:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x40000000;
 260:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_FCK_DIV == 32
 261:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x50000000;
 262:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_FCK_DIV == 64
 263:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x60000000;
 264:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 265:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #error "Error! Invalid setting for BSP_CFG_FCK_DIV in r_bsp_config.h"
 266:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 267:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 268:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Figure out setting for ICK bits. */
 269:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if   BSP_CFG_ICK_DIV == 1
 270:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Do nothing since ICK bits should be 0. */
 271:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_ICK_DIV == 2
 272:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x01000000;
 273:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_ICK_DIV == 4
 274:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x02000000;
 275:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_ICK_DIV == 8
 276:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x03000000;
 277:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_ICK_DIV == 16
 278:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x04000000;
 279:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_ICK_DIV == 32
 280:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x05000000;
 281:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_ICK_DIV == 64
 282:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x06000000;
 283:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 284:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #error "Error! Invalid setting for BSP_CFG_ICK_DIV in r_bsp_config.h"
 285:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 286:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 287:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Figure out setting for BCK bits. */
 288:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if   BSP_CFG_BCK_DIV == 1
 289:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Do nothing since BCK bits should be 0. */
 290:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCK_DIV == 2
 291:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00010000;
 292:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCK_DIV == 3
 293:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00090000;
 294:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCK_DIV == 4
 295:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00020000;
 296:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCK_DIV == 8
 297:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00030000;
 298:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCK_DIV == 16
 299:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00040000;
 300:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCK_DIV == 32
 301:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00050000;
 302:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCK_DIV == 64
 303:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00060000;
 304:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 305:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #error "Error! Invalid setting for BSP_CFG_BCK_DIV in r_bsp_config.h"
 306:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 307:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 308:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Configure PSTOP1 bit for BCLK output. */
 309:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_BCLK_OUTPUT == 0
 310:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set PSTOP1 bit */
 311:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00800000;
 312:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCLK_OUTPUT == 1
 313:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Clear PSTOP1 bit */
 314:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock &= ~0x00800000;
 315:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCLK_OUTPUT == 2
 316:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Clear PSTOP1 bit */
 317:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock &= ~0x00800000;
 318:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set BCLK divider bit */
 319:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.BCKCR.BIT.BCLKDIV = 1;
 320:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 321:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" in Us
 322:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        This is done to ensure that the register has been written before the next register access. T
 323:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        pipeline architecture so the next instruction could be executed before the previous write ha
 324:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     */
 325:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if(1 == SYSTEM.BCKCR.BIT.BCLKDIV)
 326:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 327:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_NOP();
 328:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 329:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 330:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #error "Error! Invalid setting for BSP_CFG_BCLK_OUTPUT in r_bsp_config.h"
 331:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 332:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 333:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Configure PSTOP0 bit for SDCLK output. */
 334:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_SDCLK_OUTPUT == 0
 335:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00400000;
 336:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 337:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 338:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Figure out setting for PCKA bits. */
 339:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if   BSP_CFG_PCKA_DIV == 1
 340:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Do nothing since PCKA bits should be 0. */
 341:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKA_DIV == 2
 342:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00001000;
 343:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKA_DIV == 4
 344:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00002000;
 345:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKA_DIV == 8
 346:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00003000;
 347:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKA_DIV == 16
 348:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00004000;
 349:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKA_DIV == 32
 350:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00005000;
 351:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKA_DIV == 64
 352:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00006000;
 353:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 354:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #error "Error! Invalid setting for BSP_CFG_PCKA_DIV in r_bsp_config.h"
 355:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 356:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 357:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Figure out setting for PCKB bits. */
 358:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if   BSP_CFG_PCKB_DIV == 1
 359:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Do nothing since PCKB bits should be 0. */
 360:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKB_DIV == 2
 361:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000100;
 362:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKB_DIV == 4
 363:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000200;
 364:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKB_DIV == 8
 365:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000300;
 366:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKB_DIV == 16
 367:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000400;
 368:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKB_DIV == 32
 369:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000500;
 370:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKB_DIV == 64
 371:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000600;
 372:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 373:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #error "Error! Invalid setting for BSP_CFG_PCKB_DIV in r_bsp_config.h"
 374:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 375:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 376:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Figure out setting for PCKC bits. */
 377:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if   BSP_CFG_PCKC_DIV == 1
 378:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Do nothing since PCKA bits should be 0. */
 379:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKC_DIV == 2
 380:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000010;
 381:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKC_DIV == 4
 382:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000020;
 383:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKC_DIV == 8
 384:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000030;
 385:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKC_DIV == 16
 386:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000040;
 387:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKC_DIV == 32
 388:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000050;
 389:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKC_DIV == 64
 390:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000060;
 391:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 392:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #error "Error! Invalid setting for BSP_CFG_PCKC_DIV in r_bsp_config.h"
 393:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 394:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 395:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Figure out setting for PCKD bits. */
 396:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if   BSP_CFG_PCKD_DIV == 1
 397:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Do nothing since PCKD bits should be 0. */
 398:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKD_DIV == 2
 399:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000001;
 400:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKD_DIV == 4
 401:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000002;
 402:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKD_DIV == 8
 403:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000003;
 404:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKD_DIV == 16
 405:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000004;
 406:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKD_DIV == 32
 407:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000005;
 408:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKD_DIV == 64
 409:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000006;
 410:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 411:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #error "Error! Invalid setting for BSP_CFG_PCKD_DIV in r_bsp_config.h"
 412:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 413:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 414:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* To change the ICLK frequency from less than 70 MHz to 70 MHz or higher such that the ratio o
 415:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        after the change to that before the change is greater than four, start by setting the freque
 416:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        of the intended frequency, wait for 3 us, and then change it to the intended frequency.
 417:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        (Refer User's Manual: 9.10.8 Notes on Changing the ICLK Frequency.) */
 418:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Confirm whether to change ICLK frequency from less than 70 MHz to 70 MHz or higher. */
 419:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if(BSP_ICLK_HZ >= BSP_MCU_ICLK_FREQ_THRESHOLD)
 420:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 421:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* The clock source after reset is LOCO. The frequency of LOCO is 240 kHz.
 422:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            When the target clock frequency is 70 MHz or higher, it always exceeds 4 times the curre
 423:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            Therefore, this process does not check whether the target clock frequency exceeds 4 time
 424:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            clock frequency. */
 425:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 426:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Backup of tmp_clock */
 427:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         tmp_restore_clock = tmp_clock;
 428:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 429:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Clear the setting for ICK and BCK bits. */
 430:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         tmp_clock &= 0xF0F0FFFF;
 431:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if   BSP_CFG_ICK_DIV == 1
 432:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Set ICK and BCK bits to divide by 4. */
 433:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         tmp_clock |= 0x02020000;
 434:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_ICK_DIV == 2
 435:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Set ICK and BCK bits to divide by 8. */
 436:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         tmp_clock |= 0x03030000;
 437:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 438:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 439:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 440:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set SCKCR register. */
 441:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.SCKCR.LONG = tmp_clock;
 442:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 443:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" in Us
 444:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        This is done to ensure that the register has been written before the next register access. T
 445:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        pipeline architecture so the next instruction could be executed before the previous write ha
 446:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     */
 447:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if(tmp_clock == SYSTEM.SCKCR.LONG)
 448:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 449:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_NOP();
 450:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 451:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 452:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Re-init tmp_clock to use to set SCKCR2. */
 453:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock = 0;
 454:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 455:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Figure out setting for UCK bits. */
 456:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if   BSP_CFG_UCK_DIV == 2
 457:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000011;
 458:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_UCK_DIV == 3
 459:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000021;
 460:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_UCK_DIV == 4
 461:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000031;
 462:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_UCK_DIV == 5
 463:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock |= 0x00000041;
 464:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 465:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #error "Error! Invalid setting for BSP_CFG_UCK_DIV in r_bsp_config.h"
 466:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 467:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 468:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set SCKCR2 register. */
 469:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.SCKCR2.WORD = (uint16_t)tmp_clock;
 470:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 471:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" in Us
 472:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        This is done to ensure that the register has been written before the next register access. T
 473:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        pipeline architecture so the next instruction could be executed before the previous write ha
 474:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     */
 475:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if((uint16_t)tmp_clock == SYSTEM.SCKCR2.WORD)
 476:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 477:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_NOP();
 478:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 479:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 480:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Choose clock source. Default for r_bsp_config.h is PLL. */
 481:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_clock = ((uint16_t)BSP_CFG_CLOCK_SOURCE) << 8;
 482:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 483:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Casting is valid because it matches the type to the retern value. */
 484:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.SCKCR3.WORD = (uint16_t)tmp_clock;
 485:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 486:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" in Us
 487:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        This is done to ensure that the register has been written before the next register access. T
 488:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        pipeline architecture so the next instruction could be executed before the previous write ha
 489:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     */
 490:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if((uint16_t)tmp_clock == SYSTEM.SCKCR3.WORD)
 491:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 492:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_NOP();
 493:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 494:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 495:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set ICLK frequency to target ICLK. */
 496:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if(BSP_ICLK_HZ >= BSP_MCU_ICLK_FREQ_THRESHOLD)
 497:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 498:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Wait for 3 us. */
 499:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_SoftwareDelay((uint32_t)3, BSP_DELAY_MICROSECS);
 500:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 501:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Set SCKCR register. */
 502:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.SCKCR.LONG = tmp_restore_clock;
 503:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 504:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" i
 505:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            This is done to ensure that the register has been written before the next register acces
 506:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            pipeline architecture so the next instruction could be executed before the previous writ
 507:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****          */
 508:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if(tmp_restore_clock == SYSTEM.SCKCR.LONG)
 509:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 510:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 511:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 512:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 513:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 514:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_BOOTLOADER_PROJECT == 0
 515:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* Disable the following functions in the bootloader project. */
 516:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_IWDT_CLOCK_OSCILLATE_ENABLE == 1
 517:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* IWDT clock is stopped after reset. Oscillate the IWDT. */
 518:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.ILOCOCR.BIT.ILCSTP = 0;
 519:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 520:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* WAIT_LOOP */
 521:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     while (1 != SYSTEM.OSCOVFSR.BIT.ILCOVF)
 522:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 523:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* If you use simulator, the flag is not set to 1, resulting in an infinite loop. */
 524:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_NOP();
 525:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 526:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 527:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 528:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_LOCO_OSCILLATE_ENABLE == 0
 529:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* We can now turn LOCO off since it is not going to be used. */
 530:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.LOCOCR.BYTE = 0x01;
 531:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 532:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Wait for five the LOCO cycles */
 533:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* 5 count of LOCO : (1000000/216000)*5 = 23.148148148us
 534:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        23 + 2 = 25us ("+2" is overhead cycle) */
 535:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     R_BSP_SoftwareDelay((uint32_t)25, BSP_DELAY_MICROSECS);
 536:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 537:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_BOOTLOADER_PROJECT == 0 */
 538:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 539:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Protect on. */
 540:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PRCR.WORD = 0xA500;
 541:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** } /* End of function operating_frequency_set() */
 542:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 543:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /**************************************************************************************************
 544:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Function name: clock_source_select
 545:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Description  : Enables and disables clocks as chosen by the user. This function also implements t
 546:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** *                needed for the clocks to stabilize.
 547:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Arguments    : none
 548:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** * Return value : none
 549:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** ***************************************************************************************************
 550:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** static void clock_source_select (void)
 551:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** {
   9                             		.loc 1 551 1 view -0
  10 0000 60 40                   		sub	#4, r0
  11                             	.LCFI0:
 552:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     volatile uint8_t i;
  12                             		.loc 1 552 5 view .LVU1
 553:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     volatile uint8_t dummy;
  13                             		.loc 1 553 5 view .LVU2
 554:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_BOOTLOADER_PROJECT == 0
 555:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Disable the following valiable in the bootloader project. */
 556:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if (BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1) || (BSP_CFG_RTC_ENABLE == 1)
 557:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint8_t tmp_rtcdv;
  14                             		.loc 1 557 5 view .LVU3
 558:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* (BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1) || (BSP_CFG_RTC_ENABLE == 1) */
 559:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     volatile uint16_t tmp_packcr;
  15                             		.loc 1 559 5 view .LVU4
 560:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_BOOTLOADER_PROJECT == 0 */
 561:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 562:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_HOCO_OSCILLATE_ENABLE == 1
 563:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* HOCO is chosen. Start it operating if it is not already operating. */
 564:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if (1 == SYSTEM.HOCOCR.BIT.HCSTP)
 565:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 566:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Turn on power to HOCO. */
 567:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.HOCOPCR.BYTE = 0x00;
 568:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 569:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Stop HOCO. */
 570:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.HOCOCR.BYTE = 0x01;
 571:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 572:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 573:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         while(1 == SYSTEM.OSCOVFSR.BIT.HCOVF)
 574:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 575:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* The delay period needed is to make sure that the HOCO has stopped. */
 576:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 577:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 578:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 579:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Set HOCO frequency. */
 580:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         #if   (BSP_CFG_HOCO_FREQUENCY == 0)
 581:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.HOCOCR2.BYTE = 0x00;         //16MHz
 582:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         #elif (BSP_CFG_HOCO_FREQUENCY == 1)
 583:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.HOCOCR2.BYTE = 0x01;         //18MHz
 584:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         #elif (BSP_CFG_HOCO_FREQUENCY == 2)
 585:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.HOCOCR2.BYTE = 0x02;         //20MHz
 586:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         #else
 587:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             #error "Error! Invalid setting for BSP_CFG_HOCO_FREQUENCY in r_bsp_config.h"
 588:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         #endif
 589:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 590:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* HOCO is chosen. Start it operating. */
 591:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.HOCOCR.BYTE = 0x00;
 592:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 593:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" i
 594:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            This is done to ensure that the register has been written before the next register acces
 595:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            pipeline architecture so the next instruction could be executed before the previous writ
 596:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****          */
 597:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if(0x00 == SYSTEM.HOCOCR.BYTE)
 598:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 599:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 600:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 601:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 602:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 603:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* WAIT_LOOP */
 604:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     while(0 == SYSTEM.OSCOVFSR.BIT.HCOVF)
 605:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 606:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* The delay period needed is to make sure that the HOCO has stabilized.
 607:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            If you use simulator, the flag is not set to 1, resulting in an infinite loop. */
 608:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_NOP();
 609:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 610:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else /* (BSP_CFG_HOCO_OSCILLATE_ENABLE == 0) */
 611:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****   #if BSP_CFG_BOOTLOADER_PROJECT == 0
 612:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Disable the following functions in the bootloader project. */
 613:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* If HOCO is already operating, it doesn't stop. */
 614:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if (1 == SYSTEM.HOCOCR.BIT.HCSTP)
  16                             		.loc 1 614 5 view .LVU5
  17                             		.loc 1 614 31 is_stmt 0 view .LVU6
  18 0002 FB 5E 00 00 08          		mov.L	#0x80000, r5
  19 0007 CD 55 36                		mov.B	54[r5], r5
  20                             		.loc 1 614 8 view .LVU7
  21 000a FD 74 C5 01             		tst	#1, r5
  22 000e 21 13                   		bne	.L40
  23                             	.L2:
 615:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 616:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Turn off power to HOCO. */
 617:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.HOCOPCR.BYTE = 0x01;
 618:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 619:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     else
 620:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 621:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 622:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         while(0 == SYSTEM.OSCOVFSR.BIT.HCOVF)
  24                             		.loc 1 622 39 view .LVU8
  25 0010 FB 5E 00 00 08          		mov.L	#0x80000, r5
  26 0015 CD 55 3C                		mov.B	60[r5], r5
  27                             		.loc 1 622 14 view .LVU9
  28 0018 FD 74 C5 08             		tst	#8, r5
  29 001c 21 0F                   		bne	.L3
 623:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 624:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* The delay period needed is to make sure that the HOCO has stabilized.
 625:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****                If you use simulator, the flag is not set to 1, resulting in an infinite loop. */
 626:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
  30                             		.loc 1 626 13 is_stmt 1 view .LVU10
  31                             	 ; 626 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
  32 001e 03                      		nop
  33                             	 ; 0 "" 2
  34 001f 2E F1                   		bra	.L2
  35                             	.L40:
 617:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
  36                             		.loc 1 617 9 view .LVU11
 617:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
  37                             		.loc 1 617 29 is_stmt 0 view .LVU12
  38 0021 FB 5E 00 00 08          		mov.L	#0x80000, r5
  39 0026 FA 54 94 C2 01          		mov.B	#1, 49812[r5]
  40                             	.L3:
 627:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 628:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 629:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****   #endif /* BSP_CFG_BOOTLOADER_PROJECT == 0 */
 630:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_HOCO_OSCILLATE_ENABLE == 1 */
 631:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 632:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_MAIN_CLOCK_OSCILLATE_ENABLE == 1
 633:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Main clock oscillator is chosen. Start it operating. */
 634:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 635:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Main clock will be not oscillate in software standby or deep software standby modes. */
 636:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.MOFCR.BIT.MOFXIN = 0;
  41                             		.loc 1 636 5 is_stmt 1 view .LVU13
  42                             		.loc 1 636 29 is_stmt 0 view .LVU14
  43 002b FB 5E 00 00 08          		mov.L	#0x80000, r5
  44 0030 CE 54 93 C2             		mov.B	49811[r5], r4
  45 0034 7A 04                   		bclr	#0, r4
  46 0036 CB 54 93 C2             		mov.B	r4, 49811[r5]
 637:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 638:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set the oscillation source of the main clock oscillator. */
 639:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.MOFCR.BIT.MOSEL = BSP_CFG_MAIN_CLOCK_SOURCE;
  47                             		.loc 1 639 5 is_stmt 1 view .LVU15
  48                             		.loc 1 639 28 is_stmt 0 view .LVU16
  49 003a CE 54 93 C2             		mov.B	49811[r5], r4
  50 003e 7A 64                   		bclr	#6, r4
  51 0040 CB 54 93 C2             		mov.B	r4, 49811[r5]
 640:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 641:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* If the main oscillator is >10MHz then the main clock oscillator forced oscillation control r
 642:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        be changed. */
 643:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if (BSP_CFG_XTAL_HZ > 20000000)
  52                             		.loc 1 643 5 is_stmt 1 view .LVU17
 644:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 645:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* 20 - 24MHz. */
 646:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.MOFCR.BIT.MODRV2 = 0;
  53                             		.loc 1 646 9 view .LVU18
  54                             		.loc 1 646 33 is_stmt 0 view .LVU19
  55 0044 CE 53 93 C2             		mov.B	49811[r5], r3
  56 0048 FB 46 CF                		mov.L	#-49, r4
  57 004b 53 34                   		and	r3, r4
  58 004d CB 54 93 C2             		mov.B	r4, 49811[r5]
 647:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 648:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     else if (BSP_CFG_XTAL_HZ > 16000000)
 649:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 650:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* 16 - 20MHz. */
 651:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.MOFCR.BIT.MODRV2 = 1;
 652:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 653:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     else if (BSP_CFG_XTAL_HZ > 8000000)
 654:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 655:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* 8 - 16MHz. */
 656:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.MOFCR.BIT.MODRV2 = 2;
 657:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 658:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     else
 659:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 660:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* 8MHz. */
 661:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.MOFCR.BIT.MODRV2 = 3;
 662:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 663:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 664:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set the oscillation stabilization wait time of the main clock oscillator. */
 665:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_MAIN_CLOCK_SOURCE == 0 /* Resonator */
 666:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.MOSCWTCR.BYTE = BSP_CFG_MOSC_WAIT_TIME;
  59                             		.loc 1 666 5 is_stmt 1 view .LVU20
  60                             		.loc 1 666 26 is_stmt 0 view .LVU21
  61 0051 F9 54 A2 53             		mov.B	#0x53, 162[r5]
 667:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_MAIN_CLOCK_SOURCE == 1 /* External oscillator input */
 668:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.MOSCWTCR.BYTE = 0x00;
 669:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 670:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #error "Error! Invalid setting for BSP_CFG_MAIN_CLOCK_SOURCE in r_bsp_config.h"
 671:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 672:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 673:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set the main clock to operating. */
 674:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.MOSCCR.BYTE = 0x00;
  62                             		.loc 1 674 5 is_stmt 1 view .LVU22
  63                             		.loc 1 674 24 is_stmt 0 view .LVU23
  64 0055 F9 54 32 00             		mov.B	#0, 50[r5]
 675:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 676:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" in Us
 677:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        This is done to ensure that the register has been written before the next register access. T
 678:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        pipeline architecture so the next instruction could be executed before the previous write ha
 679:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****      */
 680:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if(0x00 == SYSTEM.MOSCCR.BYTE)
  65                             		.loc 1 680 5 is_stmt 1 view .LVU24
  66                             		.loc 1 680 29 is_stmt 0 view .LVU25
  67 0059 CD 55 32                		mov.B	50[r5], r5
  68                             		.loc 1 680 7 view .LVU26
  69 005c 5B 55                   		movu.B	r5, r5
  70 005e 61 05                   		cmp	#0, r5
  71 0060 21 03                   		bne	.L6
 681:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 682:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_NOP();
  72                             		.loc 1 682 9 is_stmt 1 view .LVU27
  73                             	 ; 682 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
  74 0062 03                      		nop
  75                             	 ; 0 "" 2
  76                             		.balign 8,3,4
  77                             	.L6:
 683:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 684:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 685:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* WAIT_LOOP */
 686:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     while(0 == SYSTEM.OSCOVFSR.BIT.MOOVF)
  78                             		.loc 1 686 35 is_stmt 0 view .LVU28
  79 0063 FB 5E 00 00 08          		mov.L	#0x80000, r5
  80 0068 CD 55 3C                		mov.B	60[r5], r5
  81                             		.loc 1 686 10 view .LVU29
  82 006b FD 74 C5 01             		tst	#1, r5
  83 006f 1C                      		bne	.L41
 687:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 688:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* The delay period needed is to make sure that the Main clock has stabilized.
 689:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            If you use simulator, the flag is not set to 1, resulting in an infinite loop. */
 690:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_NOP();
  84                             		.loc 1 690 9 is_stmt 1 view .LVU30
  85                             	 ; 690 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
  86 0070 03                      		nop
  87                             	 ; 0 "" 2
  88 0071 2E F2                   		bra	.L6
  89                             	.L41:
 691:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 692:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else /* (BSP_CFG_MAIN_CLOCK_OSCILLATE_ENABLE == 0) */
 693:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Main clock is stopped after reset. */
 694:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_MAIN_CLOCK_OSCILLATE_ENABLE == 1 */
 695:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 696:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_BOOTLOADER_PROJECT == 0
 697:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* Disable the following functions in the bootloader project. */
 698:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Sub-clock setting. */
 699:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 700:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Cold start setting */
 701:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if (0 == SYSTEM.RSTSR1.BIT.CWSF)
  90                             		.loc 1 701 5 view .LVU31
  91                             		.loc 1 701 31 is_stmt 0 view .LVU32
  92 0073 FB 5E 00 00 08          		mov.L	#0x80000, r5
  93 0078 CE 55 91 C2             		mov.B	49809[r5], r5
  94                             		.loc 1 701 8 view .LVU33
  95 007c FD 74 C5 01             		tst	#1, r5
  96 0080 3B 53 01                		bne	.L8
 702:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 703:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Stop the sub-clock oscillator */
 704:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* RCR4 - RTC Control Register 4
 705:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b7:b1    Reserved - The write value should be 0.
 706:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b0       RCKSEL   - Count Source Select - Sub-clock oscillator is selected. */
 707:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         RTC.RCR4.BIT.RCKSEL = 0;
  97                             		.loc 1 707 9 is_stmt 1 view .LVU34
  98                             		.loc 1 707 29 is_stmt 0 view .LVU35
  99 0083 FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 100 0088 CD 54 28                		mov.B	40[r5], r4
 101 008b 7A 04                   		bclr	#0, r4
 102 008d C7 54 28                		mov.B	r4, 40[r5]
 708:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 709:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 710:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         for (i = 0; i < 4; i++)
 103                             		.loc 1 710 9 is_stmt 1 view .LVU36
 104                             		.loc 1 710 16 is_stmt 0 view .LVU37
 105 0090 F8 04 00                		mov.B	#0, [r0]
 106                             		.loc 1 710 9 view .LVU38
 107 0093 2E 12                   		bra	.L9
 108                             	.L10:
 711:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 712:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* dummy read four times */
 713:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             dummy = RTC.RCR4.BYTE;
 109                             		.loc 1 713 13 is_stmt 1 discriminator 3 view .LVU39
 110                             		.loc 1 713 29 is_stmt 0 discriminator 3 view .LVU40
 111 0095 FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 112 009a CD 55 28                		mov.B	40[r5], r5
 113                             		.loc 1 713 19 discriminator 3 view .LVU41
 114 009d 80 0D                   		mov.B	r5, 1[r0]
 710:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 115                             		.loc 1 710 29 discriminator 3 view .LVU42
 116 009f CC 05                   		mov.B	[r0], r5
 117 00a1 62 15                   		add	#1, r5
 118 00a3 C3 05                   		mov.B	r5, [r0]
 119                             	.L9:
 710:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 120                             		.loc 1 710 23 discriminator 1 view .LVU43
 121 00a5 CC 05                   		mov.B	[r0], r5
 710:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 122                             		.loc 1 710 9 discriminator 1 view .LVU44
 123 00a7 5B 55                   		movu.B	r5, r5
 124 00a9 61 35                   		cmp	#3, r5
 125 00ab 25 EA                   		bleu	.L10
 714:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 715:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 716:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Confirm that the written */
 717:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if (0 != RTC.RCR4.BIT.RCKSEL)
 126                             		.loc 1 717 9 is_stmt 1 view .LVU45
 127                             		.loc 1 717 30 is_stmt 0 view .LVU46
 128 00ad FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 129 00b2 CD 55 28                		mov.B	40[r5], r5
 130                             		.loc 1 717 12 view .LVU47
 131 00b5 FD 74 C5 01             		tst	#1, r5
 132 00b9 20 03                   		beq	.L11
 718:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 719:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 133                             		.loc 1 719 13 is_stmt 1 view .LVU48
 134                             	 ; 719 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 135 00bb 03                      		nop
 136                             	 ; 0 "" 2
 137                             	.L11:
 720:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 721:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 722:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* RCR3 - RTC Control Register 3
 723:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b7:b4    Reserved - The write value should be 0.
 724:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b3:b1    RTCDV    - Sub-clock oscillator Drive Ability Control.
 725:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b0       RTCEN    - Sub-clock oscillator is stopped. */
 726:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         RTC.RCR3.BIT.RTCEN = 0;
 138                             		.loc 1 726 9 view .LVU49
 139                             		.loc 1 726 28 is_stmt 0 view .LVU50
 140 00bc FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 141 00c1 CD 54 26                		mov.B	38[r5], r4
 142 00c4 7A 04                   		bclr	#0, r4
 143 00c6 C7 54 26                		mov.B	r4, 38[r5]
 727:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 728:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 729:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         for (i = 0; i < 4; i++)
 144                             		.loc 1 729 9 is_stmt 1 view .LVU51
 145                             		.loc 1 729 16 is_stmt 0 view .LVU52
 146 00c9 F8 04 00                		mov.B	#0, [r0]
 147                             		.loc 1 729 9 view .LVU53
 148 00cc 2E 12                   		bra	.L12
 149                             	.L13:
 730:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 731:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* dummy read four times */
 732:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             dummy = RTC.RCR3.BYTE;
 150                             		.loc 1 732 13 is_stmt 1 discriminator 3 view .LVU54
 151                             		.loc 1 732 29 is_stmt 0 discriminator 3 view .LVU55
 152 00ce FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 153 00d3 CD 55 26                		mov.B	38[r5], r5
 154                             		.loc 1 732 19 discriminator 3 view .LVU56
 155 00d6 80 0D                   		mov.B	r5, 1[r0]
 729:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 156                             		.loc 1 729 29 discriminator 3 view .LVU57
 157 00d8 CC 05                   		mov.B	[r0], r5
 158 00da 62 15                   		add	#1, r5
 159 00dc C3 05                   		mov.B	r5, [r0]
 160                             	.L12:
 729:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 161                             		.loc 1 729 23 discriminator 1 view .LVU58
 162 00de CC 05                   		mov.B	[r0], r5
 729:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 163                             		.loc 1 729 9 discriminator 1 view .LVU59
 164 00e0 5B 55                   		movu.B	r5, r5
 165 00e2 61 35                   		cmp	#3, r5
 166 00e4 25 EA                   		bleu	.L13
 733:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 734:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 735:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Confirm that the written */
 736:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if (0 != RTC.RCR3.BIT.RTCEN)
 167                             		.loc 1 736 9 is_stmt 1 view .LVU60
 168                             		.loc 1 736 30 is_stmt 0 view .LVU61
 169 00e6 FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 170 00eb CD 55 26                		mov.B	38[r5], r5
 171                             		.loc 1 736 12 view .LVU62
 172 00ee FD 74 C5 01             		tst	#1, r5
 173 00f2 20 03                   		beq	.L14
 737:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 738:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 174                             		.loc 1 738 13 is_stmt 1 view .LVU63
 175                             	 ; 738 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 176 00f4 03                      		nop
 177                             	 ; 0 "" 2
 178                             	.L14:
 739:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 740:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 741:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* SOSCCR - Sub-Clock Oscillator Control Register
 742:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b7:b1    Reserved - The write value should be 0.
 743:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b0       SOSTP    - Sub-clock oscillator Stop - Sub-clock oscillator is stopped.
 744:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         NOTE: Please refer Tool News(TN-RX*-A0257A) for details. */
 745:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.SOSCCR.BYTE = 0x01;
 179                             		.loc 1 745 9 view .LVU64
 180                             		.loc 1 745 28 is_stmt 0 view .LVU65
 181 00f5 FB 5E 00 00 08          		mov.L	#0x80000, r5
 182 00fa F9 54 33 01             		mov.B	#1, 51[r5]
 746:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 747:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" i
 748:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            This is done to ensure that the register has been written before the next register acces
 749:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            pipeline architecture so the next instruction could be executed before the previous writ
 750:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****          */
 751:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if (0x01 != SYSTEM.SOSCCR.BYTE)
 183                             		.loc 1 751 9 is_stmt 1 view .LVU66
 184                             		.loc 1 751 34 is_stmt 0 view .LVU67
 185 00fe CD 55 33                		mov.B	51[r5], r5
 186                             		.loc 1 751 12 view .LVU68
 187 0101 5B 55                   		movu.B	r5, r5
 188 0103 61 15                   		cmp	#1, r5
 189 0105 15                      		beq	.L16
 752:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 753:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 190                             		.loc 1 753 13 is_stmt 1 view .LVU69
 191                             	 ; 753 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 192 0106 03                      		nop
 193                             	 ; 0 "" 2
 194 0107 2E 03                   		bra	.L16
 195                             	.L17:
 754:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 755:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 756:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 757:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         while (0 != SYSTEM.OSCOVFSR.BIT.SOOVF)
 758:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 759:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* The delay period needed is to make sure that the sub-clock has stopped. */
 760:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 196                             		.loc 1 760 13 view .LVU70
 197                             	 ; 760 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 198 0109 03                      		nop
 199                             	 ; 0 "" 2
 200                             	.L16:
 757:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 201                             		.loc 1 757 40 is_stmt 0 view .LVU71
 202 010a FB 5E 00 00 08          		mov.L	#0x80000, r5
 203 010f CD 55 3C                		mov.B	60[r5], r5
 757:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 204                             		.loc 1 757 15 view .LVU72
 205 0112 FD 74 C5 02             		tst	#2, r5
 206 0116 21 F3                   		bne	.L17
 761:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 762:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 763:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if (BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1) || (BSP_CFG_RTC_ENABLE == 1)
 764:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Set the drive capacity of the sub-clock oscillator */
 765:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         #if   (BSP_CFG_SOSC_DRV_CAP == 0) /* Standard CL */
 766:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             tmp_rtcdv = 0x06;
 207                             		.loc 1 766 13 is_stmt 1 view .LVU73
 208                             	.LVL0:
 767:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         #elif (BSP_CFG_SOSC_DRV_CAP == 1) /* Low CL */
 768:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             tmp_rtcdv = 0x01;
 769:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         #else
 770:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             #error "Error! Invalid setting for BSP_CFG_SOSC_DRV_CAP in r_bsp_config.h"
 771:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         #endif
 772:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 773:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Set the Sub-Clock Oscillator Drive Capacity Control. */
 774:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         RTC.RCR3.BIT.RTCDV = tmp_rtcdv;
 209                             		.loc 1 774 9 view .LVU74
 210                             		.loc 1 774 28 is_stmt 0 view .LVU75
 211 0118 FB 4E 00 C4 08          		mov.L	#0x8c400, r4
 212 011d CD 45 26                		mov.B	38[r4], r5
 213 0120 75 25 F1                		and #-15, r5
 214 0123 66 C3                   		mov.L	#12, r3
 215 0125 57 53                   		or	r5, r3
 216 0127 C7 43 26                		mov.B	r3, 38[r4]
 775:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 776:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 777:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         for (i = 0; i < 4; i++)
 217                             		.loc 1 777 9 is_stmt 1 view .LVU76
 218                             		.loc 1 777 16 is_stmt 0 view .LVU77
 219 012a F8 04 00                		mov.B	#0, [r0]
 220                             		.loc 1 777 9 view .LVU78
 221 012d 2E 12                   		bra	.L18
 222                             	.L19:
 778:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 779:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* dummy read four times */
 780:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             dummy = RTC.RCR3.BYTE;
 223                             		.loc 1 780 13 is_stmt 1 discriminator 3 view .LVU79
 224                             		.loc 1 780 29 is_stmt 0 discriminator 3 view .LVU80
 225 012f FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 226 0134 CD 55 26                		mov.B	38[r5], r5
 227                             		.loc 1 780 19 discriminator 3 view .LVU81
 228 0137 80 0D                   		mov.B	r5, 1[r0]
 777:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 229                             		.loc 1 777 29 discriminator 3 view .LVU82
 230 0139 CC 05                   		mov.B	[r0], r5
 231 013b 62 15                   		add	#1, r5
 232 013d C3 05                   		mov.B	r5, [r0]
 233                             	.L18:
 777:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 234                             		.loc 1 777 23 discriminator 1 view .LVU83
 235 013f CC 05                   		mov.B	[r0], r5
 777:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 236                             		.loc 1 777 9 discriminator 1 view .LVU84
 237 0141 5B 55                   		movu.B	r5, r5
 238 0143 61 35                   		cmp	#3, r5
 239 0145 25 EA                   		bleu	.L19
 781:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 782:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 783:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Confirm that the written */
 784:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if (tmp_rtcdv != RTC.RCR3.BIT.RTCDV)
 240                             		.loc 1 784 9 is_stmt 1 view .LVU85
 241                             		.loc 1 784 38 is_stmt 0 view .LVU86
 242 0147 FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 243 014c CD 55 26                		mov.B	38[r5], r5
 244 014f 5B 55                   		movu.B	r5, r5
 245 0151 68 15                   		shlr	#1, r5
 246                             		.loc 1 784 12 view .LVU87
 247 0153 64 75                   		and #7, r5
 248 0155 61 65                   		cmp	#6, r5
 249 0157 20 03                   		beq	.L20
 785:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 786:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 250                             		.loc 1 786 13 is_stmt 1 view .LVU88
 251                             	 ; 786 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 252 0159 03                      		nop
 253                             	 ; 0 "" 2
 254                             	.L20:
 787:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 788:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 789:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Set wait time until the sub-clock oscillator stabilizes */
 790:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* SOSCWTCR - Sub-Clock Oscillator Wait Control Register
 791:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b7:b5    Reserved - The write value should be 0.
 792:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b4:b0    SSTS - Sub-Clock Oscillator Waiting Time - Waiting time is 2.044ms(the maximum val
 793:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.SOSCWTCR.BYTE = BSP_CFG_SOSC_WAIT_TIME;
 255                             		.loc 1 793 9 view .LVU89
 256                             		.loc 1 793 30 is_stmt 0 view .LVU90
 257 015a FB 5E 00 00 08          		mov.L	#0x80000, r5
 258 015f F9 54 A3 01             		mov.B	#1, 163[r5]
 794:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 795:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Operate the Sub-clock oscillator */
 796:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.SOSCCR.BYTE = 0x00;
 259                             		.loc 1 796 9 is_stmt 1 view .LVU91
 260                             		.loc 1 796 28 is_stmt 0 view .LVU92
 261 0163 F9 54 33 00             		mov.B	#0, 51[r5]
 797:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 798:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" i
 799:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            This is done to ensure that the register has been written before the next register acces
 800:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            pipeline architecture so the next instruction could be executed before the previous writ
 801:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****          */
 802:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if (0x00 != SYSTEM.SOSCCR.BYTE)
 262                             		.loc 1 802 9 is_stmt 1 view .LVU93
 263                             		.loc 1 802 34 is_stmt 0 view .LVU94
 264 0167 CD 55 33                		mov.B	51[r5], r5
 265                             		.loc 1 802 12 view .LVU95
 266 016a 5B 55                   		movu.B	r5, r5
 267 016c 61 05                   		cmp	#0, r5
 268 016e 15                      		beq	.L22
 803:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 804:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 269                             		.loc 1 804 13 is_stmt 1 view .LVU96
 270                             	 ; 804 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 271 016f 03                      		nop
 272                             	 ; 0 "" 2
 273 0170 2E 03                   		bra	.L22
 274                             	.L23:
 805:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 806:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 807:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 808:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         while (1 != SYSTEM.OSCOVFSR.BIT.SOOVF)
 809:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 810:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* The delay period needed is to make sure that the sub-clock has stabilized.
 811:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****                If you use simulator, the flag is not set to 1, resulting in an infinite loop. */
 812:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 275                             		.loc 1 812 13 view .LVU97
 276                             	 ; 812 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 277 0172 03                      		nop
 278                             	 ; 0 "" 2
 279                             	.L22:
 808:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 280                             		.loc 1 808 40 is_stmt 0 view .LVU98
 281 0173 FB 5E 00 00 08          		mov.L	#0x80000, r5
 282 0178 CD 55 3C                		mov.B	60[r5], r5
 808:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 283                             		.loc 1 808 15 view .LVU99
 284 017b FD 74 C5 02             		tst	#2, r5
 285 017f 20 F3                   		beq	.L23
 813:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 814:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* (BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1) || (BSP_CFG_RTC_ENABLE == 1) */
 815:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 816:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_RTC_ENABLE == 1
 817:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* ---- Set wait time until the sub-clock oscillator stabilizes ---- */
 818:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.SOSCWTCR.BYTE = 0x00;
 286                             		.loc 1 818 9 is_stmt 1 view .LVU100
 287                             		.loc 1 818 30 is_stmt 0 view .LVU101
 288 0181 FB 5E 00 00 08          		mov.L	#0x80000, r5
 289 0186 F9 54 A3 00             		mov.B	#0, 163[r5]
 819:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 820:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* ---- Operate the sub-clock oscillator ---- */
 821:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         RTC.RCR3.BIT.RTCEN = 1;
 290                             		.loc 1 821 9 is_stmt 1 view .LVU102
 291                             		.loc 1 821 28 is_stmt 0 view .LVU103
 292 018a FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 293 018f CD 54 26                		mov.B	38[r5], r4
 294 0192 78 04                   		bset	#0, r4
 295 0194 C7 54 26                		mov.B	r4, 38[r5]
 822:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 823:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 824:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         for (i = 0; i < 4; i++)
 296                             		.loc 1 824 9 is_stmt 1 view .LVU104
 297                             		.loc 1 824 16 is_stmt 0 view .LVU105
 298 0197 F8 04 00                		mov.B	#0, [r0]
 299                             		.loc 1 824 9 view .LVU106
 300 019a 2E 14                   		bra	.L24
 301                             	.L25:
 825:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 826:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****              /* dummy read four times */
 827:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****              dummy = RTC.RCR3.BIT.RTCEN;
 302                             		.loc 1 827 14 is_stmt 1 discriminator 3 view .LVU107
 303                             		.loc 1 827 34 is_stmt 0 discriminator 3 view .LVU108
 304 019c FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 305 01a1 CD 55 26                		mov.B	38[r5], r5
 306 01a4 64 15                   		and #1, r5
 307                             		.loc 1 827 20 discriminator 3 view .LVU109
 308 01a6 80 0D                   		mov.B	r5, 1[r0]
 824:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 309                             		.loc 1 824 29 discriminator 3 view .LVU110
 310 01a8 CC 05                   		mov.B	[r0], r5
 311 01aa 62 15                   		add	#1, r5
 312 01ac C3 05                   		mov.B	r5, [r0]
 313                             	.L24:
 824:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 314                             		.loc 1 824 23 discriminator 1 view .LVU111
 315 01ae CC 05                   		mov.B	[r0], r5
 824:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 316                             		.loc 1 824 9 discriminator 1 view .LVU112
 317 01b0 5B 55                   		movu.B	r5, r5
 318 01b2 61 35                   		cmp	#3, r5
 319 01b4 25 E8                   		bleu	.L25
 828:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 829:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 830:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Confirm that the written value can be read correctly. */
 831:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if (1 != RTC.RCR3.BIT.RTCEN)
 320                             		.loc 1 831 9 is_stmt 1 view .LVU113
 321                             		.loc 1 831 30 is_stmt 0 view .LVU114
 322 01b6 FB 5E 00 C4 08          		mov.L	#0x8c400, r5
 323 01bb CD 55 26                		mov.B	38[r5], r5
 324                             		.loc 1 831 12 view .LVU115
 325 01be FD 74 C5 01             		tst	#1, r5
 326 01c2 21 03                   		bne	.L26
 832:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 833:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 327                             		.loc 1 833 13 is_stmt 1 view .LVU116
 328                             	 ; 833 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 329 01c4 03                      		nop
 330                             	 ; 0 "" 2
 331                             	.L26:
 834:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 835:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 836:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 837:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if (BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1) || (BSP_CFG_RTC_ENABLE == 1)
 838:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Wait for six the sub-clock cycles */
 839:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* 6 count of sub-clock : (1000000/32768)*6=183.10546875us
 840:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            In the case of LOCO frequency is 264kHz : 183.10546875/(1000000/264000)=48.33984375cycle
 841:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            (48.33984375+2)*(1000000/240000)=209.7493489583333us ("+2" is overhead cycle) */
 842:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_SoftwareDelay((uint32_t)210, BSP_DELAY_MICROSECS);
 332                             		.loc 1 842 9 view .LVU117
 333 01c5 FB 2E 40 42 0F          		mov.L	#0xf4240, r2
 334 01ca 75 41 D2                		mov.L	#0xd2, r1
 335 01cd 05 00 00 00             		bsr	_R_BSP_SoftwareDelay
 336                             	.LVL1:
 337 01d1 2E 58                   		bra	.L27
 338                             	.LVL2:
 339                             	.L8:
 843:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 844:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 845:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if (BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1) && (BSP_CFG_RTC_ENABLE == 0)
 846:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Stop prescaler and counter */
 847:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* RCR2 - RTC Control Register 2
 848:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b7  CNTMD - Count Mode Select - The calendar count mode.
 849:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b6  HR24  - Hours Mode - The RTC operates in 24-hour mode.
 850:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b5  AADJP - Automatic Adjustment Period Select - The RADJ.ADJ[5:0] setting value is adjuste
 851:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****                                                            the count value of the prescaler every 1
 852:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b4  AADJE - Automatic Adjustment Enable - Automatic adjustment is enabled.
 853:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b3  RTCOE - RTCOUT Output Enable - RTCOUT output enabled.
 854:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b2  ADJ30 - 30-Second Adjustment - 30-second adjustment is executed.
 855:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b1  RESET - RTC Software Reset - The prescaler and the target registers for RTC software re
 856:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b0  START - start - Prescaler is stopped. */
 857:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         RTC.RCR2.BYTE &= 0x7E;
 858:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 859:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 860:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         while (0 != RTC.RCR2.BIT.START)
 861:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 862:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* Confirm that the written value can be read correctly. */
 863:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****              R_BSP_NOP();
 864:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 865:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 866:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 867:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         while (0 != RTC.RCR2.BIT.CNTMD)
 868:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 869:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* Confirm that the written value can be read correctly. */
 870:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 871:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 872:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 873:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* RTC Software Reset */
 874:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         RTC.RCR2.BIT.RESET = 1;
 875:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 876:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 877:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         while (0 != RTC.RCR2.BIT.RESET)
 878:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 879:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* Confirm that the written value can be read correctly.
 880:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****                If you use simulator, the flag is not set to 0, resulting in an infinite loop. */
 881:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 882:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 883:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 884:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* An alarm interrupt request is disabled */
 885:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* RCR1 - RTC Control Register 1
 886:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b7:b4  PES   - Periodic Interrupt Select - These bits specify the period for the periodic i
 887:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b3     RTCOS - RTCOUT Output Select - RTCOUT outputs 1 Hz.
 888:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b2     PIE   - Periodic Interrupt Enable - A periodic interrupt request is disabled.
 889:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b1     CIE   - Carry Interrupt Enable - A carry interrupt request is disabled.
 890:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b0     AIE   - Alarm Interrupt Enable - An alarm interrupt request is disabled. */
 891:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         RTC.RCR1.BYTE &= 0xF8;
 892:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 893:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Wait for one the sub-clock cycles */
 894:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* 1 count of sub-clock : (1000000/32768)=30.517578125us
 895:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            In the case of LOCO frequency is 264kHz : 30.517578125/(1000000/264000)=8.056640625cycle
 896:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            (8.056640625+2)*(1000000/240000)=41.902669270833us ("+2" is overhead cycle) */
 897:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_SoftwareDelay((uint32_t)42, BSP_DELAY_MICROSECS);
 898:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 899:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Confirm that the written value can be read correctly. */
 900:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if (0x00 != (RTC.RCR1.BYTE & 0x07))
 901:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 902:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 903:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 904:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* (BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1) && (BSP_CFG_RTC_ENABLE == 0) */
 905:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 906:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Warm start setting */
 907:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     else
 908:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 909:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if (BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1) || ((BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 0) && (BSP
 910:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* SOSCCR - Sub-Clock Oscillator Control Register
 911:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b7:b1    Reserved - The write value should be 0.
 912:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b0       SOSTP    - Sub-clock oscillator Stop - Sub-clock oscillator is stopped. */
 913:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.SOSCCR.BYTE = 0x01;
 340                             		.loc 1 913 9 view .LVU118
 341                             		.loc 1 913 28 is_stmt 0 view .LVU119
 342 01d3 FB 5E 00 00 08          		mov.L	#0x80000, r5
 343 01d8 F9 54 33 01             		mov.B	#1, 51[r5]
 914:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 915:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" i
 916:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            This is done to ensure that the register has been written before the next register acces
 917:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            pipeline architecture so the next instruction could be executed before the previous writ
 918:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****          */
 919:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if (0x01 != SYSTEM.SOSCCR.BYTE)
 344                             		.loc 1 919 9 is_stmt 1 view .LVU120
 345                             		.loc 1 919 34 is_stmt 0 view .LVU121
 346 01dc CD 55 33                		mov.B	51[r5], r5
 347                             		.loc 1 919 12 view .LVU122
 348 01df 5B 55                   		movu.B	r5, r5
 349 01e1 61 15                   		cmp	#1, r5
 350 01e3 15                      		beq	.L29
 920:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 921:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 351                             		.loc 1 921 13 is_stmt 1 view .LVU123
 352                             	 ; 921 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 353 01e4 03                      		nop
 354                             	 ; 0 "" 2
 355 01e5 2E 03                   		bra	.L29
 356                             	.L30:
 922:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 923:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 924:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 925:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         while (0 != SYSTEM.OSCOVFSR.BIT.SOOVF)
 926:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 927:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* Confirm that the Sub clock stopped. */
 928:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 357                             		.loc 1 928 13 view .LVU124
 358                             	 ; 928 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 359 01e7 03                      		nop
 360                             	 ; 0 "" 2
 361                             	.L29:
 925:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 362                             		.loc 1 925 40 is_stmt 0 view .LVU125
 363 01e8 FB 5E 00 00 08          		mov.L	#0x80000, r5
 364 01ed CD 55 3C                		mov.B	60[r5], r5
 925:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 365                             		.loc 1 925 15 view .LVU126
 366 01f0 FD 74 C5 02             		tst	#2, r5
 367 01f4 21 F3                   		bne	.L30
 929:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 930:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* (BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1) || ((BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 0) &
 931:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 932:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1
 933:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Set wait time until the sub-clock oscillator stabilizes */
 934:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* SOSCWTCR - Sub-Clock Oscillator Wait Control Register
 935:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b7:b5    Reserved - The write value should be 0.
 936:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         b4:b0    SSTS - Sub-Clock Oscillator Waiting Time - Waiting time is 2.044ms(the maximum val
 937:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.SOSCWTCR.BYTE = BSP_CFG_SOSC_WAIT_TIME;
 368                             		.loc 1 937 9 is_stmt 1 view .LVU127
 369                             		.loc 1 937 30 is_stmt 0 view .LVU128
 370 01f6 FB 5E 00 00 08          		mov.L	#0x80000, r5
 371 01fb F9 54 A3 01             		mov.B	#1, 163[r5]
 938:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 939:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Operate the Sub-clock oscillator */
 940:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.SOSCCR.BYTE = 0x00;
 372                             		.loc 1 940 9 is_stmt 1 view .LVU129
 373                             		.loc 1 940 28 is_stmt 0 view .LVU130
 374 01ff F9 54 33 00             		mov.B	#0, 51[r5]
 941:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 942:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" i
 943:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            This is done to ensure that the register has been written before the next register acces
 944:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            pipeline architecture so the next instruction could be executed before the previous writ
 945:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****          */
 946:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if (0x00 != SYSTEM.SOSCCR.BYTE)
 375                             		.loc 1 946 9 is_stmt 1 view .LVU131
 376                             		.loc 1 946 34 is_stmt 0 view .LVU132
 377 0203 CD 55 33                		mov.B	51[r5], r5
 378                             		.loc 1 946 12 view .LVU133
 379 0206 5B 55                   		movu.B	r5, r5
 380 0208 61 05                   		cmp	#0, r5
 381 020a 16                      		beq	.L32
 947:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 948:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 382                             		.loc 1 948 13 is_stmt 1 view .LVU134
 383                             	 ; 948 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 384 020b 03                      		nop
 385                             	 ; 0 "" 2
 386 020c 76 10 01 00             		.balign 8,3,4
 387                             	.L32:
 949:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 950:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1 */
 951:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 952:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if (BSP_CFG_SUB_CLOCK_OSCILLATE_ENABLE == 1) || (BSP_CFG_RTC_ENABLE == 1)
 953:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* WAIT_LOOP */
 954:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         while (1 != SYSTEM.OSCOVFSR.BIT.SOOVF)
 388                             		.loc 1 954 40 is_stmt 0 view .LVU135
 389 0210 FB 5E 00 00 08          		mov.L	#0x80000, r5
 390 0215 CD 55 3C                		mov.B	60[r5], r5
 391                             		.loc 1 954 15 view .LVU136
 392 0218 FD 74 C5 02             		tst	#2, r5
 393 021c 1C                      		bne	.L42
 955:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 956:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             /* The delay period needed is to make sure that the sub-clock has stabilized.
 957:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****                If you use simulator, the flag is not set to 1, resulting in an infinite loop. */
 958:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
 394                             		.loc 1 958 13 is_stmt 1 view .LVU137
 395                             	 ; 958 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 396 021d 03                      		nop
 397                             	 ; 0 "" 2
 398 021e 2E F2                   		bra	.L32
 399                             	.L42:
 959:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 960:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 961:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 962:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_RTC_ENABLE == 1
 963:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* ---- Set wait time until the sub-clock oscillator stabilizes ---- */
 964:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.SOSCWTCR.BYTE = 0x00;
 400                             		.loc 1 964 9 view .LVU138
 401                             		.loc 1 964 30 is_stmt 0 view .LVU139
 402 0220 FB 5E 00 00 08          		mov.L	#0x80000, r5
 403 0225 F9 54 A3 00             		mov.B	#0, 163[r5]
 404                             	.L27:
 965:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 966:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 967:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_BOOTLOADER_PROJECT == 0 */
 968:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 969:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_BOOTLOADER_PROJECT == 0
 970:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* Disable the following functions in the bootloader project. */
 971:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if (BSP_CFG_PHY_CLOCK_SOURCE == 1) || (BSP_CFG_USB_CLOCK_SOURCE == 3)
 972:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* initialize */
 973:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_packcr = SYSTEM.PACKCR.WORD;
 405                             		.loc 1 973 5 is_stmt 1 view .LVU140
 406                             		.loc 1 973 31 is_stmt 0 view .LVU141
 407 0229 FB 5E 00 00 08          		mov.L	#0x80000, r5
 408 022e DD 54 22                		mov.W	68[r5], r4
 409                             		.loc 1 973 16 view .LVU142
 410 0231 90 0C                   		mov.W	r4, 2[r0]
 974:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 975:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_PHY_CLOCK_SOURCE == 1
 976:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set value of OUTCKSEL bit. */
 977:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_packcr |= 0x0010;
 411                             		.loc 1 977 5 is_stmt 1 view .LVU143
 412                             		.loc 1 977 16 is_stmt 0 view .LVU144
 413 0233 98 0C                   		mov.W	2[r0], r4
 414 0235 78 44                   		bset	#4, r4
 415 0237 90 0C                   		mov.W	r4, 2[r0]
 978:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 979:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 980:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_USB_CLOCK_SOURCE == 3
 981:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set value of UPLLSEL bit. */
 982:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     tmp_packcr |= 0x1000;
 983:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 984:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 985:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set value to PACLCR register. */
 986:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PACKCR.WORD = tmp_packcr;
 416                             		.loc 1 986 5 is_stmt 1 view .LVU145
 417                             		.loc 1 986 24 is_stmt 0 view .LVU146
 418 0239 98 0C                   		mov.W	2[r0], r4
 419 023b D7 54 22                		mov.W	r4, 68[r5]
 987:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 988:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_BOOTLOADER_PROJECT == 0 */
 989:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 990:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if (BSP_PRV_PLL_CLK_OPERATING == 1) || (BSP_PRV_PPLL_CLK_OPERATING == 1)
 991:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set PLL clock source. */
 992:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #if BSP_CFG_PLL_SRC == 0
 993:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Clear PLL clock source if PLL clock source is Main clock. */
 994:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PLLCR.BIT.PLLSRCSEL = 0;
 420                             		.loc 1 994 5 is_stmt 1 view .LVU147
 421                             		.loc 1 994 32 is_stmt 0 view .LVU148
 422 023e 9D 54                   		mov.W	40[r5], r4
 423 0240 7A 44                   		bclr	#4, r4
 424 0242 95 54                   		mov.W	r4, 40[r5]
 995:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #else
 996:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set PLL clock source if PLL clock source is HOCO clock. */
 997:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PLLCR.BIT.PLLSRCSEL = 1;
 998:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     #endif
 999:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
1000:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1001:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_PRV_PLL_CLK_OPERATING == 1
1002:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1003:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set PLL Input Divisor. */
1004:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PLLCR.BIT.PLIDIV = BSP_CFG_PLL_DIV - 1;
 425                             		.loc 1 1004 5 is_stmt 1 view .LVU149
 426                             		.loc 1 1004 29 is_stmt 0 view .LVU150
 427 0244 9D 53                   		mov.W	40[r5], r3
 428 0246 FB 46 FC                		mov.L	#-4, r4
 429 0249 53 34                   		and	r3, r4
 430 024b 95 54                   		mov.W	r4, 40[r5]
1005:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1006:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set PLL Multiplier. */
1007:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PLLCR.BIT.STC = ((uint8_t)((float)BSP_CFG_PLL_MUL * 2.0)) - 1;
 431                             		.loc 1 1007 5 is_stmt 1 view .LVU151
 432                             		.loc 1 1007 26 is_stmt 0 view .LVU152
 433 024d 9D 54                   		mov.W	40[r5], r4
 434 024f 76 24 FF C0             		and #-16129, r4
 435 0253 FB 3A 00 13             		mov.L	#0x1300, r3
 436 0257 57 43                   		or	r4, r3
 437 0259 95 53                   		mov.W	r3, 40[r5]
1008:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1009:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set the PLL to operating. */
1010:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PLLCR2.BYTE = 0x00;
 438                             		.loc 1 1010 5 is_stmt 1 view .LVU153
 439                             		.loc 1 1010 24 is_stmt 0 view .LVU154
 440 025b F9 54 2A 00             		mov.B	#0, 42[r5]
1011:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1012:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* WAIT_LOOP */
1013:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     while(0 == SYSTEM.OSCOVFSR.BIT.PLOVF)
 441                             		.loc 1 1013 5 is_stmt 1 view .LVU155
 442                             	.L34:
 443                             		.loc 1 1013 35 is_stmt 0 view .LVU156
 444 025f FB 5E 00 00 08          		mov.L	#0x80000, r5
 445 0264 CD 55 3C                		mov.B	60[r5], r5
 446                             		.loc 1 1013 10 view .LVU157
 447 0267 FD 74 C5 04             		tst	#4, r5
 448 026b 1C                      		bne	.L43
1014:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
1015:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* The delay period needed is to make sure that the PLL has stabilized.
1016:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            If you use simulator, the flag is not set to 1, resulting in an infinite loop. */
1017:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_NOP();
 449                             		.loc 1 1017 9 is_stmt 1 view .LVU158
 450                             	 ; 1017 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 451 026c 03                      		nop
 452                             	 ; 0 "" 2
 453 026d 2E F2                   		bra	.L34
 454                             	.L43:
1018:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
1019:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
1020:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* PLL is stopped after reset. */
1021:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
1022:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1023:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_BOOTLOADER_PROJECT == 0
1024:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** /* Disable the following functions in the bootloader project. */
1025:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_PRV_PPLL_CLK_OPERATING == 1
1026:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set PPLL Input Divisor. */
1027:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PPLLCR.BIT.PPLIDIV = BSP_CFG_PPLL_DIV - 1;
 455                             		.loc 1 1027 5 view .LVU159
 456                             		.loc 1 1027 31 is_stmt 0 view .LVU160
 457 026f FB 5E 00 00 08          		mov.L	#0x80000, r5
 458 0274 DD 53 24                		mov.W	72[r5], r3
 459 0277 FB 46 FC                		mov.L	#-4, r4
 460 027a 53 34                   		and	r3, r4
 461 027c 78 14                   		bset	#1, r4
 462 027e D7 54 24                		mov.W	r4, 72[r5]
1028:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1029:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set PPLL Multiplier. */
1030:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PPLLCR.BIT.PPLSTC = ((uint8_t)((float)BSP_CFG_PPLL_MUL * 2.0)) - 1;
 463                             		.loc 1 1030 5 is_stmt 1 view .LVU161
 464                             		.loc 1 1030 30 is_stmt 0 view .LVU162
 465 0281 DD 54 24                		mov.W	72[r5], r4
 466 0284 76 24 FF C0             		and #-16129, r4
 467 0288 FB 3A 00 31             		mov.L	#0x3100, r3
 468 028c 57 43                   		or	r4, r3
 469 028e D7 53 24                		mov.W	r3, 72[r5]
1031:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1032:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set the PPLL to operating. */
1033:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PPLLCR2.BYTE = 0x00;
 470                             		.loc 1 1033 5 is_stmt 1 view .LVU163
 471                             		.loc 1 1033 25 is_stmt 0 view .LVU164
 472 0291 F9 54 4A 00             		mov.B	#0, 74[r5]
1034:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1035:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* WAIT_LOOP */
1036:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     while(0 == SYSTEM.OSCOVFSR.BIT.PPLOVF)
 473                             		.loc 1 1036 5 is_stmt 1 view .LVU165
 474                             	.L36:
 475                             		.loc 1 1036 35 is_stmt 0 view .LVU166
 476 0295 FB 5E 00 00 08          		mov.L	#0x80000, r5
 477 029a CD 55 3C                		mov.B	60[r5], r5
 478                             		.loc 1 1036 10 view .LVU167
 479 029d FD 74 C5 20             		tst	#32, r5
 480 02a1 1C                      		bne	.L44
1037:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
1038:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* The delay period needed is to make sure that the PPLL has stabilized.
1039:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            If you use simulator, the flag is not set to 1, resulting in an infinite loop. */
1040:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         R_BSP_NOP();
 481                             		.loc 1 1040 9 is_stmt 1 view .LVU168
 482                             	 ; 1040 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 483 02a2 03                      		nop
 484                             	 ; 0 "" 2
 485 02a3 2E F2                   		bra	.L36
 486                             	.L44:
1041:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
1042:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1043:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Set PPLCK Input Divisor. */
1044:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     SYSTEM.PPLLCR3.BIT.PPLCK = BSP_CFG_PPLCK_DIV - 1;
 487                             		.loc 1 1044 5 view .LVU169
 488                             		.loc 1 1044 30 is_stmt 0 view .LVU170
 489 02a5 FB 5E 00 00 08          		mov.L	#0x80000, r5
 490 02aa CD 53 4B                		mov.B	75[r5], r3
 491 02ad FB 46 F0                		mov.L	#-16, r4
 492 02b0 53 34                   		and	r3, r4
 493 02b2 78 04                   		bset	#0, r4
 494 02b4 C7 54 4B                		mov.B	r4, 75[r5]
1045:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_PRV_PPLL_CLK_OPERATING == 1 */
1046:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif /* BSP_CFG_BOOTLOADER_PROJECT == 0 */
1047:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1048:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* LOCO is saved for last since it is what is running by default out of reset. This means you d
1049:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        it off until another clock has been enabled and is ready to use. */
1050:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if BSP_CFG_LOCO_OSCILLATE_ENABLE == 1
1051:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* LOCO is chosen. This is the default out of reset. */
1052:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
1053:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* LOCO is not chosen but it cannot be turned off yet since it is still being used. */
1054:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
1055:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1056:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* RX72N has a MEMWAIT register which controls the cycle waiting for access to code flash memor
1057:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****        It is set as zero coming out of reset. We only want to set this if we are > 120 MHz.
1058:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****      */
1059:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     if (BSP_ICLK_HZ > BSP_MCU_MEMWAIT_FREQ_THRESHOLD)
 495                             		.loc 1 1059 5 is_stmt 1 view .LVU171
1060:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
1061:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Set MEMWAIT */
1062:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         SYSTEM.MEMWAIT.BYTE = 0x01;
 496                             		.loc 1 1062 9 view .LVU172
 497                             		.loc 1 1062 29 is_stmt 0 view .LVU173
 498 02b7 FA 54 1C 10 01          		mov.B	#1, 4124[r5]
1063:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
1064:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         /* Dummy read and compare. cf."5. I/O Registers", "(2) Notes on writing to I/O registers" i
1065:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            This is done to ensure that the register has been written before the next register acces
1066:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****            pipeline architecture so the next instruction could be executed before the previous writ
1067:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         */
1068:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         if(0x01 == SYSTEM.MEMWAIT.BYTE)
 499                             		.loc 1 1068 9 is_stmt 1 view .LVU174
 500                             		.loc 1 1068 34 is_stmt 0 view .LVU175
 501 02bc CE 55 1C 10             		mov.B	4124[r5], r5
 502                             		.loc 1 1068 11 view .LVU176
 503 02c0 5B 55                   		movu.B	r5, r5
 504 02c2 61 15                   		cmp	#1, r5
 505 02c4 13                      		beq	.L45
 506                             	.L1:
1069:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
1070:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             R_BSP_NOP();
1071:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
1072:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
1073:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** } /* End of function clock_source_select() */
 507                             		.loc 1 1073 1 view .LVU177
 508 02c5 67 01                   		rtsd	#4
 509                             	.L45:
1070:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 510                             		.loc 1 1070 13 is_stmt 1 view .LVU178
 511                             	 ; 1070 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 512 02c7 03                      		nop
 513                             	 ; 0 "" 2
 514                             		.loc 1 1073 1 is_stmt 0 view .LVU179
 515 02c8 2E FD                   		bra	.L1
 516                             	.LFE6:
 518 02ca 74 10 01 00 00 00       		.section	.text.operating_frequency_set,"ax",@progbits
 520                             	_operating_frequency_set:
 521                             	.LFB5:
 238:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Used for constructing value to write to SCKCR, SCKCR2, and SCKCR3 registers. */
 522                             		.loc 1 238 1 is_stmt 1 view -0
 523 0000 7E A7                   		push.l	r7
 524                             	.LCFI1:
 240:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t tmp_restore_clock = 0;
 525                             		.loc 1 240 5 view .LVU181
 526                             	.LVL3:
 241:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 527                             		.loc 1 241 5 view .LVU182
 244:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 528                             		.loc 1 244 5 view .LVU183
 244:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 529                             		.loc 1 244 22 is_stmt 0 view .LVU184
 530 0002 FB 7E 00 00 08          		mov.L	#0x80000, r7
 531 0007 FA 79 FF 01 0B A5       		mov.W	#-23285, 1022[r7]
 247:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 532                             		.loc 1 247 5 is_stmt 1 view .LVU185
 533 000d 05 00 00 00             		bsr	_clock_source_select
 534                             	.LVL4:
 255:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_FCK_DIV == 8
 535                             		.loc 1 255 5 view .LVU186
 293:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCK_DIV == 4
 536                             		.loc 1 293 5 view .LVU187
 311:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_BCLK_OUTPUT == 1
 537                             		.loc 1 311 5 view .LVU188
 335:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 538                             		.loc 1 335 5 view .LVU189
 342:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKA_DIV == 4
 539                             		.loc 1 342 5 view .LVU190
 363:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKB_DIV == 8
 540                             		.loc 1 363 5 view .LVU191
 382:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKC_DIV == 8
 541                             		.loc 1 382 5 view .LVU192
 401:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_PCKD_DIV == 8
 542                             		.loc 1 401 5 view .LVU193
 419:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 543                             		.loc 1 419 5 view .LVU194
 427:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 544                             		.loc 1 427 9 view .LVU195
 430:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #if   BSP_CFG_ICK_DIV == 1
 545                             		.loc 1 430 9 view .LVU196
 433:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #elif BSP_CFG_ICK_DIV == 2
 546                             		.loc 1 433 9 view .LVU197
 441:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 547                             		.loc 1 441 5 view .LVU198
 441:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 548                             		.loc 1 441 23 is_stmt 0 view .LVU199
 549 0011 F9 72 08 22 12 C2 22    		mov.L	#0x22c21222, 32[r7]
 447:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 550                             		.loc 1 447 5 is_stmt 1 view .LVU200
 447:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 551                             		.loc 1 447 33 is_stmt 0 view .LVU201
 552 0018 AA 77                   		mov.L	32[r7], r7
 447:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 553                             		.loc 1 447 7 view .LVU202
 554 001a 74 07 22 12 C2 22       		cmp	#0x22c21222, r7
 555 0020 20 66                   		beq	.L52
 556                             	.L47:
 453:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 557                             		.loc 1 453 5 is_stmt 1 view .LVU203
 558                             	.LVL5:
 463:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #else
 559                             		.loc 1 463 5 view .LVU204
 469:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 560                             		.loc 1 469 5 view .LVU205
 469:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 561                             		.loc 1 469 24 is_stmt 0 view .LVU206
 562 0022 FB 7E 00 00 08          		mov.L	#0x80000, r7
 563 0027 3D F2 41                		mov.W	#0x41, 36[r7]
 475:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 564                             		.loc 1 475 5 is_stmt 1 view .LVU207
 475:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 565                             		.loc 1 475 44 is_stmt 0 view .LVU208
 566 002a 9C F5                   		mov.W	36[r7], r5
 475:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 567                             		.loc 1 475 7 view .LVU209
 568 002c 5F 55                   		movu.W	r5, r5
 569 002e 75 55 41                		cmp	#0x41, r5
 570 0031 20 58                   		beq	.L53
 571                             	.L48:
 481:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 572                             		.loc 1 481 5 is_stmt 1 view .LVU210
 573                             	.LVL6:
 484:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 574                             		.loc 1 484 5 view .LVU211
 484:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 575                             		.loc 1 484 24 is_stmt 0 view .LVU212
 576 0033 FB 7E 00 00 08          		mov.L	#0x80000, r7
 577 0038 F9 79 13 00 04          		mov.W	#0x400, 38[r7]
 490:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 578                             		.loc 1 490 5 is_stmt 1 view .LVU213
 490:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 579                             		.loc 1 490 44 is_stmt 0 view .LVU214
 580 003d 9C FD                   		mov.W	38[r7], r5
 490:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 581                             		.loc 1 490 7 view .LVU215
 582 003f 5F 55                   		movu.W	r5, r5
 583 0041 76 05 00 04             		cmp	#0x400, r5
 584 0045 20 47                   		beq	.L54
 585                             	.L49:
 496:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 586                             		.loc 1 496 5 is_stmt 1 view .LVU216
 499:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 587                             		.loc 1 499 9 view .LVU217
 588 0047 FB 2E 40 42 0F          		mov.L	#0xf4240, r2
 589 004c 66 31                   		mov.L	#3, r1
 590 004e 05 00 00 00             		bsr	_R_BSP_SoftwareDelay
 591                             	.LVL7:
 502:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 592                             		.loc 1 502 9 view .LVU218
 502:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 593                             		.loc 1 502 27 is_stmt 0 view .LVU219
 594 0052 FB 7E 00 00 08          		mov.L	#0x80000, r7
 595 0057 F9 72 08 22 12 C9 20    		mov.L	#0x20c91222, 32[r7]
 508:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 596                             		.loc 1 508 9 is_stmt 1 view .LVU220
 508:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 597                             		.loc 1 508 45 is_stmt 0 view .LVU221
 598 005e AA 77                   		mov.L	32[r7], r7
 508:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         {
 599                             		.loc 1 508 11 view .LVU222
 600 0060 74 07 22 12 C9 20       		cmp	#0x20c91222, r7
 601 0066 20 29                   		beq	.L55
 602                             	.L50:
 530:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 603                             		.loc 1 530 5 is_stmt 1 view .LVU223
 530:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 604                             		.loc 1 530 24 is_stmt 0 view .LVU224
 605 0068 FB 7E 00 00 08          		mov.L	#0x80000, r7
 606 006d F9 74 34 01             		mov.B	#1, 52[r7]
 535:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** #endif
 607                             		.loc 1 535 5 is_stmt 1 view .LVU225
 608 0071 FB 2E 40 42 0F          		mov.L	#0xf4240, r2
 609 0076 75 41 19                		mov.L	#25, r1
 610 0079 05 00 00 00             		bsr	_R_BSP_SoftwareDelay
 611                             	.LVL8:
 540:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** } /* End of function operating_frequency_set() */
 612                             		.loc 1 540 5 view .LVU226
 540:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** } /* End of function operating_frequency_set() */
 613                             		.loc 1 540 22 is_stmt 0 view .LVU227
 614 007d FA 79 FF 01 00 A5       		mov.W	#-23296, 1022[r7]
 541:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 615                             		.loc 1 541 1 view .LVU228
 616 0083 3F 77 01                		rtsd	#4, r7-r7
 617                             	.LVL9:
 618                             	.L52:
 449:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 619                             		.loc 1 449 9 is_stmt 1 view .LVU229
 620                             	 ; 449 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 621 0086 03                      		nop
 622                             	 ; 0 "" 2
 623 0087 2E 9B                   		bra	.L47
 624                             	.LVL10:
 625                             	.L53:
 477:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 626                             		.loc 1 477 9 view .LVU230
 627                             	 ; 477 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 628 0089 03                      		nop
 629                             	 ; 0 "" 2
 630 008a 2E A9                   		bra	.L48
 631                             	.LVL11:
 632                             	.L54:
 492:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     }
 633                             		.loc 1 492 9 view .LVU231
 634                             	 ; 492 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 635 008c 03                      		nop
 636                             	 ; 0 "" 2
 637 008d 2E BA                   		bra	.L49
 638                             	.L55:
 510:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****         }
 639                             		.loc 1 510 13 view .LVU232
 640                             	 ; 510 "../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c" 1
 641 008f 03                      		nop
 642                             	 ; 0 "" 2
 643 0090 2E D8                   		bra	.L50
 644                             	.LFE5:
 646                             		.section	.text.get_iclk_freq_hz,"ax",@progbits
 647                             		.global	_get_iclk_freq_hz
 649                             	_get_iclk_freq_hz:
 650                             	.LFB3:
 148:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t sys_clock_src_freq;
 651                             		.loc 1 148 1 view -0
 652 0000 60 C0                   		sub	#12, r0
 653                             	.LCFI2:
 149:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t pll_multiplier;
 654                             		.loc 1 149 5 view .LVU234
 150:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t pll_source_freq;
 655                             		.loc 1 150 5 view .LVU235
 151:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     uint32_t hoco_frequency[3] = {16000000, 18000000, 20000000};
 656                             		.loc 1 151 5 view .LVU236
 152:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 657                             		.loc 1 152 5 view .LVU237
 152:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 658                             		.loc 1 152 14 is_stmt 0 view .LVU238
 659 0002 F8 02 00 24 F4 00       		mov.L	#0xf42400, [r0]
 660 0008 F9 02 01 80 A8 12 01    		mov.L	#0x112a880, 4[r0]
 661 000f F9 02 02 00 2D 31 01    		mov.L	#0x1312d00, 8[r0]
 155:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 662                             		.loc 1 155 5 is_stmt 1 view .LVU239
 155:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 663                             		.loc 1 155 48 is_stmt 0 view .LVU240
 664 0016 FB 5E 00 00 08          		mov.L	#0x80000, r5
 665 001b 9C DD                   		mov.W	38[r5], r5
 666 001d 5F 55                   		movu.W	r5, r5
 667 001f 68 85                   		shlr	#8, r5
 668 0021 64 75                   		and #7, r5
 669                             	.LVL12:
 157:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 670                             		.loc 1 157 5 is_stmt 1 view .LVU241
 671 0023 5B 54                   		movu.B	r5, r4
 672 0025 61 24                   		cmp	#2, r4
 673 0027 20 7F                   		beq	.L62
 674 0029 25 44                   		bleu	.L67
 675 002b 5B 54                   		movu.B	r5, r4
 676 002d 61 34                   		cmp	#3, r4
 677 002f 3A 93 00                		beq	.L64
 678 0032 61 44                   		cmp	#4, r4
 679 0034 21 5B                   		bne	.L68
 182:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 680                             		.loc 1 182 13 view .LVU242
 182:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 681                             		.loc 1 182 60 is_stmt 0 view .LVU243
 682 0036 FB 4E 00 00 08          		mov.L	#0x80000, r4
 683 003b 9D 41                   		mov.W	40[r4], r1
 684 003d 5F 11                   		movu.W	r1, r1
 685 003f 68 81                   		shlr	#8, r1
 686 0041 75 21 3F                		and #63, r1
 182:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 687                             		.loc 1 182 65 view .LVU244
 688 0044 62 11                   		add	#1, r1
 182:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 689                             		.loc 1 182 71 view .LVU245
 690 0046 63 A1                   		mul	#10, r1
 182:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 691                             		.loc 1 182 28 view .LVU246
 692 0048 FD 81 15                		shlr	#1, r1, r5
 693                             	.LVL13:
 185:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 694                             		.loc 1 185 13 is_stmt 1 view .LVU247
 188:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             {
 695                             		.loc 1 188 13 view .LVU248
 188:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             {
 696                             		.loc 1 188 40 is_stmt 0 view .LVU249
 697 004b 9D 44                   		mov.W	40[r4], r4
 188:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             {
 698                             		.loc 1 188 16 view .LVU250
 699 004d FD 74 C4 10             		tst	#16, r4
 700 0051 21 46                   		bne	.L69
 185:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 701                             		.loc 1 185 29 view .LVU251
 702 0053 FB 12 00 36 6E 01       		mov.L	#0x16e3600, r1
 703                             	.LVL14:
 704                             	.L61:
 195:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 705                             		.loc 1 195 13 is_stmt 1 view .LVU252
 195:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 706                             		.loc 1 195 83 is_stmt 0 view .LVU253
 707 0059 FB 4E 00 00 08          		mov.L	#0x80000, r4
 708 005e 9D 44                   		mov.W	40[r4], r4
 709 0060 64 34                   		and #3, r4
 195:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 710                             		.loc 1 195 91 view .LVU254
 711 0062 62 14                   		add	#1, r4
 195:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 712                             		.loc 1 195 97 view .LVU255
 713 0064 63 A4                   		mul	#10, r4
 195:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 714                             		.loc 1 195 52 view .LVU256
 715 0066 FC 27 41                		divu	r4, r1
 716                             	.LVL15:
 195:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 717                             		.loc 1 195 32 view .LVU257
 718 0069 4F 51                   		mul	r5, r1
 719                             	.LVL16:
 196:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 720                             		.loc 1 196 13 is_stmt 1 view .LVU258
 721 006b 2E 47                   		bra	.L57
 722                             	.LVL17:
 723                             	.L67:
 157:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     {
 724                             		.loc 1 157 5 is_stmt 0 view .LVU259
 725 006d FD 78 C5 FF 00          		tst	#0xff, r5
 726 0072 20 3B                   		beq	.L63
 727 0074 61 14                   		cmp	#1, r4
 728 0076 21 11                   		bne	.L70
 166:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 729                             		.loc 1 166 13 is_stmt 1 view .LVU260
 166:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 730                             		.loc 1 166 67 is_stmt 0 view .LVU261
 731 0078 FB 5E 00 00 08          		mov.L	#0x80000, r5
 732                             	.LVL18:
 166:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 733                             		.loc 1 166 67 view .LVU262
 734 007d CD 55 37                		mov.B	55[r5], r5
 735 0080 64 35                   		and #3, r5
 166:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 736                             		.loc 1 166 32 view .LVU263
 737 0082 FE 65 01                		mov.L	[r5,r0], r1
 738                             	.LVL19:
 167:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 739                             		.loc 1 167 13 is_stmt 1 view .LVU264
 740 0085 2E 2D                   		bra	.L57
 741                             	.LVL20:
 742                             	.L70:
 201:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 743                             		.loc 1 201 32 is_stmt 0 view .LVU265
 744 0087 FB 12 00 36 6E 01       		mov.L	#0x16e3600, r1
 745 008d 2E 25                   		bra	.L57
 746                             	.L68:
 201:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 747                             		.loc 1 201 32 view .LVU266
 748 008f FB 12 00 36 6E 01       		mov.L	#0x16e3600, r1
 749 0095 2E 1D                   		bra	.L57
 750                             	.LVL21:
 751                             	.L69:
 191:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             }
 752                             		.loc 1 191 17 is_stmt 1 view .LVU267
 191:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             }
 753                             		.loc 1 191 68 is_stmt 0 view .LVU268
 754 0097 FB 4E 00 00 08          		mov.L	#0x80000, r4
 755 009c CD 44 37                		mov.B	55[r4], r4
 756 009f 64 34                   		and #3, r4
 191:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             }
 757                             		.loc 1 191 33 view .LVU269
 758 00a1 FE 64 01                		mov.L	[r4,r0], r1
 759                             	.LVL22:
 191:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             }
 760                             		.loc 1 191 33 view .LVU270
 761 00a4 2E B5                   		bra	.L61
 762                             	.LVL23:
 763                             	.L62:
 170:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 764                             		.loc 1 170 32 view .LVU271
 765 00a6 FB 12 00 36 6E 01       		mov.L	#0x16e3600, r1
 766 00ac 0E                      		bra	.L57
 767                             	.L63:
 160:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 768                             		.loc 1 160 32 view .LVU272
 769 00ad FB 1E 80 A9 03          		mov.L	#0x3a980, r1
 770                             	.LVL24:
 771                             		.balign 8,3,4
 772                             	.L57:
 206:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** } /* End of function get_iclk_freq_hz() */
 773                             		.loc 1 206 5 is_stmt 1 view .LVU273
 206:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** } /* End of function get_iclk_freq_hz() */
 774                             		.loc 1 206 66 is_stmt 0 view .LVU274
 775 00b2 FB 5E 00 00 08          		mov.L	#0x80000, r5
 776 00b7 AA 55                   		mov.L	32[r5], r5
 777 00b9 69 85                   		shlr	#24, r5
 778 00bb 64 F5                   		and #15, r5
 207:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 779                             		.loc 1 207 1 view .LVU275
 780 00bd FD 60 51                		shlr	r5, r1
 781                             	.LVL25:
 207:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 782                             		.loc 1 207 1 view .LVU276
 783 00c0 67 03                   		rtsd	#12
 784                             	.LVL26:
 785                             	.L64:
 174:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****             break;
 786                             		.loc 1 174 32 view .LVU277
 787 00c2 FB 1E 00 80 00          		mov.L	#0x8000, r1
 788 00c7 2E EB                   		bra	.L57
 789                             	.LFE3:
 791 00c9 FD 70 40 00 00 00 80    		.section	.text.mcu_clock_setup,"ax",@progbits
 792                             		.global	_mcu_clock_setup
 794                             	_mcu_clock_setup:
 795                             	.LFB4:
 219:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c ****     /* Switch to high-speed operation */
 796                             		.loc 1 219 1 is_stmt 1 view -0
 221:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 797                             		.loc 1 221 5 view .LVU279
 798 0000 05 00 00 00             		bsr	_operating_frequency_set
 799                             	.LVL27:
 229:../src/smc_gen/r_bsp/mcu/rx72n/mcu_clocks.c **** 
 800                             		.loc 1 229 1 is_stmt 0 view .LVU280
 801 0004 02                      		rts
 802                             	.LFE4:
 868                             	.Letext0:
 869                             		.file 2 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 870                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 871                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 872                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 873                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 874                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 875                             		.file 8 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_rx_compi
 876                             		.file 9 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/register
 877                             		.file 10 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_loc
 878                             		.file 11 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_bsp_com
