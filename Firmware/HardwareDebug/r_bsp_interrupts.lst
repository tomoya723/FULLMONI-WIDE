   1                             		.file	"r_bsp_interrupts.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.bsp_fit_interrupts_control,"ax",@progbits
   6                             	_bsp_fit_interrupts_control:
   7                             	.LVL0:
   8                             	.LFB9:
   9                             		.file 1 "../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c"
   1:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
   2:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * DISCLAIMER
   3:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prote
   5:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * applicable laws, including copyright laws.
   6:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF 
   8:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIM
   9:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AF
  10:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY RE
  11:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * this software. By using this software, you agree to the additional terms and conditions found by 
  14:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * following link:
  15:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * http://www.renesas.com/disclaimer
  16:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *
  17:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Copyright (C) 2013 Renesas Electronics Corporation. All rights reserved.
  18:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  19:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  20:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * File Name    : r_bsp_interrupts.c
  21:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : This module allows for callbacks to be registered for certain interrupts. 
  22:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                And handle exception interrupts.
  23:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  24:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  25:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * History : DD.MM.YYYY Version  Description
  26:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 28.02.2019 1.00     First Release
  27:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 08.04.2019 1.01     Added process for Group IE0 interrupts.
  28:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               Added process for EXNMI interrupts.
  29:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 26.07.2019 1.10     Modified comment of API function to Doxygen style.
  30:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               Modified the following function for added function.
  31:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               - R_BSP_InterruptControl
  32:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               Added the following functions.
  33:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               - bsp_fit_interrupts_control
  34:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               - bsp_fit_interrupt_enable
  35:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               - bsp_fit_interrupt_disable
  36:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               Fixed coding style.
  37:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 08.10.2019 1.11     Added process for software interrupt.
  38:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 10.12.2019 1.12     Modified comment.
  39:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 18.05.2021 1.13     Added function for Address exceptions.
  40:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 21.11.2023 1.14     Added error handling when BSP_INT_SRC_BUS_ERROR_ILLEGAL_ACCESS and 
  41:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               BSP_INT_SRC_BUS_ERROR_TIMEOUT are specified as vector in the R_BSP_
  42:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               function.
  43:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               Modified comment.
  44:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  45:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  46:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  47:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** Includes   <System Includes> , "Project Includes"
  48:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  49:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #include "platform.h"
  50:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  51:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  52:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** Macro definitions
  53:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  54:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_FLOATING_POINT
  55:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /* Defines CV, CO, CZ, CU, CX, and CE bits. */
  56:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #define BSP_PRV_FPU_CAUSE_FLAGS     (0x000000FC)
  57:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
  58:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  59:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  60:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** Typedef definitions
  61:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  62:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  63:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  64:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** Exported global variables (to be accessed by other files)
  65:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  66:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  67:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  68:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** Private global variables and functions
  69:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  70:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /* This array holds callback functions. */
  71:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** static void (* g_bsp_vectors[BSP_INT_SRC_TOTAL_ITEMS])(void * pdata);
  72:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  73:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** static bsp_int_err_t bsp_fit_interrupts_control (bool enable, bsp_int_ctrl_t * pdata);
  74:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  75:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT
  76:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** static bsp_int_err_t bsp_gr_int_enable_disable (bsp_int_src_t vector, bool enable, uint32_t ipl);
  77:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT */
  78:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  79:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  80:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Function Name: R_BSP_InterruptRequestEnable
  81:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  **************************************************************************************************
  82:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @brief Enable the specified interrupt request.
  83:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] vector Interrupt vector number.
  84:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @details Enable the specified interrupt request. Calculate the corresponding IER [m].IEN [j] fro
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * of the argument, and set "1" to that bit. The macro defined in iodefine.h can be used to the set
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * argument "vector". A description example is shown in Example.
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @note When setting an immediate value for an argument "vector", the argument must be 0 to 255. D
  88:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * vector number of the reserved interrupt source to the argument.
  89:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  */
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** void R_BSP_InterruptRequestEnable (uint32_t vector)
  91:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
  92:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ier_reg_num;
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
  94:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
  95:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Calculate the register number. (IER[m].IENj)(m = vector_number / 8) */
  97:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     ier_reg_num = vector >> 3;
  98:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Calculate the bit number. (IERm.IEN[j])(j = vector_number % 8) */
 100:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     ien_bit_num = vector & 0x00000007;
 101:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 102:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
 103:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     p_ier_addr = (uint8_t *)&ICU.IER[ier_reg_num].BYTE;
 104:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 105:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
 106:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_BIT_SET(p_ier_addr, ien_bit_num);
 107:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 108:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 109:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 110:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Function Name: R_BSP_InterruptRequestDisable
 111:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  **************************************************************************************************
 112:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @brief Disable the specified interrupt request.
 113:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] vector Interrupt vector number.
 114:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @details Disable the specified interrupt request. Calculate the corresponding IER [m].IEN [j] fr
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * number of the argument, and clear "0" to that bit. The macro defined in iodefine.h can be used t
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * the argument "vector". A description example is shown in Example.
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @note When setting an immediate value for an argument "vector", the argument must be 0 to 255. D
 118:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * vector number of the reserved interrupt source to the argument.
 119:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  */
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** void R_BSP_InterruptRequestDisable (uint32_t vector)
 121:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 122:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ier_reg_num;
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 124:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 125:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Calculate the register number. (IER[m].IENj)(m = vector_number / 8) */
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     ier_reg_num = vector >> 3;
 128:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Calculate the bit number. (IERm.IEN[j])(j = vector_number % 8) */
 130:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     ien_bit_num = vector & 0x00000007;
 131:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 132:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
 133:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     p_ier_addr = (uint8_t *)&ICU.IER[ier_reg_num].BYTE;
 134:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 135:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
 136:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_BIT_CLEAR(p_ier_addr, ien_bit_num);
 137:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 138:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 139:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 140:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function Name: bsp_interrupt_open
 141:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Initialize callback function array.
 142:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : None
 143:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : None
 144:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 145:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** void bsp_interrupt_open (void)
 146:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 147:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t i;
 148:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 149:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* WAIT_LOOP */
 150:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     for (i = 0; i < BSP_INT_SRC_TOTAL_ITEMS; i++)
 151:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 152:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 153:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         g_bsp_vectors[i] = FIT_NO_FUNC;
 154:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 155:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 156:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_SOFTWARE_CONFIGURABLE_INTERRUPT
 157:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Initialize mapped interrupts. */
 158:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_mapped_interrupt_open();
 159:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 160:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 161:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #if (defined(BSP_CFG_SWINT_UNIT1_ENABLE) && (BSP_CFG_SWINT_UNIT1_ENABLE == 1))
 162:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_SoftwareInterruptOpen(BSP_SWINT_UNIT1);
 163:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* (defined(BSP_CFG_SWINT_UNIT1_ENABLE) && (BSP_CFG_SWINT_UNIT1_ENABLE == 1)) */
 164:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #if (defined(BSP_CFG_SWINT_UNIT2_ENABLE) && (BSP_CFG_SWINT_UNIT2_ENABLE == 1))
 165:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_SoftwareInterruptOpen(BSP_SWINT_UNIT2);
 166:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* (defined(BSP_CFG_SWINT_UNIT2_ENABLE) && (BSP_CFG_SWINT_UNIT2_ENABLE == 1)) */
 167:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function bsp_interrupt_open() */
 168:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 169:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 170:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Function Name: R_BSP_InterruptWrite
 171:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  **************************************************************************************************
 172:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @brief Registers a callback function for an interrupt.
 173:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] vector Which interrupt to register a callback for.
 174:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] callback Pointer to function to call when interrupt occurs.
 175:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_SUCCESS Successful, callback has been registered.
 176:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_INVALID_ARG An invalid interrupt source was specified for vector.
 177:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @details This function registers a callback function for an interrupt. If FIT_NO_FUNC, NULL, or 
 178:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * function address is passed for the callback argument then any previously registered callbacks ar
 179:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * If one of the interrupts that is handled by this code is triggered then the interrupt handler wi
 180:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * to see if a valid callback function is registered. If one is found then the callback function wi
 181:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * If one is not found then the interrupt handler will clear the appropriate flag(s) and exit. If t
 182:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * callback function registered and wishes to no longer handle the interrupt then the user should c
 183:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * again with FIT_NO_FUNC as the vector parameter.
 184:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @note Use of FIT_NO_FUNC is preferred over NULL since access to the address defined by FIT_NO_FU
 185:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * bus error which is easy for the user to catch. NULL typically resolves to 0 which is a valid add
 186:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  */
 187:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** bsp_int_err_t R_BSP_InterruptWrite (bsp_int_src_t vector,  bsp_int_cb_t callback)
 188:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 189:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err;
 190:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 191:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     err = BSP_INT_SUCCESS;
 192:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 193:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Check for valid address. */
 194:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if (((uint32_t)callback == (uint32_t)NULL) || ((uint32_t)callback == (uint32_t)FIT_NO_FUNC))
 195:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 196:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 197:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         g_bsp_vectors[vector] = FIT_NO_FUNC;
 198:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 199:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else
 200:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 201:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if((BSP_INT_SRC_BUS_ERROR_ILLEGAL_ACCESS == vector) || (BSP_INT_SRC_BUS_ERROR_TIMEOUT == ve
 202:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****            (BSP_INT_SRC_EMPTY <= vector))
 203:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 204:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* When registering a bus error callback function, specify BSP_INT_SRC_BUS_ERROR in the
 205:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = BSP_INT_ERR_INVALID_ARG;
 206:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 207:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 208:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 209:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             g_bsp_vectors[vector] = callback;
 210:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 211:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 212:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 213:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     return err;
 214:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptWrite() */
 215:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 216:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 217:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Function Name: R_BSP_InterruptRead
 218:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  **************************************************************************************************
 219:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @brief Gets the callback for an interrupt if one is registered.
 220:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] vector Which interrupt to read the callback for.
 221:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[out] callback Pointer to where to store callback address.
 222:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_SUCCESS Successful, callback address has been returned.
 223:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_NO_REGISTERED_CALLBACK No valid callback has been registered for this interr
 224:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @details This function returns the callback function address for an interrupt if one has been re
 225:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * callback function has not been registered then an error is returned and nothing is stored to the
 226:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  */
 227:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** bsp_int_err_t R_BSP_InterruptRead (bsp_int_src_t vector, bsp_int_cb_t * callback)
 228:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 229:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err;
 230:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 231:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     err = BSP_INT_SUCCESS;
 232:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 233:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Check for valid address. */
 234:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if (((uint32_t)g_bsp_vectors[vector] == (uint32_t)NULL) || ((uint32_t)g_bsp_vectors[vector] == 
 235:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 236:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_NO_REGISTERED_CALLBACK;
 237:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 238:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else
 239:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 240:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         *callback = g_bsp_vectors[vector];
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 242:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 243:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     return err;
 244:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRead() */
 245:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 246:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 247:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Function Name: R_BSP_InterruptControl
 248:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  **************************************************************************************************
 249:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @brief Controls various interrupt operations.
 250:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] vector Which interrupt to control for.\n
 251:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * If the interrupt control commands is the BSP_INT_CMD_FIT_INTERRUPT_ENABLE or the BSP_INT_CMD_FIT
 252:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * commands, set BSP_INT_SRC_EMPTY to "vector" because no arguments are used.
 253:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] cmd Interrupt control command.
 254:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in,out] pdata Pointer to the argument for each interrupt control command. Typecasted to v
 255:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * defines of bsp_int_ctrl_t. \n
 256:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Most of the interrupt control commands do not need the argument and take FIT_NO_PTR for 
 257:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * this parameter. If the interrupt control command is the BSP_INT_CMD_GROUP_INTERRUPT_ENABLE comma
 258:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * interrupt priority level for group interrupts as the argument. If the interrupt control command 
 259:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * BSP_INT_CMD_FIT_INTERRUPT_DISABLE command, set the address of a variable for saving the current 
 260:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * priority level in the argument. If the interrupt control command is the BSP_INT_CMD_FIT_INTERRUP
 261:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * set the address of a variable used in the BSP_INT_CMD_FIT_INTERRUPT_DISABLE command.
 262:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_SUCCESS Successful.
 263:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_NO_REGISTERED_CALLBACK No valid callback has been registered for this interr
 264:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_INVALID_ARG The command passed is invalid.
 265:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_UNSUPPORTED This processing is not supported.
 266:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_GROUP_STILL_ENABLED Group interrupt request remains enabled.
 267:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_INVALID_IPL Illegal IPL value input.
 268:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @details This function controls the interrupt callback function call and enabling/disabling inte
 269:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * error interrupt, floating-point exception, NMI pin interrupt, and group interrupts, and enabling
 270:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * interrupts by controlling the Processor Interrupt Priority Level. When BSP_INT_CMD_GROUP_INTERRU
 271:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * the interrupt control command, the interrupt request (IER) for group interrupts is enabled and a
 272:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * priority level is set. The interrupt priority level set must be higher than the current level. W
 273:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * BSP_INT_CMD_GROUP_INTERRUPT_DISABLE is set as the interrupt control command, the interrupt reque
 274:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * interrupts is disabled. Note that the interrupt request (IER) for group interrupts cannot be dis
 275:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * all interrupt requests (GEN) caused by grouped interrupt sources are disabled. When 
 276:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * BSP_INT_CMD_FIT_INTERRUPT_DISABLE is set as the interrupt control command, the current processor
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * level (IPL) is saved to the address specified by pdata as an argument, and disables interrupts b
 278:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * IPL. The value of IPL to be set is the value of BSP_CFG_FIT_IPL_MAX. When BSP_INT_CMD_FIT_INTERR
 279:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * as the interrupt control command, the interrupt is enabled by setting the value stored in the ad
 280:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * pdata to IPL. These two commands are valid only in supervisor mode. When BSP_INT_CMD_FIT_INTERRU
 281:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * BSP_INT_CMD_FIT_INTERRUPT_ENABLE commands are executed in user mode, Controlling IPL is not exec
 282:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * code BSP_INT_ERR_UNSUPPORTED is returned.
 283:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @note BSP_INT_CMD_FIT_INTERRUPT_DISABLE and BSP_INT_CMD_FIT_INTERRUPT_ENABLE commands can be use
 284:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * atomicity of critical sections. However, these commands are valid only in supervisor mode. When 
 285:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * executed in user mode, atomicity is not to secure.\n
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * See Section 5.15 in the application note for more information.
 287:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  */
 288:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** bsp_int_err_t R_BSP_InterruptControl (bsp_int_src_t vector, bsp_int_cmd_t cmd, void * pdata)
 289:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 290:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t       err;
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_cb_args_t   cb_args;
 292:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 293:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     err = BSP_INT_SUCCESS;
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 295:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* nothing */
 297:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else
 298:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* This code is only used to remove compiler info messages about these parameters not being use
 299:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     INTERNAL_NOT_USED(pdata);
 300:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 301:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 302:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     switch (cmd)
 303:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 304:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_CALL_CALLBACK):
 305:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 306:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 307:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (((uint32_t)g_bsp_vectors[vector] != (uint32_t)NULL) && ((uint32_t)g_bsp_vectors[vec
 308:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 309:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Fill in callback info. */
 310:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 cb_args.vector = vector;
 311:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 312:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 g_bsp_vectors[vector](&cb_args);
 313:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 314:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 315:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 316:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_NO_REGISTERED_CALLBACK;
 317:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 318:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 319:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 320:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_INTERRUPT_ENABLE):
 321:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = bsp_interrupt_enable_disable(vector, true);
 322:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 323:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 324:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_INTERRUPT_DISABLE):
 325:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = bsp_interrupt_enable_disable(vector, false);
 326:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 327:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 328:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT
 329:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_GROUP_INTERRUPT_ENABLE):
 330:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 331:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 332:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if(((uint32_t)NULL != (uint32_t)pdata) && ((uint32_t)FIT_NO_FUNC != (uint32_t)pdata))
 333:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 334:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 335:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = bsp_gr_int_enable_disable(vector, true, ((bsp_int_ctrl_t *)pdata)->ipl);
 336:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 337:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 338:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 339:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                  err = BSP_INT_ERR_INVALID_ARG;
 340:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 341:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 342:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 343:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_GROUP_INTERRUPT_DISABLE):
 344:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = bsp_gr_int_enable_disable(vector, false, 0);
 345:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 346:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 347:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 348:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_FIT_INTERRUPT_ENABLE):
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 350:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 351:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = bsp_fit_interrupts_control(true, (bsp_int_ctrl_t *)pdata);
 352:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 353:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 354:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_FIT_INTERRUPT_DISABLE):
 355:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 356:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 357:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = bsp_fit_interrupts_control(false, (bsp_int_ctrl_t *)pdata);
 358:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 359:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 360:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         default:
 361:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = BSP_INT_ERR_INVALID_ARG;
 362:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 363:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 364:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 365:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     return err;
 366:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
 367:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 368:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 369:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function Name: bsp_fit_interrupts_control
 370:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : 
 371:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : enable -
 372:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Whether to enable or disable the interrupt.
 373:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                pdata -
 374:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Pointer to variable for saves ipl or restore ipl.
 375:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : BSP_INT_SUCCESS -
 376:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Interrupt enabled or disabled.
 377:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                BSP_INT_ERR_INVALID_ARG -
 378:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Invalid argument input.
 379:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                BSP_INT_ERR_INVALID_IPL -
 380:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Invalid IPL input.
 381:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                BSP_INT_ERR_UNSUPPORTED -
 382:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    This processing is not supported. (Executed in user mode.)
 383:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 384:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** static bsp_int_err_t bsp_fit_interrupts_control (bool enable, bsp_int_ctrl_t * pdata)
 385:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
  10                             		.loc 1 385 1 view -0
  11                             		.loc 1 385 1 is_stmt 0 view .LVU1
  12 0000 6E 7A                   		pushm	r7-r10
  13                             	.LCFI0:
 386:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t       err;
  14                             		.loc 1 386 5 is_stmt 1 view .LVU2
 387:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t            pmode;
  15                             		.loc 1 387 5 view .LVU3
 388:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bool                ret;
  16                             		.loc 1 388 5 view .LVU4
 389:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t            ipl_value;
  17                             		.loc 1 389 5 view .LVU5
 390:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 391:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
 392:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if(((uint32_t)NULL != (uint32_t)pdata) && ((uint32_t)FIT_NO_FUNC != (uint32_t)pdata))
  18                             		.loc 1 392 5 view .LVU6
  19                             		.loc 1 392 7 is_stmt 0 view .LVU7
  20 0002 61 02                   		cmp	#0, r2
  21 0004 20 3D                   		beq	.L5
  22                             		.loc 1 392 44 discriminator 1 view .LVU8
  23 0006 74 02 00 00 00 10       		cmp	#0x10000000, r2
  24 000c 20 38                   		beq	.L6
 393:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 394:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Read current processor mode. */
 395:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         pmode = (R_BSP_GET_PSW() & 0x00100000);
  25                             		.loc 1 395 9 is_stmt 1 view .LVU9
  26                             		.loc 1 395 18 is_stmt 0 view .LVU10
  27 000e FD 6A 0A                		mvfc	psw, r10
  28                             		.loc 1 395 15 view .LVU11
  29 0011 77 2A 00 00 10          		and	#0x100000, r10
  30                             	.LVL1:
 396:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 397:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Check current processor mode. */
 398:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (0 == pmode)
  31                             		.loc 1 398 9 is_stmt 1 view .LVU12
  32                             		.loc 1 398 12 is_stmt 0 view .LVU13
  33 0016 21 31                   		bne	.L7
  34 0018 EF 27                   		mov.L	r2, r7
 399:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 400:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = BSP_INT_SUCCESS;
  35                             		.loc 1 400 13 is_stmt 1 view .LVU14
  36                             	.LVL2:
 401:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 402:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (true == enable)
  37                             		.loc 1 402 13 view .LVU15
  38                             		.loc 1 402 16 is_stmt 0 view .LVU16
  39 001a 5B 11                   		movu.B	r1, r1
  40                             		.loc 1 402 16 view .LVU17
  41 001c 61 01                   		cmp	#0, r1
  42 001e 20 0E                   		beq	.L3
 403:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 404:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 ipl_value = pdata->ipl;
  43                             		.loc 1 404 17 is_stmt 1 view .LVU18
  44                             		.loc 1 404 27 is_stmt 0 view .LVU19
  45 0020 EC 21                   		mov.L	[r2], r1
  46                             	.LVL3:
  47                             	.L4:
 405:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 406:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 407:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 408:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                  /* Get the current Processor Interrupt Priority Level (IPL) and save IPL value. */
 409:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 pdata->ipl = R_BSP_CpuInterruptLevelRead();
 410:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 411:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Set IPL to the maximum value to disable all interrupts,
 412:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                  * so the scheduler can not be scheduled in critical region.
 413:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                  * Note: Please set this macro more than IPR for other FIT module interrupts. */
 414:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 ipl_value = BSP_CFG_FIT_IPL_MAX;
 415:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 416:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 417:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (pdata->ipl < BSP_CFG_FIT_IPL_MAX)
  48                             		.loc 1 417 13 is_stmt 1 view .LVU20
  49                             		.loc 1 417 22 is_stmt 0 view .LVU21
  50 0022 EC 77                   		mov.L	[r7], r7
  51                             	.LVL4:
  52                             		.loc 1 417 16 view .LVU22
  53 0024 61 E7                   		cmp	#14, r7
  54 0026 25 10                   		bleu	.L11
 418:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 419:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 ret = R_BSP_CpuInterruptLevelWrite(ipl_value);
 420:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 if (false == ret)
 421:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 {
 422:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                     err = BSP_INT_ERR_INVALID_IPL;
 423:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 }
 424:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 425:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 426:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 427:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_INVALID_IPL;
  55                             		.loc 1 427 21 view .LVU23
  56 0028 66 5A                   		mov.L	#5, r10
  57                             	.LVL5:
  58                             		.loc 1 427 21 view .LVU24
  59 002a 2E 1F                   		bra	.L1
  60                             	.LVL6:
  61                             	.L3:
 409:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  62                             		.loc 1 409 17 is_stmt 1 view .LVU25
 409:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  63                             		.loc 1 409 30 is_stmt 0 view .LVU26
  64 002c 05 00 00 00             		bsr	_R_BSP_CpuInterruptLevelRead
  65                             	.LVL7:
 409:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  66                             		.loc 1 409 28 view .LVU27
  67 0030 E3 71                   		mov.L	r1, [r7]
 414:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
  68                             		.loc 1 414 17 is_stmt 1 view .LVU28
  69                             	.LVL8:
 414:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
  70                             		.loc 1 414 27 is_stmt 0 view .LVU29
  71 0032 66 F1                   		mov.L	#15, r1
  72 0034 2E EE                   		bra	.L4
  73                             	.LVL9:
  74                             	.L11:
 419:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 if (false == ret)
  75                             		.loc 1 419 17 is_stmt 1 view .LVU30
 419:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 if (false == ret)
  76                             		.loc 1 419 23 is_stmt 0 view .LVU31
  77 0036 05 00 00 00             		bsr	_R_BSP_CpuInterruptLevelWrite
  78                             	.LVL10:
 420:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 {
  79                             		.loc 1 420 17 is_stmt 1 view .LVU32
 420:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 {
  80                             		.loc 1 420 20 is_stmt 0 view .LVU33
  81 003a 61 01                   		cmp	#0, r1
  82 003c 21 0D                   		bne	.L1
 422:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 }
  83                             		.loc 1 422 25 view .LVU34
  84 003e 66 5A                   		mov.L	#5, r10
  85                             	.LVL11:
 428:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 429:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 430:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 431:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 432:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = BSP_INT_ERR_UNSUPPORTED;
 433:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 434:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 435:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else
 436:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 437:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 438:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 439:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 440:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     return err;
  86                             		.loc 1 440 5 is_stmt 1 view .LVU35
  87                             		.loc 1 440 12 is_stmt 0 view .LVU36
  88 0040 09                      		bra	.L1
  89                             	.LVL12:
  90                             	.L5:
 437:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
  91                             		.loc 1 437 13 view .LVU37
  92 0041 66 2A                   		mov.L	#2, r10
  93 0043 0E                      		bra	.L1
  94                             	.L6:
  95 0044 66 2A                   		mov.L	#2, r10
  96 0046 0B                      		bra	.L1
  97                             	.LVL13:
  98                             	.L7:
 432:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
  99                             		.loc 1 432 17 view .LVU38
 100 0047 66 3A                   		mov.L	#3, r10
 101                             	.LVL14:
 102                             		.balign 8,3,1
 103                             	.L1:
 441:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function bsp_fit_interrupts_control() */
 104                             		.loc 1 441 1 view .LVU39
 105 0049 EF A1                   		mov.L	r10, r1
 106 004b 3F 7A 04                		rtsd	#16, r7-r10
 107                             	.LFE9:
 109 004e EF 00                   		.section	.text.R_BSP_InterruptRequestEnable,"ax",@progbits
 110                             		.global	_R_BSP_InterruptRequestEnable
 112                             	_R_BSP_InterruptRequestEnable:
 113                             	.LVL15:
 114                             	.LFB3:
  91:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ier_reg_num;
 115                             		.loc 1 91 1 is_stmt 1 view -0
  92:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 116                             		.loc 1 92 5 view .LVU41
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 117                             		.loc 1 93 5 view .LVU42
  94:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 118                             		.loc 1 94 5 view .LVU43
  97:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 119                             		.loc 1 97 5 view .LVU44
  97:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 120                             		.loc 1 97 17 is_stmt 0 view .LVU45
 121 0000 FD 83 15                		shlr	#3, r1, r5
 122                             	.LVL16:
 100:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 123                             		.loc 1 100 5 is_stmt 1 view .LVU46
 103:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 124                             		.loc 1 103 5 view .LVU47
 106:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 125                             		.loc 1 106 5 view .LVU48
 126 0003 66 72                   		mov.L	#7, r2
 127 0005 53 12                   		and	r1, r2
 128                             	.LVL17:
 106:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 129                             		.loc 1 106 5 is_stmt 0 view .LVU49
 130 0007 73 51 00 72 08          		add	#0x87200, r5, r1
 131                             	.LVL18:
 106:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 132                             		.loc 1 106 5 view .LVU50
 133 000c 05 00 00 00             		bsr	_R_BSP_BitSet
 134                             	.LVL19:
 107:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 135                             		.loc 1 107 1 view .LVU51
 136 0010 02                      		rts
 137                             	.LFE3:
 139                             		.section	.text.R_BSP_InterruptRequestDisable,"ax",@progbits
 140                             		.global	_R_BSP_InterruptRequestDisable
 142                             	_R_BSP_InterruptRequestDisable:
 143                             	.LVL20:
 144                             	.LFB4:
 121:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ier_reg_num;
 145                             		.loc 1 121 1 is_stmt 1 view -0
 122:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 146                             		.loc 1 122 5 view .LVU53
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 147                             		.loc 1 123 5 view .LVU54
 124:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 148                             		.loc 1 124 5 view .LVU55
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 149                             		.loc 1 127 5 view .LVU56
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 150                             		.loc 1 127 17 is_stmt 0 view .LVU57
 151 0000 FD 83 15                		shlr	#3, r1, r5
 152                             	.LVL21:
 130:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 153                             		.loc 1 130 5 is_stmt 1 view .LVU58
 133:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 154                             		.loc 1 133 5 view .LVU59
 136:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 155                             		.loc 1 136 5 view .LVU60
 156 0003 66 72                   		mov.L	#7, r2
 157 0005 53 12                   		and	r1, r2
 158                             	.LVL22:
 136:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 159                             		.loc 1 136 5 is_stmt 0 view .LVU61
 160 0007 73 51 00 72 08          		add	#0x87200, r5, r1
 161                             	.LVL23:
 136:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 162                             		.loc 1 136 5 view .LVU62
 163 000c 05 00 00 00             		bsr	_R_BSP_BitClear
 164                             	.LVL24:
 137:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 165                             		.loc 1 137 1 view .LVU63
 166 0010 02                      		rts
 167                             	.LFE4:
 169                             		.section	.text.bsp_gr_int_enable_disable,"ax",@progbits
 171                             	_bsp_gr_int_enable_disable:
 172                             	.LVL25:
 173                             	.LFB10:
 442:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 443:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT
 444:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 445:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function Name: bsp_gr_int_enable_disable
 446:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Either enables or disables a group interrupt. If a group interrupt is called multi
 447:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                enabled then it will use the highest given IPL. A group interrupt will only be dis
 448:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                interrupt sources for that group are already disabled.
 449:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : vector -
 450:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    An interrupt source inside the group that is to be enabled/disabled.
 451:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                enable -
 452:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Whether to enable or disable the interrupt.
 453:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                ipl -
 454:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    If enabling a group interrupt, what IPL to use.
 455:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : BSP_INT_SUCCESS -
 456:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Interrupt enabled or disabled.
 457:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                BSP_INT_ERR_INVALID_ARG -
 458:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Invalid IPL or vector
 459:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                BSP_INT_ERR_GROUP_STILL_ENABLED -
 460:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Not all group interrupts were disabled so group interrupt was not disabled.
 461:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 462:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** static bsp_int_err_t bsp_gr_int_enable_disable (bsp_int_src_t vector, bool enable, uint32_t ipl)
 463:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 174                             		.loc 1 463 1 is_stmt 1 view -0
 175                             		.loc 1 463 1 is_stmt 0 view .LVU65
 176 0000 7E A7                   		push.l	r7
 177                             	.LCFI1:
 464:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err = BSP_INT_SUCCESS;
 178                             		.loc 1 464 5 is_stmt 1 view .LVU66
 179                             	.LVL26:
 465:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 466:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #if BSP_CFG_PARAM_CHECKING_ENABLE == 1
 467:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If interrupt is going to be enabled, verify that IPL is valid. */
 468:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((true == enable) && ((BSP_MCU_IPL_MIN == ipl) || (ipl > BSP_MCU_IPL_MAX)))
 180                             		.loc 1 468 5 view .LVU67
 181                             		.loc 1 468 8 is_stmt 0 view .LVU68
 182 0002 5B 27                   		movu.B	r2, r7
 183 0004 61 07                   		cmp	#0, r7
 184 0006 20 0C                   		beq	.L15
 185                             		.loc 1 468 55 discriminator 1 view .LVU69
 186 0008 71 37 FF                		add	#-1, r3, r7
 187                             		.loc 1 468 26 discriminator 1 view .LVU70
 188 000b 61 E7                   		cmp	#14, r7
 189 000d 25 05 38 E7 03          		bgtu	.L44
 190                             	.L15:
 191 0012 EF 37                   		mov.L	r3, r7
 469:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 470:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         return BSP_INT_ERR_INVALID_ARG;
 471:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 472:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 473:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 474:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((vector > BSP_INT_SRC_GR_INT_IE0_TOP) && (vector < BSP_INT_SRC_GR_INT_BE0_TOP))
 192                             		.loc 1 474 5 is_stmt 1 view .LVU71
 193                             		.loc 1 474 8 is_stmt 0 view .LVU72
 194 0014 75 51 16                		cmp	#22, r1
 195 0017 20 26                   		beq	.L54
 475:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 476:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group IE0. */
 477:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_IE0
 478:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 479:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 480:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPIE0));
 481:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 482:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 483:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPIE0)  = 0;
 484:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 485:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 486:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPIE0) = (uint8_t)((ipl > IPR(ICU, GROUPIE0)) ? ipl : IPR(ICU, GROUPIE0));
 487:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPIE0));
 488:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 489:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 490:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 491:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 492:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENIE0.LONG)
 493:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 494:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPIE0));
 495:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 496:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 497:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPIE0) = 0;
 498:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 499:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 500:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 501:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 502:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 503:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 504:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_IE0 */
 505:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 506:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_IE0 */
 507:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 508:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_BE0_TOP) && (vector < BSP_INT_SRC_GR_INT_BL0_TOP))
 196                             		.loc 1 508 10 is_stmt 1 view .LVU73
 197                             		.loc 1 508 52 is_stmt 0 view .LVU74
 198 0019 71 15 E8                		add	#-24, r1, r5
 199                             		.loc 1 508 13 view .LVU75
 200 001c 61 25                   		cmp	#2, r5
 201 001e 25 05 38 0D 01          		bgtu	.L21
 509:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 510:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group BE0. */
 511:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_BE0
 512:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 202                             		.loc 1 512 9 is_stmt 1 view .LVU76
 203                             		.loc 1 512 12 is_stmt 0 view .LVU77
 204 0023 5B 22                   		movu.B	r2, r2
 205                             		.loc 1 512 12 view .LVU78
 206 0025 61 02                   		cmp	#0, r2
 207 0027 3B 99 00                		bne	.L55
 513:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 514:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBE0));
 515:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 516:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 517:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPBE0)  = 0;
 518:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 519:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 520:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPBE0) = (uint8_t)((ipl > IPR(ICU, GROUPBE0)) ? ipl : IPR(ICU, GROUPBE0));
 521:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 522:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 523:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 524:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 525:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 526:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENBE0.LONG)
 208                             		.loc 1 526 13 is_stmt 1 view .LVU79
 209                             		.loc 1 526 32 is_stmt 0 view .LVU80
 210 002a FB 7E 00 70 08          		mov.L	#0x87000, r7
 211 002f EE 77 90 01             		mov.L	1600[r7], r7
 212                             		.loc 1 526 16 view .LVU81
 213 0033 61 07                   		cmp	#0, r7
 214 0035 3A DC 00                		beq	.L56
 527:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 528:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBE0));
 529:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 530:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 531:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPBE0) = 0;
 532:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 533:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 534:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 535:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 215                             		.loc 1 535 21 view .LVU82
 216 0038 66 47                   		mov.L	#4, r7
 217 003a 38 BE 03                		bra	.L14
 218                             	.L54:
 478:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 219                             		.loc 1 478 9 is_stmt 1 view .LVU83
 478:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 220                             		.loc 1 478 12 is_stmt 0 view .LVU84
 221 003d 5B 22                   		movu.B	r2, r2
 478:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 222                             		.loc 1 478 12 view .LVU85
 223 003f 61 02                   		cmp	#0, r2
 224 0041 21 14                   		bne	.L57
 492:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 225                             		.loc 1 492 13 is_stmt 1 view .LVU86
 492:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 226                             		.loc 1 492 32 is_stmt 0 view .LVU87
 227 0043 FB 7E 00 70 08          		mov.L	#0x87000, r7
 228 0048 EE 77 6D 01             		mov.L	1460[r7], r7
 492:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 229                             		.loc 1 492 16 view .LVU88
 230 004c 61 07                   		cmp	#0, r7
 231 004e 20 56                   		beq	.L58
 501:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 232                             		.loc 1 501 21 view .LVU89
 233 0050 66 47                   		mov.L	#4, r7
 234 0052 38 A6 03                		bra	.L14
 235                             	.L57:
 480:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 236                             		.loc 1 480 13 is_stmt 1 view .LVU90
 237 0055 75 41 11                		mov.L	#17, r1
 238                             	.LVL27:
 480:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 239                             		.loc 1 480 13 is_stmt 0 view .LVU91
 240 0058 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 241                             	.LVL28:
 483:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 242                             		.loc 1 483 13 is_stmt 1 view .LVU92
 483:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 243                             		.loc 1 483 32 is_stmt 0 view .LVU93
 244 005c FB 5E 00 70 08          		mov.L	#0x87000, r5
 245 0061 8C 5C                   		mov.B	17[r5], r4
 246 0063 7A 04                   		bclr	#0, r4
 247 0065 84 5C                   		mov.B	r4, 17[r5]
 486:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPIE0));
 248                             		.loc 1 486 13 is_stmt 1 view .LVU94
 486:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPIE0));
 249                             		.loc 1 486 51 is_stmt 0 view .LVU95
 250 0067 CE 55 00 03             		mov.B	768[r5], r5
 251 006b 64 F5                   		and #15, r5
 486:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPIE0));
 252                             		.loc 1 486 34 view .LVU96
 253 006d 47 75                   		cmp	r7, r5
 254 006f 22 28                   		bgeu	.L19
 486:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPIE0));
 255                             		.loc 1 486 34 discriminator 1 view .LVU97
 256 0071 66 F5                   		mov.L	#15, r5
 257 0073 53 75                   		and	r7, r5
 258                             	.LVL29:
 259                             	.L20:
 486:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPIE0));
 260                             		.loc 1 486 32 discriminator 4 view .LVU98
 261 0075 FB 3E 00 70 08          		mov.L	#0x87000, r3
 262 007a CE 34 00 03             		mov.B	768[r3], r4
 263 007e 64 F5                   		and #15, r5
 264 0080 FB 76 F0                		mov.L	#-16, r7
 265 0083 53 47                   		and	r4, r7
 266 0085 57 57                   		or	r5, r7
 267 0087 CB 37 00 03             		mov.B	r7, 768[r3]
 487:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 268                             		.loc 1 487 13 is_stmt 1 discriminator 4 view .LVU99
 269 008b 75 41 11                		mov.L	#17, r1
 270 008e 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 271                             	.LVL30:
 464:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 272                             		.loc 1 464 19 is_stmt 0 discriminator 4 view .LVU100
 273 0092 66 07                   		mov.L	#0, r7
 274 0094 38 64 03                		bra	.L14
 275                             	.LVL31:
 276                             	.L19:
 486:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPIE0));
 277                             		.loc 1 486 34 discriminator 2 view .LVU101
 278 0097 FB 7E 00 70 08          		mov.L	#0x87000, r7
 279                             	.LVL32:
 486:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPIE0));
 280                             		.loc 1 486 34 discriminator 2 view .LVU102
 281 009c CE 75 00 03             		mov.B	768[r7], r5
 282 00a0 64 F5                   		and #15, r5
 283 00a2 2E D3                   		bra	.L20
 284                             	.LVL33:
 285                             	.L58:
 494:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 286                             		.loc 1 494 17 is_stmt 1 view .LVU103
 287 00a4 75 41 11                		mov.L	#17, r1
 288                             	.LVL34:
 494:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 289                             		.loc 1 494 17 is_stmt 0 view .LVU104
 290 00a7 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 291                             	.LVL35:
 497:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 292                             		.loc 1 497 17 is_stmt 1 view .LVU105
 497:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 293                             		.loc 1 497 36 is_stmt 0 view .LVU106
 294 00ab FB 5E 00 70 08          		mov.L	#0x87000, r5
 295 00b0 CE 53 00 03             		mov.B	768[r5], r3
 296 00b4 FB 46 F0                		mov.L	#-16, r4
 297 00b7 53 34                   		and	r3, r4
 298 00b9 CB 54 00 03             		mov.B	r4, 768[r5]
 299 00bd 38 3B 03                		bra	.L14
 300                             	.LVL36:
 301                             	.L55:
 514:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 302                             		.loc 1 514 13 is_stmt 1 view .LVU107
 303 00c0 75 41 6A                		mov.L	#0x6a, r1
 304                             	.LVL37:
 514:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 305                             		.loc 1 514 13 is_stmt 0 view .LVU108
 306 00c3 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 307                             	.LVL38:
 517:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 308                             		.loc 1 517 13 is_stmt 1 view .LVU109
 517:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 309                             		.loc 1 517 32 is_stmt 0 view .LVU110
 310 00c7 FB 5E 00 70 08          		mov.L	#0x87000, r5
 311 00cc CD 54 6A                		mov.B	106[r5], r4
 312 00cf 7A 04                   		bclr	#0, r4
 313 00d1 C7 54 6A                		mov.B	r4, 106[r5]
 520:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 314                             		.loc 1 520 13 is_stmt 1 view .LVU111
 520:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 315                             		.loc 1 520 51 is_stmt 0 view .LVU112
 316 00d4 CE 55 6A 03             		mov.B	874[r5], r5
 317 00d8 64 F5                   		and #15, r5
 520:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 318                             		.loc 1 520 34 view .LVU113
 319 00da 47 75                   		cmp	r7, r5
 320 00dc 22 28                   		bgeu	.L23
 520:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 321                             		.loc 1 520 34 discriminator 1 view .LVU114
 322 00de 66 F5                   		mov.L	#15, r5
 323 00e0 53 75                   		and	r7, r5
 324                             	.LVL39:
 325                             	.L24:
 520:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 326                             		.loc 1 520 32 discriminator 4 view .LVU115
 327 00e2 FB 3E 00 70 08          		mov.L	#0x87000, r3
 328 00e7 CE 34 6A 03             		mov.B	874[r3], r4
 329 00eb 64 F5                   		and #15, r5
 330 00ed FB 76 F0                		mov.L	#-16, r7
 331 00f0 53 47                   		and	r4, r7
 332 00f2 57 57                   		or	r5, r7
 333 00f4 CB 37 6A 03             		mov.B	r7, 874[r3]
 521:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 334                             		.loc 1 521 13 is_stmt 1 discriminator 4 view .LVU116
 335 00f8 75 41 6A                		mov.L	#0x6a, r1
 336 00fb 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 337                             	.LVL40:
 464:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 338                             		.loc 1 464 19 is_stmt 0 discriminator 4 view .LVU117
 339 00ff 66 07                   		mov.L	#0, r7
 340 0101 38 F7 02                		bra	.L14
 341                             	.LVL41:
 342                             	.L23:
 520:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 343                             		.loc 1 520 34 discriminator 2 view .LVU118
 344 0104 FB 7E 00 70 08          		mov.L	#0x87000, r7
 345                             	.LVL42:
 520:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 346                             		.loc 1 520 34 discriminator 2 view .LVU119
 347 0109 CE 75 6A 03             		mov.B	874[r7], r5
 348 010d 64 F5                   		and #15, r5
 349 010f 2E D3                   		bra	.L24
 350                             	.LVL43:
 351                             	.L56:
 528:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 352                             		.loc 1 528 17 is_stmt 1 view .LVU120
 353 0111 75 41 6A                		mov.L	#0x6a, r1
 354                             	.LVL44:
 528:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 355                             		.loc 1 528 17 is_stmt 0 view .LVU121
 356 0114 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 357                             	.LVL45:
 531:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 358                             		.loc 1 531 17 is_stmt 1 view .LVU122
 531:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 359                             		.loc 1 531 36 is_stmt 0 view .LVU123
 360 0118 FB 5E 00 70 08          		mov.L	#0x87000, r5
 361 011d CE 53 6A 03             		mov.B	874[r5], r3
 362 0121 FB 46 F0                		mov.L	#-16, r4
 363 0124 53 34                   		and	r3, r4
 364 0126 CB 54 6A 03             		mov.B	r4, 874[r5]
 365 012a 38 CE 02                		bra	.L14
 366                             	.LVL46:
 367                             	.L21:
 536:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 537:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 538:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_BE0 */
 539:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 540:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_BE0 */
 541:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 542:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_BL0_TOP) && (vector < BSP_INT_SRC_GR_INT_BL1_TOP))
 368                             		.loc 1 542 10 is_stmt 1 view .LVU124
 369                             		.loc 1 542 52 is_stmt 0 view .LVU125
 370 012d 71 15 E4                		add	#-28, r1, r5
 371                             		.loc 1 542 13 view .LVU126
 372 0130 75 55 1A                		cmp	#26, r5
 373 0133 25 05 38 88 00          		bgtu	.L25
 543:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 544:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group BL0. */
 545:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_BL0
 546:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 374                             		.loc 1 546 9 is_stmt 1 view .LVU127
 375                             		.loc 1 546 12 is_stmt 0 view .LVU128
 376 0138 5B 22                   		movu.B	r2, r2
 377                             		.loc 1 546 12 view .LVU129
 378 013a 61 02                   		cmp	#0, r2
 379 013c 21 14                   		bne	.L59
 547:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 548:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL0));
 549:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 550:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 551:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPBL0)  = 0;
 552:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 553:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 554:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPBL0) = (uint8_t)((ipl > IPR(ICU, GROUPBL0)) ? ipl : IPR(ICU, GROUPBL0));
 555:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL0));
 556:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 557:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 558:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 559:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 560:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENBL0.LONG)
 380                             		.loc 1 560 13 is_stmt 1 view .LVU130
 381                             		.loc 1 560 32 is_stmt 0 view .LVU131
 382 013e FB 7E 00 70 08          		mov.L	#0x87000, r7
 383 0143 EE 77 9C 01             		mov.L	1648[r7], r7
 384                             		.loc 1 560 16 view .LVU132
 385 0147 61 07                   		cmp	#0, r7
 386 0149 20 58                   		beq	.L60
 561:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 562:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL0));
 563:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 564:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 565:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPBL0) = 0;
 566:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 567:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 568:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 569:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 387                             		.loc 1 569 21 view .LVU133
 388 014b 66 47                   		mov.L	#4, r7
 389 014d 38 AB 02                		bra	.L14
 390                             	.L59:
 548:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 391                             		.loc 1 548 13 is_stmt 1 view .LVU134
 392 0150 75 41 6E                		mov.L	#0x6e, r1
 393                             	.LVL47:
 548:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 394                             		.loc 1 548 13 is_stmt 0 view .LVU135
 395 0153 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 396                             	.LVL48:
 551:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 397                             		.loc 1 551 13 is_stmt 1 view .LVU136
 551:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 398                             		.loc 1 551 32 is_stmt 0 view .LVU137
 399 0157 FB 5E 00 70 08          		mov.L	#0x87000, r5
 400 015c CD 54 6E                		mov.B	110[r5], r4
 401 015f 7A 04                   		bclr	#0, r4
 402 0161 C7 54 6E                		mov.B	r4, 110[r5]
 554:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL0));
 403                             		.loc 1 554 13 is_stmt 1 view .LVU138
 554:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL0));
 404                             		.loc 1 554 51 is_stmt 0 view .LVU139
 405 0164 CE 55 6E 03             		mov.B	878[r5], r5
 406 0168 64 F5                   		and #15, r5
 554:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL0));
 407                             		.loc 1 554 34 view .LVU140
 408 016a 47 75                   		cmp	r7, r5
 409 016c 22 28                   		bgeu	.L27
 554:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL0));
 410                             		.loc 1 554 34 discriminator 1 view .LVU141
 411 016e 66 F5                   		mov.L	#15, r5
 412 0170 53 75                   		and	r7, r5
 413                             	.LVL49:
 414                             	.L28:
 554:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL0));
 415                             		.loc 1 554 32 discriminator 4 view .LVU142
 416 0172 FB 3E 00 70 08          		mov.L	#0x87000, r3
 417 0177 CE 34 6E 03             		mov.B	878[r3], r4
 418 017b 64 F5                   		and #15, r5
 419 017d FB 76 F0                		mov.L	#-16, r7
 420 0180 53 47                   		and	r4, r7
 421 0182 57 57                   		or	r5, r7
 422 0184 CB 37 6E 03             		mov.B	r7, 878[r3]
 555:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 423                             		.loc 1 555 13 is_stmt 1 discriminator 4 view .LVU143
 424 0188 75 41 6E                		mov.L	#0x6e, r1
 425 018b 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 426                             	.LVL50:
 464:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 427                             		.loc 1 464 19 is_stmt 0 discriminator 4 view .LVU144
 428 018f 66 07                   		mov.L	#0, r7
 429 0191 38 67 02                		bra	.L14
 430                             	.LVL51:
 431                             	.L27:
 554:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL0));
 432                             		.loc 1 554 34 discriminator 2 view .LVU145
 433 0194 FB 7E 00 70 08          		mov.L	#0x87000, r7
 434                             	.LVL52:
 554:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL0));
 435                             		.loc 1 554 34 discriminator 2 view .LVU146
 436 0199 CE 75 6E 03             		mov.B	878[r7], r5
 437 019d 64 F5                   		and #15, r5
 438 019f 2E D3                   		bra	.L28
 439                             	.LVL53:
 440                             	.L60:
 562:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 441                             		.loc 1 562 17 is_stmt 1 view .LVU147
 442 01a1 75 41 6E                		mov.L	#0x6e, r1
 443                             	.LVL54:
 562:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 444                             		.loc 1 562 17 is_stmt 0 view .LVU148
 445 01a4 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 446                             	.LVL55:
 565:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 447                             		.loc 1 565 17 is_stmt 1 view .LVU149
 565:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 448                             		.loc 1 565 36 is_stmt 0 view .LVU150
 449 01a8 FB 5E 00 70 08          		mov.L	#0x87000, r5
 450 01ad CE 53 6E 03             		mov.B	878[r5], r3
 451 01b1 FB 46 F0                		mov.L	#-16, r4
 452 01b4 53 34                   		and	r3, r4
 453 01b6 CB 54 6E 03             		mov.B	r4, 878[r5]
 454 01ba 38 3E 02                		bra	.L14
 455                             	.LVL56:
 456                             	.L25:
 570:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 571:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 572:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_BL0 */
 573:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 574:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_BL0 */
 575:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 576:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_BL1_TOP) && (vector < BSP_INT_SRC_GR_INT_BL2_TOP))
 457                             		.loc 1 576 10 is_stmt 1 view .LVU151
 458                             		.loc 1 576 52 is_stmt 0 view .LVU152
 459 01bd 71 15 C8                		add	#-56, r1, r5
 460                             		.loc 1 576 13 view .LVU153
 461 01c0 75 55 15                		cmp	#21, r5
 462 01c3 25 05 38 88 00          		bgtu	.L29
 577:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 578:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group BL1. */
 579:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_BL1
 580:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 463                             		.loc 1 580 9 is_stmt 1 view .LVU154
 464                             		.loc 1 580 12 is_stmt 0 view .LVU155
 465 01c8 5B 22                   		movu.B	r2, r2
 466                             		.loc 1 580 12 view .LVU156
 467 01ca 61 02                   		cmp	#0, r2
 468 01cc 21 14                   		bne	.L61
 581:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 582:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL1));
 583:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 584:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 585:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPBL1)  = 0;
 586:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 587:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 588:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPBL1) = (uint8_t)((ipl > IPR(ICU, GROUPBL1)) ? ipl : IPR(ICU, GROUPBL1));
 589:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 590:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 591:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 592:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 593:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 594:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENBL1.LONG)
 469                             		.loc 1 594 13 is_stmt 1 view .LVU157
 470                             		.loc 1 594 32 is_stmt 0 view .LVU158
 471 01ce FB 7E 00 70 08          		mov.L	#0x87000, r7
 472 01d3 EE 77 9D 01             		mov.L	1652[r7], r7
 473                             		.loc 1 594 16 view .LVU159
 474 01d7 61 07                   		cmp	#0, r7
 475 01d9 20 58                   		beq	.L62
 595:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 596:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL1));
 597:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 598:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 599:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPBL1) = 0;
 600:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 601:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 602:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 603:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 476                             		.loc 1 603 21 view .LVU160
 477 01db 66 47                   		mov.L	#4, r7
 478 01dd 38 1B 02                		bra	.L14
 479                             	.L61:
 582:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 480                             		.loc 1 582 13 is_stmt 1 view .LVU161
 481 01e0 75 41 6F                		mov.L	#0x6f, r1
 482                             	.LVL57:
 582:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 483                             		.loc 1 582 13 is_stmt 0 view .LVU162
 484 01e3 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 485                             	.LVL58:
 585:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 486                             		.loc 1 585 13 is_stmt 1 view .LVU163
 585:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 487                             		.loc 1 585 32 is_stmt 0 view .LVU164
 488 01e7 FB 5E 00 70 08          		mov.L	#0x87000, r5
 489 01ec CD 54 6F                		mov.B	111[r5], r4
 490 01ef 7A 04                   		bclr	#0, r4
 491 01f1 C7 54 6F                		mov.B	r4, 111[r5]
 588:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 492                             		.loc 1 588 13 is_stmt 1 view .LVU165
 588:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 493                             		.loc 1 588 51 is_stmt 0 view .LVU166
 494 01f4 CE 55 6F 03             		mov.B	879[r5], r5
 495 01f8 64 F5                   		and #15, r5
 588:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 496                             		.loc 1 588 34 view .LVU167
 497 01fa 47 75                   		cmp	r7, r5
 498 01fc 22 28                   		bgeu	.L31
 588:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 499                             		.loc 1 588 34 discriminator 1 view .LVU168
 500 01fe 66 F5                   		mov.L	#15, r5
 501 0200 53 75                   		and	r7, r5
 502                             	.LVL59:
 503                             	.L32:
 588:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 504                             		.loc 1 588 32 discriminator 4 view .LVU169
 505 0202 FB 3E 00 70 08          		mov.L	#0x87000, r3
 506 0207 CE 34 6F 03             		mov.B	879[r3], r4
 507 020b 64 F5                   		and #15, r5
 508 020d FB 76 F0                		mov.L	#-16, r7
 509 0210 53 47                   		and	r4, r7
 510 0212 57 57                   		or	r5, r7
 511 0214 CB 37 6F 03             		mov.B	r7, 879[r3]
 589:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 512                             		.loc 1 589 13 is_stmt 1 discriminator 4 view .LVU170
 513 0218 75 41 6F                		mov.L	#0x6f, r1
 514 021b 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 515                             	.LVL60:
 464:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 516                             		.loc 1 464 19 is_stmt 0 discriminator 4 view .LVU171
 517 021f 66 07                   		mov.L	#0, r7
 518 0221 38 D7 01                		bra	.L14
 519                             	.LVL61:
 520                             	.L31:
 588:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 521                             		.loc 1 588 34 discriminator 2 view .LVU172
 522 0224 FB 7E 00 70 08          		mov.L	#0x87000, r7
 523                             	.LVL62:
 588:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 524                             		.loc 1 588 34 discriminator 2 view .LVU173
 525 0229 CE 75 6F 03             		mov.B	879[r7], r5
 526 022d 64 F5                   		and #15, r5
 527 022f 2E D3                   		bra	.L32
 528                             	.LVL63:
 529                             	.L62:
 596:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 530                             		.loc 1 596 17 is_stmt 1 view .LVU174
 531 0231 75 41 6F                		mov.L	#0x6f, r1
 532                             	.LVL64:
 596:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 533                             		.loc 1 596 17 is_stmt 0 view .LVU175
 534 0234 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 535                             	.LVL65:
 599:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 536                             		.loc 1 599 17 is_stmt 1 view .LVU176
 599:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 537                             		.loc 1 599 36 is_stmt 0 view .LVU177
 538 0238 FB 5E 00 70 08          		mov.L	#0x87000, r5
 539 023d CE 53 6F 03             		mov.B	879[r5], r3
 540 0241 FB 46 F0                		mov.L	#-16, r4
 541 0244 53 34                   		and	r3, r4
 542 0246 CB 54 6F 03             		mov.B	r4, 879[r5]
 543 024a 38 AE 01                		bra	.L14
 544                             	.LVL66:
 545                             	.L29:
 604:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 605:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 606:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_BL1 */
 607:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 608:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_BL1 */
 609:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 610:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_BL2_TOP) && (vector < BSP_INT_SRC_GR_INT_AL0_TOP))
 546                             		.loc 1 610 10 is_stmt 1 view .LVU178
 547                             		.loc 1 610 52 is_stmt 0 view .LVU179
 548 024d 71 15 B1                		add	#-79, r1, r5
 549                             		.loc 1 610 13 view .LVU180
 550 0250 61 35                   		cmp	#3, r5
 551 0252 25 05 38 88 00          		bgtu	.L33
 611:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 612:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group BL2. */
 613:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_BL2
 614:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 552                             		.loc 1 614 9 is_stmt 1 view .LVU181
 553                             		.loc 1 614 12 is_stmt 0 view .LVU182
 554 0257 5B 22                   		movu.B	r2, r2
 555                             		.loc 1 614 12 view .LVU183
 556 0259 61 02                   		cmp	#0, r2
 557 025b 21 14                   		bne	.L63
 615:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 616:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL2));
 617:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 618:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 619:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPBL2)  = 0;
 620:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 621:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 622:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPBL2) = (uint8_t)((ipl > IPR(ICU, GROUPBL2)) ? ipl : IPR(ICU, GROUPBL2));
 623:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 624:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 625:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 626:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 627:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 628:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENBL2.LONG)
 558                             		.loc 1 628 13 is_stmt 1 view .LVU184
 559                             		.loc 1 628 32 is_stmt 0 view .LVU185
 560 025d FB 7E 00 70 08          		mov.L	#0x87000, r7
 561 0262 EE 77 9E 01             		mov.L	1656[r7], r7
 562                             		.loc 1 628 16 view .LVU186
 563 0266 61 07                   		cmp	#0, r7
 564 0268 20 58                   		beq	.L64
 629:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 630:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL2));
 631:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 632:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 633:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPBL2) = 0;
 634:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 635:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 636:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 637:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 565                             		.loc 1 637 21 view .LVU187
 566 026a 66 47                   		mov.L	#4, r7
 567 026c 38 8C 01                		bra	.L14
 568                             	.L63:
 616:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 569                             		.loc 1 616 13 is_stmt 1 view .LVU188
 570 026f 75 41 6B                		mov.L	#0x6b, r1
 571                             	.LVL67:
 616:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 572                             		.loc 1 616 13 is_stmt 0 view .LVU189
 573 0272 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 574                             	.LVL68:
 619:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 575                             		.loc 1 619 13 is_stmt 1 view .LVU190
 619:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 576                             		.loc 1 619 32 is_stmt 0 view .LVU191
 577 0276 FB 5E 00 70 08          		mov.L	#0x87000, r5
 578 027b CD 54 6B                		mov.B	107[r5], r4
 579 027e 7A 04                   		bclr	#0, r4
 580 0280 C7 54 6B                		mov.B	r4, 107[r5]
 622:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 581                             		.loc 1 622 13 is_stmt 1 view .LVU192
 622:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 582                             		.loc 1 622 51 is_stmt 0 view .LVU193
 583 0283 CE 55 6B 03             		mov.B	875[r5], r5
 584 0287 64 F5                   		and #15, r5
 622:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 585                             		.loc 1 622 34 view .LVU194
 586 0289 47 75                   		cmp	r7, r5
 587 028b 22 28                   		bgeu	.L35
 622:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 588                             		.loc 1 622 34 discriminator 1 view .LVU195
 589 028d 66 F5                   		mov.L	#15, r5
 590 028f 53 75                   		and	r7, r5
 591                             	.LVL69:
 592                             	.L36:
 622:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 593                             		.loc 1 622 32 discriminator 4 view .LVU196
 594 0291 FB 3E 00 70 08          		mov.L	#0x87000, r3
 595 0296 CE 34 6B 03             		mov.B	875[r3], r4
 596 029a 66 F7                   		mov.L	#15, r7
 597 029c 53 57                   		and	r5, r7
 598 029e 75 24 F0                		and #-16, r4
 599 02a1 57 47                   		or	r4, r7
 600 02a3 CB 37 6B 03             		mov.B	r7, 875[r3]
 623:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 601                             		.loc 1 623 13 is_stmt 1 discriminator 4 view .LVU197
 602 02a7 75 41 6B                		mov.L	#0x6b, r1
 603 02aa 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 604                             	.LVL70:
 464:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 605                             		.loc 1 464 19 is_stmt 0 discriminator 4 view .LVU198
 606 02ae 66 07                   		mov.L	#0, r7
 607 02b0 38 48 01                		bra	.L14
 608                             	.LVL71:
 609                             	.L35:
 622:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 610                             		.loc 1 622 34 discriminator 2 view .LVU199
 611 02b3 FB 7E 00 70 08          		mov.L	#0x87000, r7
 612                             	.LVL72:
 622:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 613                             		.loc 1 622 34 discriminator 2 view .LVU200
 614 02b8 CE 75 6B 03             		mov.B	875[r7], r5
 615 02bc 64 F5                   		and #15, r5
 616 02be 2E D3                   		bra	.L36
 617                             	.LVL73:
 618                             	.L64:
 630:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 619                             		.loc 1 630 17 is_stmt 1 view .LVU201
 620 02c0 75 41 6B                		mov.L	#0x6b, r1
 621                             	.LVL74:
 630:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 622                             		.loc 1 630 17 is_stmt 0 view .LVU202
 623 02c3 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 624                             	.LVL75:
 633:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 625                             		.loc 1 633 17 is_stmt 1 view .LVU203
 633:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 626                             		.loc 1 633 36 is_stmt 0 view .LVU204
 627 02c7 FB 5E 00 70 08          		mov.L	#0x87000, r5
 628 02cc CE 53 6B 03             		mov.B	875[r5], r3
 629 02d0 FB 46 F0                		mov.L	#-16, r4
 630 02d3 53 34                   		and	r3, r4
 631 02d5 CB 54 6B 03             		mov.B	r4, 875[r5]
 632 02d9 38 1F 01                		bra	.L14
 633                             	.LVL76:
 634                             	.L33:
 638:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 639:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 640:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_BL2 */
 641:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 642:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_BL2 */
 643:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 644:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_AL0_TOP) && (vector < BSP_INT_SRC_GR_INT_AL1_TOP))
 635                             		.loc 1 644 10 is_stmt 1 view .LVU205
 636                             		.loc 1 644 52 is_stmt 0 view .LVU206
 637 02dc 71 15 AC                		add	#-84, r1, r5
 638                             		.loc 1 644 13 view .LVU207
 639 02df 61 F5                   		cmp	#15, r5
 640 02e1 25 05 38 88 00          		bgtu	.L37
 645:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 646:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group AL0. */
 647:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_AL0
 648:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 641                             		.loc 1 648 9 is_stmt 1 view .LVU208
 642                             		.loc 1 648 12 is_stmt 0 view .LVU209
 643 02e6 5B 22                   		movu.B	r2, r2
 644                             		.loc 1 648 12 view .LVU210
 645 02e8 61 02                   		cmp	#0, r2
 646 02ea 21 14                   		bne	.L65
 649:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 650:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPAL0));
 651:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 652:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 653:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPAL0)  = 0;
 654:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 655:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 656:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPAL0) = (uint8_t)((ipl > IPR(ICU, GROUPAL0)) ? ipl : IPR(ICU, GROUPAL0));
 657:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 658:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 659:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 660:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 661:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 662:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENAL0.LONG)
 647                             		.loc 1 662 13 is_stmt 1 view .LVU211
 648                             		.loc 1 662 32 is_stmt 0 view .LVU212
 649 02ec FB 7E 00 70 08          		mov.L	#0x87000, r7
 650 02f1 EE 77 1C 02             		mov.L	2160[r7], r7
 651                             		.loc 1 662 16 view .LVU213
 652 02f5 61 07                   		cmp	#0, r7
 653 02f7 20 58                   		beq	.L66
 663:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 664:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPAL0));
 665:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 666:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 667:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPAL0) = 0;
 668:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 669:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 670:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 671:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 654                             		.loc 1 671 21 view .LVU214
 655 02f9 66 47                   		mov.L	#4, r7
 656 02fb 38 FD 00                		bra	.L14
 657                             	.L65:
 650:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 658                             		.loc 1 650 13 is_stmt 1 view .LVU215
 659 02fe 75 41 70                		mov.L	#0x70, r1
 660                             	.LVL77:
 650:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 661                             		.loc 1 650 13 is_stmt 0 view .LVU216
 662 0301 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 663                             	.LVL78:
 653:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 664                             		.loc 1 653 13 is_stmt 1 view .LVU217
 653:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 665                             		.loc 1 653 32 is_stmt 0 view .LVU218
 666 0305 FB 5E 00 70 08          		mov.L	#0x87000, r5
 667 030a CD 54 70                		mov.B	112[r5], r4
 668 030d 7A 04                   		bclr	#0, r4
 669 030f C7 54 70                		mov.B	r4, 112[r5]
 656:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 670                             		.loc 1 656 13 is_stmt 1 view .LVU219
 656:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 671                             		.loc 1 656 51 is_stmt 0 view .LVU220
 672 0312 CE 55 70 03             		mov.B	880[r5], r5
 673 0316 64 F5                   		and #15, r5
 656:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 674                             		.loc 1 656 34 view .LVU221
 675 0318 47 75                   		cmp	r7, r5
 676 031a 22 28                   		bgeu	.L39
 656:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 677                             		.loc 1 656 34 discriminator 1 view .LVU222
 678 031c 66 F5                   		mov.L	#15, r5
 679 031e 53 75                   		and	r7, r5
 680                             	.LVL79:
 681                             	.L40:
 656:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 682                             		.loc 1 656 32 discriminator 4 view .LVU223
 683 0320 FB 3E 00 70 08          		mov.L	#0x87000, r3
 684 0325 CE 34 70 03             		mov.B	880[r3], r4
 685 0329 66 F7                   		mov.L	#15, r7
 686 032b 53 57                   		and	r5, r7
 687 032d 75 24 F0                		and #-16, r4
 688 0330 57 47                   		or	r4, r7
 689 0332 CB 37 70 03             		mov.B	r7, 880[r3]
 657:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 690                             		.loc 1 657 13 is_stmt 1 discriminator 4 view .LVU224
 691 0336 75 41 70                		mov.L	#0x70, r1
 692 0339 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 693                             	.LVL80:
 464:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 694                             		.loc 1 464 19 is_stmt 0 discriminator 4 view .LVU225
 695 033d 66 07                   		mov.L	#0, r7
 696 033f 38 B9 00                		bra	.L14
 697                             	.LVL81:
 698                             	.L39:
 656:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 699                             		.loc 1 656 34 discriminator 2 view .LVU226
 700 0342 FB 7E 00 70 08          		mov.L	#0x87000, r7
 701                             	.LVL82:
 656:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 702                             		.loc 1 656 34 discriminator 2 view .LVU227
 703 0347 CE 75 70 03             		mov.B	880[r7], r5
 704 034b 64 F5                   		and #15, r5
 705 034d 2E D3                   		bra	.L40
 706                             	.LVL83:
 707                             	.L66:
 664:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 708                             		.loc 1 664 17 is_stmt 1 view .LVU228
 709 034f 75 41 70                		mov.L	#0x70, r1
 710                             	.LVL84:
 664:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 711                             		.loc 1 664 17 is_stmt 0 view .LVU229
 712 0352 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 713                             	.LVL85:
 667:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 714                             		.loc 1 667 17 is_stmt 1 view .LVU230
 667:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 715                             		.loc 1 667 36 is_stmt 0 view .LVU231
 716 0356 FB 5E 00 70 08          		mov.L	#0x87000, r5
 717 035b CE 53 70 03             		mov.B	880[r5], r3
 718 035f FB 46 F0                		mov.L	#-16, r4
 719 0362 53 34                   		and	r3, r4
 720 0364 CB 54 70 03             		mov.B	r4, 880[r5]
 721 0368 38 90 00                		bra	.L14
 722                             	.LVL86:
 723                             	.L37:
 672:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 673:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 674:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_AL0 */
 675:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 676:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_AL0 */
 677:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 678:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_AL1_TOP) && (vector < BSP_INT_SRC_GR_INT_END))
 724                             		.loc 1 678 10 is_stmt 1 view .LVU232
 725                             		.loc 1 678 52 is_stmt 0 view .LVU233
 726 036b 71 11 9B                		add	#-101, r1
 727                             	.LVL87:
 728                             		.loc 1 678 13 view .LVU234
 729 036e 61 71                   		cmp	#7, r1
 730 0370 25 05 38 8B 00          		bgtu	.L51
 679:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 680:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group AL1. */
 681:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_AL1
 682:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 731                             		.loc 1 682 9 is_stmt 1 view .LVU235
 732                             		.loc 1 682 12 is_stmt 0 view .LVU236
 733 0375 5B 22                   		movu.B	r2, r2
 734                             		.loc 1 682 12 view .LVU237
 735 0377 61 02                   		cmp	#0, r2
 736 0379 21 13                   		bne	.L67
 683:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 684:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPAL1));
 685:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 686:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 687:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPAL1)  = 0;
 688:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 689:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 690:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPAL1) = (uint8_t)((ipl > IPR(ICU, GROUPAL1)) ? ipl : IPR(ICU, GROUPAL1));
 691:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 692:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 693:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 694:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 695:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 696:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENAL1.LONG)
 737                             		.loc 1 696 13 is_stmt 1 view .LVU238
 738                             		.loc 1 696 32 is_stmt 0 view .LVU239
 739 037b FB 7E 00 70 08          		mov.L	#0x87000, r7
 740 0380 EE 77 1D 02             		mov.L	2164[r7], r7
 741                             		.loc 1 696 16 view .LVU240
 742 0384 61 07                   		cmp	#0, r7
 743 0386 20 56                   		beq	.L68
 697:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 698:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPAL1));
 699:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 700:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 701:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPAL1) = 0;
 702:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 703:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 704:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 705:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 744                             		.loc 1 705 21 view .LVU241
 745 0388 66 47                   		mov.L	#4, r7
 746 038a 2E 6E                   		bra	.L14
 747                             	.L67:
 684:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 748                             		.loc 1 684 13 is_stmt 1 view .LVU242
 749 038c 75 41 71                		mov.L	#0x71, r1
 750 038f 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 751                             	.LVL88:
 687:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 752                             		.loc 1 687 13 view .LVU243
 687:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 753                             		.loc 1 687 32 is_stmt 0 view .LVU244
 754 0393 FB 5E 00 70 08          		mov.L	#0x87000, r5
 755 0398 CD 54 71                		mov.B	113[r5], r4
 756 039b 7A 04                   		bclr	#0, r4
 757 039d C7 54 71                		mov.B	r4, 113[r5]
 690:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 758                             		.loc 1 690 13 is_stmt 1 view .LVU245
 690:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 759                             		.loc 1 690 51 is_stmt 0 view .LVU246
 760 03a0 CE 55 71 03             		mov.B	881[r5], r5
 761 03a4 64 F5                   		and #15, r5
 690:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 762                             		.loc 1 690 34 view .LVU247
 763 03a6 47 75                   		cmp	r7, r5
 764 03a8 22 27                   		bgeu	.L42
 690:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 765                             		.loc 1 690 34 discriminator 1 view .LVU248
 766 03aa 66 F5                   		mov.L	#15, r5
 767 03ac 53 75                   		and	r7, r5
 768                             	.LVL89:
 769                             	.L43:
 690:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 770                             		.loc 1 690 32 discriminator 4 view .LVU249
 771 03ae FB 3E 00 70 08          		mov.L	#0x87000, r3
 772 03b3 CE 34 71 03             		mov.B	881[r3], r4
 773 03b7 66 F7                   		mov.L	#15, r7
 774 03b9 53 57                   		and	r5, r7
 775 03bb 75 24 F0                		and #-16, r4
 776 03be 57 47                   		or	r4, r7
 777 03c0 CB 37 71 03             		mov.B	r7, 881[r3]
 691:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 778                             		.loc 1 691 13 is_stmt 1 discriminator 4 view .LVU250
 779 03c4 75 41 71                		mov.L	#0x71, r1
 780 03c7 05 00 00 00             		bsr	_R_BSP_InterruptRequestEnable
 781                             	.LVL90:
 464:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 782                             		.loc 1 464 19 is_stmt 0 discriminator 4 view .LVU251
 783 03cb 66 07                   		mov.L	#0, r7
 784 03cd 2E 2B                   		bra	.L14
 785                             	.LVL91:
 786                             	.L42:
 690:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 787                             		.loc 1 690 34 discriminator 2 view .LVU252
 788 03cf FB 7E 00 70 08          		mov.L	#0x87000, r7
 789                             	.LVL92:
 690:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 790                             		.loc 1 690 34 discriminator 2 view .LVU253
 791 03d4 CE 75 71 03             		mov.B	881[r7], r5
 792 03d8 64 F5                   		and #15, r5
 793 03da 2E D4                   		bra	.L43
 794                             	.LVL93:
 795                             	.L68:
 698:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 796                             		.loc 1 698 17 is_stmt 1 view .LVU254
 797 03dc 75 41 71                		mov.L	#0x71, r1
 798 03df 05 00 00 00             		bsr	_R_BSP_InterruptRequestDisable
 799                             	.LVL94:
 701:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 800                             		.loc 1 701 17 view .LVU255
 701:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 801                             		.loc 1 701 36 is_stmt 0 view .LVU256
 802 03e3 FB 5E 00 70 08          		mov.L	#0x87000, r5
 803 03e8 CE 53 71 03             		mov.B	881[r5], r3
 804 03ec FB 46 F0                		mov.L	#-16, r4
 805 03ef 53 34                   		and	r3, r4
 806 03f1 CB 54 71 03             		mov.B	r4, 881[r5]
 807 03f5 0B                      		bra	.L14
 808                             	.LVL95:
 809                             	.L44:
 470:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 810                             		.loc 1 470 16 view .LVU257
 811 03f6 66 27                   		mov.L	#2, r7
 812                             	.LVL96:
 813                             		.balign 8,3,1
 814                             	.L14:
 706:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 707:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 708:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_AL1 */
 709:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 710:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_AL1 */
 711:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 712:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else
 713:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 714:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Vector given was not part of a group. */
 715:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 716:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 717:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 718:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     return err;
 719:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function bsp_gr_int_enable_disable() */
 815                             		.loc 1 719 1 view .LVU258
 816 03f8 EF 71                   		mov.L	r7, r1
 817 03fa 3F 77 01                		rtsd	#4, r7-r7
 818                             	.LVL97:
 819                             	.L51:
 715:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 820                             		.loc 1 715 13 view .LVU259
 821 03fd 66 27                   		mov.L	#2, r7
 822 03ff 2E F9                   		bra	.L14
 823                             	.LFE10:
 825 0401 FD 70 40 00 00 00 80    		.section	.text.bsp_interrupt_open,"ax",@progbits
 826                             		.global	_bsp_interrupt_open
 828                             	_bsp_interrupt_open:
 829                             	.LFB5:
 146:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t i;
 830                             		.loc 1 146 1 is_stmt 1 view -0
 831 0000 7E A7                   		push.l	r7
 832                             	.LCFI2:
 147:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 833                             		.loc 1 147 5 view .LVU261
 150:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 834                             		.loc 1 150 5 view .LVU262
 835                             	.LVL98:
 150:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 836                             		.loc 1 150 12 is_stmt 0 view .LVU263
 837 0002 66 05                   		mov.L	#0, r5
 838                             	.LVL99:
 839                             	.L70:
 150:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 840                             		.loc 1 150 5 discriminator 1 view .LVU264
 841 0004 75 55 6E                		cmp	#0x6e, r5
 842 0007 24 15                   		bgtu	.L73
 153:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 843                             		.loc 1 153 9 is_stmt 1 discriminator 3 view .LVU265
 153:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 844                             		.loc 1 153 26 is_stmt 0 discriminator 3 view .LVU266
 845 0009 FB 42 00 00 00 00       		mov.L	#_g_bsp_vectors, r4
 846 000f FB 72 00 00 00 10       		mov.L	#0x10000000, r7
 847 0015 FE 25 47                		mov.L	r7, [r5,r4]
 150:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 848                             		.loc 1 150 47 discriminator 3 view .LVU267
 849 0018 62 15                   		add	#1, r5
 850                             	.LVL100:
 150:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 851                             		.loc 1 150 47 discriminator 3 view .LVU268
 852 001a 2E EA                   		bra	.L70
 853                             	.L73:
 158:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 854                             		.loc 1 158 5 is_stmt 1 view .LVU269
 855 001c 05 00 00 00             		bsr	_bsp_mapped_interrupt_open
 856                             	.LVL101:
 167:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 857                             		.loc 1 167 1 is_stmt 0 view .LVU270
 858 0020 3F 77 01                		rtsd	#4, r7-r7
 859                             	.LFE5:
 861                             		.section	.text.R_BSP_InterruptWrite,"ax",@progbits
 862                             		.global	_R_BSP_InterruptWrite
 864                             	_R_BSP_InterruptWrite:
 865                             	.LVL102:
 866                             	.LFB6:
 188:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err;
 867                             		.loc 1 188 1 is_stmt 1 view -0
 189:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 868                             		.loc 1 189 5 view .LVU272
 191:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 869                             		.loc 1 191 5 view .LVU273
 194:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 870                             		.loc 1 194 5 view .LVU274
 194:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 871                             		.loc 1 194 8 is_stmt 0 view .LVU275
 872 0000 61 02                   		cmp	#0, r2
 873 0002 20 22                   		beq	.L75
 194:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 874                             		.loc 1 194 48 discriminator 1 view .LVU276
 875 0004 74 02 00 00 00 10       		cmp	#0x10000000, r2
 876 000a 20 1A                   		beq	.L75
 201:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****            (BSP_INT_SRC_EMPTY <= vector))
 877                             		.loc 1 201 9 is_stmt 1 view .LVU277
 201:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****            (BSP_INT_SRC_EMPTY <= vector))
 878                             		.loc 1 201 61 is_stmt 0 view .LVU278
 879 000c 71 15 F3                		add	#-13, r1, r5
 201:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****            (BSP_INT_SRC_EMPTY <= vector))
 880                             		.loc 1 201 11 view .LVU279
 881 000f 61 15                   		cmp	#1, r5
 882 0011 25 29                   		bleu	.L78
 201:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****            (BSP_INT_SRC_EMPTY <= vector))
 883                             		.loc 1 201 106 discriminator 1 view .LVU280
 884 0013 75 51 6D                		cmp	#0x6d, r1
 885 0016 24 27                   		bgtu	.L79
 209:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 886                             		.loc 1 209 13 is_stmt 1 view .LVU281
 209:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 887                             		.loc 1 209 35 is_stmt 0 view .LVU282
 888 0018 FB 52 00 00 00 00       		mov.L	#_g_bsp_vectors, r5
 889 001e FE 21 52                		mov.L	r2, [r1,r5]
 191:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 890                             		.loc 1 191 9 view .LVU283
 891 0021 66 01                   		mov.L	#0, r1
 892                             	.LVL103:
 191:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 893                             		.loc 1 191 9 view .LVU284
 894 0023 02                      		rts
 895                             	.LVL104:
 896                             	.L75:
 188:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err;
 897                             		.loc 1 188 1 view .LVU285
 898 0024 7E A7                   		push.l	r7
 899                             	.LCFI3:
 197:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 900                             		.loc 1 197 9 is_stmt 1 view .LVU286
 197:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 901                             		.loc 1 197 31 is_stmt 0 view .LVU287
 902 0026 FB 52 00 00 00 00       		mov.L	#_g_bsp_vectors, r5
 903 002c FB 72 00 00 00 10       		mov.L	#0x10000000, r7
 904 0032 FE 21 57                		mov.L	r7, [r1,r5]
 191:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 905                             		.loc 1 191 9 view .LVU288
 906 0035 66 01                   		mov.L	#0, r1
 907                             	.LVL105:
 214:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 908                             		.loc 1 214 1 view .LVU289
 909 0037 3F 77 01                		rtsd	#4, r7-r7
 910                             	.LVL106:
 911                             	.L78:
 912                             	.LCFI4:
 205:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 913                             		.loc 1 205 17 view .LVU290
 914 003a 66 21                   		mov.L	#2, r1
 915                             	.LVL107:
 205:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 916                             		.loc 1 205 17 view .LVU291
 917 003c 02                      		rts
 918                             	.LVL108:
 919                             	.L79:
 205:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 920                             		.loc 1 205 17 view .LVU292
 921 003d 66 21                   		mov.L	#2, r1
 922                             	.LVL109:
 213:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptWrite() */
 923                             		.loc 1 213 5 is_stmt 1 view .LVU293
 214:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 924                             		.loc 1 214 1 is_stmt 0 view .LVU294
 925 003f 02                      		rts
 926                             	.LFE6:
 928                             		.section	.text.R_BSP_InterruptRead,"ax",@progbits
 929                             		.global	_R_BSP_InterruptRead
 931                             	_R_BSP_InterruptRead:
 932                             	.LVL110:
 933                             	.LFB7:
 228:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err;
 934                             		.loc 1 228 1 is_stmt 1 view -0
 229:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 935                             		.loc 1 229 5 view .LVU296
 231:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 936                             		.loc 1 231 5 view .LVU297
 234:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 937                             		.loc 1 234 5 view .LVU298
 234:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 938                             		.loc 1 234 33 is_stmt 0 view .LVU299
 939 0000 FB 52 00 00 00 00       		mov.L	#_g_bsp_vectors, r5
 940 0006 FE 61 55                		mov.L	[r1,r5], r5
 234:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 941                             		.loc 1 234 8 view .LVU300
 942 0009 61 05                   		cmp	#0, r5
 943 000b 20 0E                   		beq	.L85
 234:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 944                             		.loc 1 234 61 discriminator 1 view .LVU301
 945 000d 74 05 00 00 00 10       		cmp	#0x10000000, r5
 946 0013 11                      		beq	.L86
 240:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 947                             		.loc 1 240 9 is_stmt 1 view .LVU302
 240:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 948                             		.loc 1 240 19 is_stmt 0 view .LVU303
 949 0014 E3 25                   		mov.L	r5, [r2]
 231:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 950                             		.loc 1 231 9 view .LVU304
 951 0016 66 01                   		mov.L	#0, r1
 952                             	.LVL111:
 231:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 953                             		.loc 1 231 9 view .LVU305
 954 0018 02                      		rts
 955                             	.LVL112:
 956                             	.L85:
 236:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 957                             		.loc 1 236 13 view .LVU306
 958 0019 66 11                   		mov.L	#1, r1
 959                             	.LVL113:
 236:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 960                             		.loc 1 236 13 view .LVU307
 961 001b 02                      		rts
 962                             	.LVL114:
 963                             	.L86:
 236:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 964                             		.loc 1 236 13 view .LVU308
 965 001c 66 11                   		mov.L	#1, r1
 966                             	.LVL115:
 243:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRead() */
 967                             		.loc 1 243 5 is_stmt 1 view .LVU309
 244:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 968                             		.loc 1 244 1 is_stmt 0 view .LVU310
 969 001e 02                      		rts
 970                             	.LFE7:
 972                             		.section	.text.R_BSP_InterruptControl,"ax",@progbits
 973                             		.global	_R_BSP_InterruptControl
 975                             	_R_BSP_InterruptControl:
 976                             	.LVL116:
 977                             	.LFB8:
 289:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t       err;
 978                             		.loc 1 289 1 is_stmt 1 view -0
 289:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t       err;
 979                             		.loc 1 289 1 is_stmt 0 view .LVU312
 980 0000 7E A7                   		push.l	r7
 981                             	.LCFI5:
 982 0002 60 40                   		sub	#4, r0
 983                             	.LCFI6:
 290:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_cb_args_t   cb_args;
 984                             		.loc 1 290 5 is_stmt 1 view .LVU313
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 985                             		.loc 1 291 5 view .LVU314
 293:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 986                             		.loc 1 293 5 view .LVU315
 987                             	.LVL117:
 302:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 988                             		.loc 1 302 5 view .LVU316
 989 0004 61 32                   		cmp	#3, r2
 990 0006 20 52                   		beq	.L88
 991 0008 EF 27                   		mov.L	r2, r7
 992 000a 24 27                   		bgtu	.L89
 993 000c 61 12                   		cmp	#1, r2
 994 000e 20 3A                   		beq	.L90
 995 0010 24 40                   		bgtu	.L103
 307:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 996                             		.loc 1 307 13 view .LVU317
 307:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 997                             		.loc 1 307 41 is_stmt 0 view .LVU318
 998 0012 FB 52 00 00 00 00       		mov.L	#_g_bsp_vectors, r5
 999 0018 FE 61 55                		mov.L	[r1,r5], r5
 307:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1000                             		.loc 1 307 16 view .LVU319
 1001 001b 61 05                   		cmp	#0, r5
 1002 001d 20 65                   		beq	.L97
 307:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1003                             		.loc 1 307 69 discriminator 1 view .LVU320
 1004 001f 74 05 00 00 00 10       		cmp	#0x10000000, r5
 1005 0025 20 61                   		beq	.L98
 310:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1006                             		.loc 1 310 17 is_stmt 1 view .LVU321
 310:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1007                             		.loc 1 310 32 is_stmt 0 view .LVU322
 1008 0027 E3 01                   		mov.L	r1, [r0]
 312:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1009                             		.loc 1 312 17 is_stmt 1 view .LVU323
 1010 0029 EF 01                   		mov.L	r0, r1
 1011                             	.LVL118:
 312:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1012                             		.loc 1 312 17 is_stmt 0 view .LVU324
 1013 002b 7F 15                   		jsr	r5
 1014                             	.LVL119:
 293:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1015                             		.loc 1 293 9 view .LVU325
 1016 002d EF 71                   		mov.L	r7, r1
 312:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1017                             		.loc 1 312 17 view .LVU326
 1018 002f 2E 16                   		bra	.L87
 1019                             	.LVL120:
 1020                             	.L89:
 302:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1021                             		.loc 1 302 5 view .LVU327
 1022 0031 61 52                   		cmp	#5, r2
 1023 0033 20 45                   		beq	.L93
 1024 0035 23 39                   		bltu	.L94
 1025 0037 61 62                   		cmp	#6, r2
 1026 0039 1A                      		bne	.L104
 357:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1027                             		.loc 1 357 13 is_stmt 1 view .LVU328
 357:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1028                             		.loc 1 357 19 is_stmt 0 view .LVU329
 1029 003a EF 32                   		mov.L	r3, r2
 1030                             	.LVL121:
 357:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1031                             		.loc 1 357 19 view .LVU330
 1032 003c 66 01                   		mov	#0, r1
 1033                             	.LVL122:
 357:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1034                             		.loc 1 357 19 view .LVU331
 1035 003e 05 00 00 00             		bsr	_bsp_fit_interrupts_control
 1036                             	.LVL123:
 358:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1037                             		.loc 1 358 13 is_stmt 1 view .LVU332
 1038 0042 0B                      		bra	.L87
 1039                             	.LVL124:
 1040                             	.L104:
 361:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1041                             		.loc 1 361 17 is_stmt 0 view .LVU333
 1042 0043 66 21                   		mov.L	#2, r1
 1043                             	.LVL125:
 1044                             		.balign 8,3,2
 1045                             	.L87:
 366:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1046                             		.loc 1 366 1 view .LVU334
 1047 0045 3F 77 02                		rtsd	#8, r7-r7
 1048                             	.LVL126:
 1049                             	.L90:
 321:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1050                             		.loc 1 321 13 is_stmt 1 view .LVU335
 321:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1051                             		.loc 1 321 19 is_stmt 0 view .LVU336
 1052 0048 66 12                   		mov	#1, r2
 1053                             	.LVL127:
 321:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1054                             		.loc 1 321 19 view .LVU337
 1055 004a 05 00 00 00             		bsr	_bsp_interrupt_enable_disable
 1056                             	.LVL128:
 322:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1057                             		.loc 1 322 13 is_stmt 1 view .LVU338
 1058 004e 2E F7                   		bra	.L87
 1059                             	.LVL129:
 1060                             	.L103:
 325:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1061                             		.loc 1 325 13 view .LVU339
 325:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1062                             		.loc 1 325 19 is_stmt 0 view .LVU340
 1063 0050 66 02                   		mov	#0, r2
 1064                             	.LVL130:
 325:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1065                             		.loc 1 325 19 view .LVU341
 1066 0052 05 00 00 00             		bsr	_bsp_interrupt_enable_disable
 1067                             	.LVL131:
 326:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1068                             		.loc 1 326 13 is_stmt 1 view .LVU342
 1069 0056 2E EF                   		bra	.L87
 1070                             	.LVL132:
 1071                             	.L88:
 332:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1072                             		.loc 1 332 13 view .LVU343
 332:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1073                             		.loc 1 332 15 is_stmt 0 view .LVU344
 1074 0058 61 03                   		cmp	#0, r3
 1075 005a 20 30                   		beq	.L99
 332:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1076                             		.loc 1 332 52 discriminator 1 view .LVU345
 1077 005c 74 03 00 00 00 10       		cmp	#0x10000000, r3
 1078 0062 20 2C                   		beq	.L100
 335:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1079                             		.loc 1 335 17 is_stmt 1 view .LVU346
 335:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1080                             		.loc 1 335 23 is_stmt 0 view .LVU347
 1081 0064 EC 33                   		mov.L	[r3], r3
 1082                             	.LVL133:
 335:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1083                             		.loc 1 335 23 view .LVU348
 1084 0066 66 12                   		mov	#1, r2
 1085                             	.LVL134:
 335:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1086                             		.loc 1 335 23 view .LVU349
 1087 0068 05 00 00 00             		bsr	_bsp_gr_int_enable_disable
 1088                             	.LVL135:
 335:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1089                             		.loc 1 335 21 view .LVU350
 1090 006c 2E D9                   		bra	.L87
 1091                             	.LVL136:
 1092                             	.L94:
 344:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1093                             		.loc 1 344 13 is_stmt 1 view .LVU351
 344:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1094                             		.loc 1 344 19 is_stmt 0 view .LVU352
 1095 006e 66 03                   		mov.L	#0, r3
 1096                             	.LVL137:
 344:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1097                             		.loc 1 344 19 view .LVU353
 1098 0070 66 02                   		mov	#0, r2
 1099                             	.LVL138:
 344:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1100                             		.loc 1 344 19 view .LVU354
 1101 0072 05 00 00 00             		bsr	_bsp_gr_int_enable_disable
 1102                             	.LVL139:
 345:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 1103                             		.loc 1 345 13 is_stmt 1 view .LVU355
 1104 0076 2E CF                   		bra	.L87
 1105                             	.LVL140:
 1106                             	.L93:
 351:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1107                             		.loc 1 351 13 view .LVU356
 351:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1108                             		.loc 1 351 19 is_stmt 0 view .LVU357
 1109 0078 EF 32                   		mov.L	r3, r2
 1110                             	.LVL141:
 351:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1111                             		.loc 1 351 19 view .LVU358
 1112 007a 66 11                   		mov	#1, r1
 1113                             	.LVL142:
 351:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 1114                             		.loc 1 351 19 view .LVU359
 1115 007c 05 00 00 00             		bsr	_bsp_fit_interrupts_control
 1116                             	.LVL143:
 352:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1117                             		.loc 1 352 13 is_stmt 1 view .LVU360
 1118 0080 2E C5                   		bra	.L87
 1119                             	.LVL144:
 1120                             	.L97:
 316:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1121                             		.loc 1 316 21 is_stmt 0 view .LVU361
 1122 0082 66 11                   		mov.L	#1, r1
 1123                             	.LVL145:
 316:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1124                             		.loc 1 316 21 view .LVU362
 1125 0084 2E C1                   		bra	.L87
 1126                             	.LVL146:
 1127                             	.L98:
 316:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1128                             		.loc 1 316 21 view .LVU363
 1129 0086 66 11                   		mov.L	#1, r1
 1130                             	.LVL147:
 316:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1131                             		.loc 1 316 21 view .LVU364
 1132 0088 2E BD                   		bra	.L87
 1133                             	.LVL148:
 1134                             	.L99:
 339:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1135                             		.loc 1 339 22 view .LVU365
 1136 008a 66 21                   		mov.L	#2, r1
 1137                             	.LVL149:
 339:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1138                             		.loc 1 339 22 view .LVU366
 1139 008c 2E B9                   		bra	.L87
 1140                             	.LVL150:
 1141                             	.L100:
 339:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1142                             		.loc 1 339 22 view .LVU367
 1143 008e 66 21                   		mov.L	#2, r1
 1144                             	.LVL151:
 365:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
 1145                             		.loc 1 365 5 is_stmt 1 view .LVU368
 365:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
 1146                             		.loc 1 365 12 is_stmt 0 view .LVU369
 1147 0090 2E B5                   		bra	.L87
 1148                             	.LFE8:
 1150 0092 74 10 01 00 00 00       		.section	.text.excep_supervisor_inst_isr,"ax",@progbits
 1151                             		.global	_excep_supervisor_inst_isr
 1153                             	_excep_supervisor_inst_isr:
 1154                             	.LFB11:
 720:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT */
 721:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 722:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /* When using the user startup program, disable the following code. */
 723:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #if BSP_CFG_STARTUP_DISABLE == 0
 724:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 725:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_EXCEP_SUPERVISOR_INST_ISR
 726:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 727:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: excep_supervisor_inst_isr
 728:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Supervisor Instruction Violation ISR
 729:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 730:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 731:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 732:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void excep_supervisor_inst_isr(void)
 733:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1155                             		.loc 1 733 1 is_stmt 1 view -0
 1156                             		; Note: Interrupt Handler
 1157 0000 6E EF                   		pushm	r14-r15
 1158                             	.LCFI7:
 1159 0002 6E 15                   		pushm	r1-r5
 1160                             	.LCFI8:
 1161 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1162 0009 A8 1B                   		mov.L	4[r1], r3
 1163 000b EC 12                   		mov.L	[r1], r2
 1164 000d 7E A2                   		push.l	r2
 1165                             	.LCFI9:
 1166 000f 7E A3                   		push.l	r3
 1167                             	.LCFI10:
 734:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
 735:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EXC_SUPERVISOR_INSTR, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR)
 1168                             		.loc 1 735 5 view .LVU371
 1169 0011 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1170 0017 66 02                   		mov.L	#0, r2
 1171 0019 66 01                   		mov.L	#0, r1
 1172 001b 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1173                             	.LVL152:
 736:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function excep_supervisor_inst_isr() */
 1174                             		.loc 1 736 1 is_stmt 0 view .LVU372
 1175 001f 7E B3                   		pop	r3
 1176 0021 7E B2                   		pop	r2
 1177 0023 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1178 0028 E3 12                   		mov.L	r2, [r1]
 1179 002a A0 1B                   		mov.L	r3, 4[r1]
 1180 002c 6F 15                   		popm	r1-r5
 1181 002e 6F EF                   		popm	r14-r15
 1182 0030 7F 95                   		rte
 1183                             	.LFE11:
 1185                             		.section	.text.excep_access_isr,"ax",@progbits
 1186                             		.global	_excep_access_isr
 1188                             	_excep_access_isr:
 1189                             	.LFB12:
 737:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 738:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 739:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_EXCEP_ACCESS_ISR
 740:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 741:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: excep_access_isr
 742:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Access exception ISR
 743:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 744:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 745:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 746:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void excep_access_isr(void)
 747:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1190                             		.loc 1 747 1 is_stmt 1 view -0
 1191                             		; Note: Interrupt Handler
 1192 0000 6E EF                   		pushm	r14-r15
 1193                             	.LCFI11:
 1194 0002 6E 15                   		pushm	r1-r5
 1195                             	.LCFI12:
 1196 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1197 0009 A8 1B                   		mov.L	4[r1], r3
 1198 000b EC 12                   		mov.L	[r1], r2
 1199 000d 7E A2                   		push.l	r2
 1200                             	.LCFI13:
 1201 000f 7E A3                   		push.l	r3
 1202                             	.LCFI14:
 748:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
 749:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EXC_ACCESS, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1203                             		.loc 1 749 5 view .LVU374
 1204 0011 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1205 0017 66 02                   		mov.L	#0, r2
 1206 0019 66 41                   		mov.L	#4, r1
 1207 001b 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1208                             	.LVL153:
 750:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function excep_access_isr() */
 1209                             		.loc 1 750 1 is_stmt 0 view .LVU375
 1210 001f 7E B3                   		pop	r3
 1211 0021 7E B2                   		pop	r2
 1212 0023 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1213 0028 E3 12                   		mov.L	r2, [r1]
 1214 002a A0 1B                   		mov.L	r3, 4[r1]
 1215 002c 6F 15                   		popm	r1-r5
 1216 002e 6F EF                   		popm	r14-r15
 1217 0030 7F 95                   		rte
 1218                             	.LFE12:
 1220                             		.section	.text.excep_undefined_inst_isr,"ax",@progbits
 1221                             		.global	_excep_undefined_inst_isr
 1223                             	_excep_undefined_inst_isr:
 1224                             	.LFB13:
 751:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 752:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 753:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_EXCEP_UNDEFINED_INST_ISR
 754:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 755:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: excep_undefined_inst_isr
 756:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Undefined instruction exception ISR
 757:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 758:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 759:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 760:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void excep_undefined_inst_isr(void)
 761:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1225                             		.loc 1 761 1 is_stmt 1 view -0
 1226                             		; Note: Interrupt Handler
 1227 0000 6E EF                   		pushm	r14-r15
 1228                             	.LCFI15:
 1229 0002 6E 15                   		pushm	r1-r5
 1230                             	.LCFI16:
 1231 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1232 0009 A8 1B                   		mov.L	4[r1], r3
 1233 000b EC 12                   		mov.L	[r1], r2
 1234 000d 7E A2                   		push.l	r2
 1235                             	.LCFI17:
 1236 000f 7E A3                   		push.l	r3
 1237                             	.LCFI18:
 762:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
 763:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EXC_UNDEFINED_INSTR, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1238                             		.loc 1 763 5 view .LVU377
 1239 0011 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1240 0017 66 02                   		mov.L	#0, r2
 1241 0019 66 11                   		mov.L	#1, r1
 1242 001b 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1243                             	.LVL154:
 764:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function excep_undefined_inst_isr() */
 1244                             		.loc 1 764 1 is_stmt 0 view .LVU378
 1245 001f 7E B3                   		pop	r3
 1246 0021 7E B2                   		pop	r2
 1247 0023 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1248 0028 E3 12                   		mov.L	r2, [r1]
 1249 002a A0 1B                   		mov.L	r3, 4[r1]
 1250 002c 6F 15                   		popm	r1-r5
 1251 002e 6F EF                   		popm	r14-r15
 1252 0030 7F 95                   		rte
 1253                             	.LFE13:
 1255                             		.section	.text.excep_floating_point_isr,"ax",@progbits
 1256                             		.global	_excep_floating_point_isr
 1258                             	_excep_floating_point_isr:
 1259                             	.LFB14:
 765:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 766:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 767:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_EXCEP_FLOATING_POINT_ISR
 768:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 769:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: excep_floating_point_isr
 770:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Floating point exception ISR
 771:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 772:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 773:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 774:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void excep_floating_point_isr(void)
 775:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1260                             		.loc 1 775 1 is_stmt 1 view -0
 1261                             		; Note: Interrupt Handler
 1262 0000 6E EF                   		pushm	r14-r15
 1263                             	.LCFI19:
 1264 0002 6E 15                   		pushm	r1-r5
 1265                             	.LCFI20:
 1266 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1267 0009 A8 1B                   		mov.L	4[r1], r3
 1268 000b EC 12                   		mov.L	[r1], r2
 1269 000d 7E A2                   		push.l	r2
 1270                             	.LCFI21:
 1271 000f 7E A3                   		push.l	r3
 1272                             	.LCFI22:
 776:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef __FPU
 777:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Used for reading FPSW register. */
 778:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t tmp_fpsw;
 1273                             		.loc 1 778 5 view .LVU380
 779:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 780:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 781:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
 782:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EXC_FPU, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1274                             		.loc 1 782 5 view .LVU381
 1275 0011 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1276 0017 66 02                   		mov.L	#0, r2
 1277 0019 66 31                   		mov.L	#3, r1
 1278 001b 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1279                             	.LVL155:
 783:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 784:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef __FPU
 785:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Get current FPSW. */
 786:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     tmp_fpsw = (uint32_t)R_BSP_GET_FPSW();
 1280                             		.loc 1 786 5 view .LVU382
 1281                             		.loc 1 786 26 is_stmt 0 view .LVU383
 1282 001f FD 6A 35                		mvfc	fpsw, r5
 1283                             	.LVL156:
 787:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 788:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Clear only the FPU exception flags. */
 789:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_SET_FPSW(tmp_fpsw & ((uint32_t)~BSP_PRV_FPU_CAUSE_FLAGS));
 1284                             		.loc 1 789 5 is_stmt 1 view .LVU384
 1285 0022 76 25 03 FF             		and #-253, r5
 1286                             	.LVL157:
 1287                             		.loc 1 789 5 is_stmt 0 view .LVU385
 1288 0026 FD 68 53                		mvtc	r5, fpsw
 790:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 791:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function excep_floating_point_isr() */
 1289                             		.loc 1 791 1 view .LVU386
 1290 0029 7E B3                   		pop	r3
 1291 002b 7E B2                   		pop	r2
 1292 002d FB 1E 30 14 08          		mov.L	#0x81430, r1
 1293 0032 E3 12                   		mov.L	r2, [r1]
 1294 0034 A0 1B                   		mov.L	r3, 4[r1]
 1295 0036 6F 15                   		popm	r1-r5
 1296 0038 6F EF                   		popm	r14-r15
 1297 003a 7F 95                   		rte
 1298                             	.LFE14:
 1300                             		.section	.text.excep_address_isr,"ax",@progbits
 1301                             		.global	_excep_address_isr
 1303                             	_excep_address_isr:
 1304                             	.LFB15:
 792:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 793:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 794:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_EXCEP_ADDRESS_ISR
 795:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 796:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: excep_address_isr
 797:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Address exception ISR
 798:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 799:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 800:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Note         : This function is supported by only CCRX and GCC.
 801:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 802:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void excep_address_isr(void)
 803:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1305                             		.loc 1 803 1 is_stmt 1 view -0
 1306                             		; Note: Interrupt Handler
 1307 0000 6E EF                   		pushm	r14-r15
 1308                             	.LCFI23:
 1309 0002 6E 15                   		pushm	r1-r5
 1310                             	.LCFI24:
 1311 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1312 0009 A8 1B                   		mov.L	4[r1], r3
 1313 000b EC 12                   		mov.L	[r1], r2
 1314 000d 7E A2                   		push.l	r2
 1315                             	.LCFI25:
 1316 000f 7E A3                   		push.l	r3
 1317                             	.LCFI26:
 804:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
 805:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EXC_ADDRESS, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1318                             		.loc 1 805 5 view .LVU388
 1319 0011 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1320 0017 66 02                   		mov.L	#0, r2
 1321 0019 66 A1                   		mov.L	#10, r1
 1322 001b 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1323                             	.LVL158:
 806:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function excep_address_isr() */
 1324                             		.loc 1 806 1 is_stmt 0 view .LVU389
 1325 001f 7E B3                   		pop	r3
 1326 0021 7E B2                   		pop	r2
 1327 0023 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1328 0028 E3 12                   		mov.L	r2, [r1]
 1329 002a A0 1B                   		mov.L	r3, 4[r1]
 1330 002c 6F 15                   		popm	r1-r5
 1331 002e 6F EF                   		popm	r14-r15
 1332 0030 7F 95                   		rte
 1333                             	.LFE15:
 1335                             		.section	.text.non_maskable_isr,"ax",@progbits
 1336                             		.global	_non_maskable_isr
 1338                             	_non_maskable_isr:
 1339                             	.LFB16:
 807:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 808:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 809:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NON_MASKABLE_ISR
 810:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 811:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: non_maskable_isr
 812:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Non-maskable interrupt ISR
 813:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 814:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 815:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 816:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void non_maskable_isr(void)
 817:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1340                             		.loc 1 817 1 is_stmt 1 view -0
 1341                             		; Note: Interrupt Handler
 1342 0000 6E EF                   		pushm	r14-r15
 1343                             	.LCFI27:
 1344 0002 6E 15                   		pushm	r1-r5
 1345                             	.LCFI28:
 1346 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1347 0009 A8 1B                   		mov.L	4[r1], r3
 1348 000b EC 12                   		mov.L	[r1], r2
 1349 000d 7E A2                   		push.l	r2
 1350                             	.LCFI29:
 1351 000f 7E A3                   		push.l	r3
 1352                             	.LCFI30:
 818:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Determine what is the cause of this interrupt. */
 819:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 820:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_EXC_NMI_PIN
 821:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* EXC_NMI_PIN */
 822:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.NMIST) && (1 == ICU.NMIER.BIT.NMIEN))
 1353                             		.loc 1 822 5 view .LVU391
 1354                             		.loc 1 822 28 is_stmt 0 view .LVU392
 1355 0011 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1356 0016 CE 55 80 05             		mov.B	1408[r5], r5
 1357                             		.loc 1 822 8 view .LVU393
 1358 001a FD 74 C5 01             		tst	#1, r5
 1359 001e 21 65                   		bne	.L129
 1360                             	.L116:
 823:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 824:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* NMI pin interrupt is requested. */
 825:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_EXC_NMI_PIN, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 826:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 827:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear NMI pin interrupt flag. */
 828:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.NMICLR = 1;
 829:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 830:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 831:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 832:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_OSC_STOP_DETECT
 833:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* OSC_STOP_DETECT */
 834:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.OSTST) && (1 == ICU.NMIER.BIT.OSTEN))
 1361                             		.loc 1 834 5 is_stmt 1 view .LVU394
 1362                             		.loc 1 834 28 is_stmt 0 view .LVU395
 1363 0020 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1364 0025 CE 55 80 05             		mov.B	1408[r5], r5
 1365                             		.loc 1 834 8 view .LVU396
 1366 0029 FD 74 C5 02             		tst	#2, r5
 1367 002d 3B 85 00                		bne	.L130
 1368                             	.L117:
 835:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 836:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Oscillation stop detection interrupt is requested. */
 837:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_OSC_STOP_DETECT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 838:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 839:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear oscillation stop detect flag. */
 840:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.OSTCLR = 1;
 841:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 842:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 843:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 844:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_WDT_ERROR
 845:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* WDT_ERROR */
 846:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.WDTST) && (1 == ICU.NMIER.BIT.WDTEN))
 1369                             		.loc 1 846 5 is_stmt 1 view .LVU397
 1370                             		.loc 1 846 28 is_stmt 0 view .LVU398
 1371 0030 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1372 0035 CE 55 80 05             		mov.B	1408[r5], r5
 1373                             		.loc 1 846 8 view .LVU399
 1374 0039 FD 74 C5 04             		tst	#4, r5
 1375 003d 3B A5 00                		bne	.L131
 1376                             	.L118:
 847:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 848:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* WDT underflow/refresh error interrupt is requested. */
 849:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_WDT_ERROR, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 850:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 851:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear WDT flag. */
 852:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.WDTCLR = 1;
 853:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 854:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 855:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 856:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_LVD
 857:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* LVD */
 858:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.LVDST) && (1 == ICU.NMIER.BIT.LVDEN))
 859:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 860:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Voltage monitoring 1 interrupt is requested. */
 861:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_LVD1, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 862:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 863:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 864:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 865:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_IWDT_ERROR
 866:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* IWDT_ERROR */
 867:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.IWDTST) && (1 == ICU.NMIER.BIT.IWDTEN))
 1377                             		.loc 1 867 5 is_stmt 1 view .LVU400
 1378                             		.loc 1 867 28 is_stmt 0 view .LVU401
 1379 0040 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1380 0045 CE 55 80 05             		mov.B	1408[r5], r5
 1381                             		.loc 1 867 8 view .LVU402
 1382 0049 FD 74 C5 08             		tst	#8, r5
 1383 004d 3B C5 00                		bne	.L132
 1384                             	.L119:
 868:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 869:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* IWDT underflow/refresh error interrupt is requested. */
 870:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_IWDT_ERROR, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 871:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 872:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear IWDT flag. */
 873:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.IWDTCLR = 1;
 874:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 875:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 876:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 877:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_LVD1
 878:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* LVD1 */
 879:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.LVD1ST) && (1 == ICU.NMIER.BIT.LVD1EN))
 1385                             		.loc 1 879 5 is_stmt 1 view .LVU403
 1386                             		.loc 1 879 28 is_stmt 0 view .LVU404
 1387 0050 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1388 0055 CE 55 80 05             		mov.B	1408[r5], r5
 1389                             		.loc 1 879 8 view .LVU405
 1390 0059 FD 74 C5 10             		tst	#16, r5
 1391 005d 3B E5 00                		bne	.L133
 1392                             	.L120:
 880:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 881:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Voltage monitoring 1 interrupt is requested. */
 882:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_LVD1, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 883:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 884:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear LVD1 flag. */
 885:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.LVD1CLR = 1;
 886:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 887:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 888:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 889:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_LVD2
 890:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* LVD2 */
 891:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.LVD2ST) && (1 == ICU.NMIER.BIT.LVD2EN))
 1393                             		.loc 1 891 5 is_stmt 1 view .LVU406
 1394                             		.loc 1 891 28 is_stmt 0 view .LVU407
 1395 0060 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1396 0065 CE 55 80 05             		mov.B	1408[r5], r5
 1397                             		.loc 1 891 8 view .LVU408
 1398 0069 FD 74 C5 20             		tst	#32, r5
 1399 006d 3B 05 01                		bne	.L134
 1400                             	.L121:
 892:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 893:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Voltage monitoring 1 interrupt is requested. */
 894:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_LVD2, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 895:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 896:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear LVD2 flag. */
 897:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.LVD2CLR = 1;
 898:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 899:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 900:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 901:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_VBATT
 902:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* VBATT */
 903:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.VBATST) && (1 == ICU.NMIER.BIT.VBATEN))
 904:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 905:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* VBATT monitoring interrupt is requested. */
 906:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_VBATT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 907:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 908:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear LVD2 flag. */
 909:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.VBATCLR = 1;
 910:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 911:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 912:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 913:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_ECCRAM
 914:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* ECCRAM */
 915:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.ECCRAMST) && (1 == ICU.NMIER.BIT.ECCRAMEN))
 916:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 917:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == ECCRAM.ECCRAM1STS.BIT.ECC1ERR)
 918:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 919:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* ECCRAM Error interrupt is requested. */
 920:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_1BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 921:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 922:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear ECCRAM flags. */
 923:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             ECCRAM.ECCRAM1STS.BIT.ECC1ERR = 0;
 924:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 925:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 926:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == ECCRAM.ECCRAM2STS.BIT.ECC2ERR)
 927:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 928:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* ECCRAM Error interrupt is requested. */
 929:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_2BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 930:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 931:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear ECCRAM flags. */
 932:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             ECCRAM.ECCRAM2STS.BIT.ECC2ERR = 0;
 933:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 934:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 935:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 936:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 937:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_RAM
 938:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* RAM */
 939:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.RAMST) && (1 == ICU.NMIER.BIT.RAMEN))
 940:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 941:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 942:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == RAM.RAMSTS.BIT.RAMERR)
 943:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 944:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* RAM Error interrupt is requested. */
 945:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_RAM, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 946:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 947:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear RAM flags. */
 948:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             RAM.RAMSTS.BIT.RAMERR = 0;
 949:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 950:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #ifdef BSP_MCU_NMI_RAM_EXRAM
 951:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 952:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 953:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == RAM.EXRAMSTS.BIT.EXRAMERR)
 954:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 955:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Expansion RAM Error interrupt is requested. */
 956:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_EXRAM, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 957:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 958:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear Expansion RAM flags. */
 959:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             RAM.EXRAMSTS.BIT.EXRAMERR = 0;
 960:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 961:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #endif /* BSP_MCU_NMI_RAM_EXRAM */
 962:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 963:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #ifdef BSP_MCU_NMI_RAM_ECCRAM
 964:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 965:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 966:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == RAM.ECCRAM1STS.BIT.ECC1ERR)
 967:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 968:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* ECCRAM Error interrupt is requested. */
 969:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_1BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 970:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 971:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear ECCRAM flags. */
 972:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             RAM.ECCRAM1STS.BIT.ECC1ERR = 0;
 973:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 974:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 975:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 976:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == RAM.ECCRAM2STS.BIT.ECC2ERR)
 977:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 978:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* ECCRAM Error interrupt is requested. */
 979:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_2BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 980:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 981:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear ECCRAM flags. */
 982:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             RAM.ECCRAM2STS.BIT.ECC2ERR = 0;
 983:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 984:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #endif /* BSP_MCU_NMI_RAM_ECCRAM */
 985:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 986:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_NMI_RAM */
 987:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 988:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_EXNMI
 989:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* EXNMI */
 990:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.EXNMIST) && (1 == ICU.NMIER.BIT.EXNMIEN))
 1401                             		.loc 1 990 5 is_stmt 1 view .LVU409
 1402                             		.loc 1 990 28 is_stmt 0 view .LVU410
 1403 0070 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1404 0075 CE 55 80 05             		mov.B	1408[r5], r5
 1405                             		.loc 1 990 8 view .LVU411
 1406 0079 FD 74 C5 40             		tst	#0x40, r5
 1407 007d 3B 25 01                		bne	.L135
 1408                             	.L127:
 991:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 992:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #ifdef BSP_MCU_NMI_EXNMI_RAM
 993:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 994:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 995:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if ((1 == ICU.EXNMISR.BIT.RAMST) && (1 == ICU.EXNMIER.BIT.RAMEN))
 996:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 997:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 998:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 999:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if(1 == RAM.RAMSTS.BIT.RAMERR)
1000:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
1001:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* RAM Error interrupt is requested. */
1002:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptControl(BSP_INT_SRC_RAM, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
1003:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1004:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Clear RAM flags. */
1005:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 RAM.RAMSTS.BIT.RAMERR = 0;
1006:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
1007:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         #ifdef BSP_MCU_NMI_EXNMI_RAM_EXRAM
1008:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1009:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
1010:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if(1 == RAM.EXRAMSTS.BIT.EXRAMERR)
1011:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
1012:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Expansion RAM Error interrupt is requested. */
1013:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptControl(BSP_INT_SRC_EXRAM, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
1014:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1015:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Clear Expansion RAM flags. */
1016:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 RAM.EXRAMSTS.BIT.EXRAMERR = 0;
1017:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
1018:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         #endif /* BSP_MCU_NMI_EXNMI_RAM_EXRAM */
1019:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1020:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         #ifdef BSP_MCU_NMI_EXNMI_RAM_ECCRAM
1021:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1022:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
1023:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if(1 == ECCRAM.ECCRAM1STS.BIT.ECC1ERR)
1024:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
1025:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* ECCRAM Error interrupt is requested. */
1026:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_1BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_P
1027:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1028:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Clear ECCRAM flags. */
1029:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 ECCRAM.ECCRAM1STS.BIT.ECC1ERR = 0;
1030:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
1031:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1032:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
1033:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if(1 == ECCRAM.ECCRAM2STS.BIT.ECC2ERR)
1034:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
1035:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* ECCRAM Error interrupt is requested. */
1036:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_2BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_P
1037:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1038:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Clear ECCRAM flags. */
1039:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 ECCRAM.ECCRAM2STS.BIT.ECC2ERR = 0;
1040:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
1041:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         #endif /* BSP_MCU_NMI_EXNMI_RAM_ECCRAM */
1042:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
1043:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #endif /* BSP_MCU_NMI_EXNMI_RAM */
1044:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1045:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #ifdef BSP_MCU_NMI_EXNMI_DPFPUEX
1046:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1047:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
1048:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.EXNMISR.BIT.DPFPUST) && (1 == ICU.EXNMIER.BIT.DPFPUEN))
1049:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
1050:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Double-Precision Floating-Point Exception interrupt is requested. */
1051:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_DPFPUEX, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
1052:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1053:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear DPFPUST flag. */
1054:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             ICU.EXNMICLR.BIT.DPFPUCLR = 1;
1055:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
1056:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #endif /* BSP_MCU_NMI_EXNMI_DPFPUEX */
1057:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
1058:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_NMI_EXNMI */
1059:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1060:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* WAIT_LOOP */
1061:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     while(1)
 1409                             		.loc 1 1061 5 is_stmt 1 discriminator 1 view .LVU412
1062:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
1063:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Infinite loop. Return from Non-maskable interrupt handlling routine is prohibited.
1064:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****            Never use the non-maskable interrupt with an attempt to return to the program that was b
1065:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****            the time of interrupt generation after the exception handling routine is ended.
1066:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****          */
1067:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****          R_BSP_NOP();
 1410                             		.loc 1 1067 10 discriminator 1 view .LVU413
 1411                             	 ; 1067 "../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c" 1
 1412 0080 03                      		nop
 1413                             	 ; 0 "" 2
 1414 0081 2E FF                   		bra	.L127
 1415                             	.L129:
 822:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1416                             		.loc 1 822 58 is_stmt 0 discriminator 1 view .LVU414
 1417 0083 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1418 0088 CE 55 81 05             		mov.B	1409[r5], r5
 822:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1419                             		.loc 1 822 36 discriminator 1 view .LVU415
 1420 008c FD 74 C5 01             		tst	#1, r5
 1421 0090 20 90                   		beq	.L116
 825:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1422                             		.loc 1 825 9 is_stmt 1 view .LVU416
 1423 0092 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1424 0098 66 02                   		mov.L	#0, r2
 1425 009a 66 21                   		mov.L	#2, r1
 1426 009c 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1427                             	.LVL159:
 828:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1428                             		.loc 1 828 9 view .LVU417
 828:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1429                             		.loc 1 828 31 is_stmt 0 view .LVU418
 1430 00a0 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1431 00a5 CE 54 82 05             		mov.B	1410[r5], r4
 1432 00a9 78 04                   		bset	#0, r4
 1433 00ab CB 54 82 05             		mov.B	r4, 1410[r5]
 1434 00af 38 71 FF                		bra	.L116
 1435                             	.L130:
 834:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1436                             		.loc 1 834 58 discriminator 1 view .LVU419
 1437 00b2 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1438 00b7 CE 55 81 05             		mov.B	1409[r5], r5
 834:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1439                             		.loc 1 834 36 discriminator 1 view .LVU420
 1440 00bb FD 74 C5 02             		tst	#2, r5
 1441 00bf 3A 71 FF                		beq	.L117
 837:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1442                             		.loc 1 837 9 is_stmt 1 view .LVU421
 1443 00c2 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1444 00c8 66 02                   		mov.L	#0, r2
 1445 00ca 66 51                   		mov.L	#5, r1
 1446 00cc 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1447                             	.LVL160:
 840:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1448                             		.loc 1 840 9 view .LVU422
 840:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1449                             		.loc 1 840 31 is_stmt 0 view .LVU423
 1450 00d0 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1451 00d5 CE 54 82 05             		mov.B	1410[r5], r4
 1452 00d9 78 14                   		bset	#1, r4
 1453 00db CB 54 82 05             		mov.B	r4, 1410[r5]
 1454 00df 38 51 FF                		bra	.L117
 1455                             	.L131:
 846:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1456                             		.loc 1 846 58 discriminator 1 view .LVU424
 1457 00e2 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1458 00e7 CE 55 81 05             		mov.B	1409[r5], r5
 846:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1459                             		.loc 1 846 36 discriminator 1 view .LVU425
 1460 00eb FD 74 C5 04             		tst	#4, r5
 1461 00ef 3A 51 FF                		beq	.L118
 849:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1462                             		.loc 1 849 9 is_stmt 1 view .LVU426
 1463 00f2 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1464 00f8 66 02                   		mov.L	#0, r2
 1465 00fa 66 61                   		mov.L	#6, r1
 1466 00fc 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1467                             	.LVL161:
 852:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1468                             		.loc 1 852 9 view .LVU427
 852:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1469                             		.loc 1 852 31 is_stmt 0 view .LVU428
 1470 0100 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1471 0105 CE 54 82 05             		mov.B	1410[r5], r4
 1472 0109 78 24                   		bset	#2, r4
 1473 010b CB 54 82 05             		mov.B	r4, 1410[r5]
 1474 010f 38 31 FF                		bra	.L118
 1475                             	.L132:
 867:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1476                             		.loc 1 867 59 discriminator 1 view .LVU429
 1477 0112 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1478 0117 CE 55 81 05             		mov.B	1409[r5], r5
 867:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1479                             		.loc 1 867 37 discriminator 1 view .LVU430
 1480 011b FD 74 C5 08             		tst	#8, r5
 1481 011f 3A 31 FF                		beq	.L119
 870:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1482                             		.loc 1 870 9 is_stmt 1 view .LVU431
 1483 0122 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1484 0128 66 02                   		mov.L	#0, r2
 1485 012a 66 71                   		mov.L	#7, r1
 1486 012c 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1487                             	.LVL162:
 873:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1488                             		.loc 1 873 9 view .LVU432
 873:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1489                             		.loc 1 873 32 is_stmt 0 view .LVU433
 1490 0130 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1491 0135 CE 54 82 05             		mov.B	1410[r5], r4
 1492 0139 78 34                   		bset	#3, r4
 1493 013b CB 54 82 05             		mov.B	r4, 1410[r5]
 1494 013f 38 11 FF                		bra	.L119
 1495                             	.L133:
 879:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1496                             		.loc 1 879 59 discriminator 1 view .LVU434
 1497 0142 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1498 0147 CE 55 81 05             		mov.B	1409[r5], r5
 879:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1499                             		.loc 1 879 37 discriminator 1 view .LVU435
 1500 014b FD 74 C5 10             		tst	#16, r5
 1501 014f 3A 11 FF                		beq	.L120
 882:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1502                             		.loc 1 882 9 is_stmt 1 view .LVU436
 1503 0152 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1504 0158 66 02                   		mov.L	#0, r2
 1505 015a 66 81                   		mov.L	#8, r1
 1506 015c 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1507                             	.LVL163:
 885:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1508                             		.loc 1 885 9 view .LVU437
 885:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1509                             		.loc 1 885 32 is_stmt 0 view .LVU438
 1510 0160 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1511 0165 CE 54 82 05             		mov.B	1410[r5], r4
 1512 0169 78 44                   		bset	#4, r4
 1513 016b CB 54 82 05             		mov.B	r4, 1410[r5]
 1514 016f 38 F1 FE                		bra	.L120
 1515                             	.L134:
 891:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1516                             		.loc 1 891 59 discriminator 1 view .LVU439
 1517 0172 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1518 0177 CE 55 81 05             		mov.B	1409[r5], r5
 891:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1519                             		.loc 1 891 37 discriminator 1 view .LVU440
 1520 017b FD 74 C5 20             		tst	#32, r5
 1521 017f 3A F1 FE                		beq	.L121
 894:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1522                             		.loc 1 894 9 is_stmt 1 view .LVU441
 1523 0182 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1524 0188 66 02                   		mov.L	#0, r2
 1525 018a 66 91                   		mov.L	#9, r1
 1526 018c 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1527                             	.LVL164:
 897:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1528                             		.loc 1 897 9 view .LVU442
 897:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1529                             		.loc 1 897 32 is_stmt 0 view .LVU443
 1530 0190 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1531 0195 CE 54 82 05             		mov.B	1410[r5], r4
 1532 0199 78 54                   		bset	#5, r4
 1533 019b CB 54 82 05             		mov.B	r4, 1410[r5]
 1534 019f 38 D1 FE                		bra	.L121
 1535                             	.L135:
 990:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1536                             		.loc 1 990 60 discriminator 1 view .LVU444
 1537 01a2 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1538 01a7 CE 55 81 05             		mov.B	1409[r5], r5
 990:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1539                             		.loc 1 990 38 discriminator 1 view .LVU445
 1540 01ab FD 74 C5 40             		tst	#0x40, r5
 1541 01af 3A D1 FE                		beq	.L127
 995:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1542                             		.loc 1 995 9 is_stmt 1 view .LVU446
 995:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1543                             		.loc 1 995 34 is_stmt 0 view .LVU447
 1544 01b2 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1545 01b7 CE 55 84 05             		mov.B	1412[r5], r5
 995:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1546                             		.loc 1 995 12 view .LVU448
 1547 01bb FD 74 C5 01             		tst	#1, r5
 1548 01bf 21 43                   		bne	.L136
 1549                             		.balign 8,3,4
 1550                             	.L123:
1048:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1551                             		.loc 1 1048 5 is_stmt 1 view .LVU449
1048:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1552                             		.loc 1 1048 30 is_stmt 0 view .LVU450
 1553 01c1 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1554 01c6 CE 55 84 05             		mov.B	1412[r5], r5
1048:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1555                             		.loc 1 1048 8 view .LVU451
 1556 01ca FD 74 C5 02             		tst	#2, r5
 1557 01ce 3A B2 FE                		beq	.L127
1048:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1558                             		.loc 1 1048 64 discriminator 1 view .LVU452
 1559 01d1 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1560 01d6 CE 55 85 05             		mov.B	1413[r5], r5
1048:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1561                             		.loc 1 1048 40 discriminator 1 view .LVU453
 1562 01da FD 74 C5 02             		tst	#2, r5
 1563 01de 3A A2 FE                		beq	.L127
1051:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1564                             		.loc 1 1051 13 is_stmt 1 view .LVU454
 1565 01e1 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1566 01e7 66 02                   		mov.L	#0, r2
 1567 01e9 75 41 13                		mov.L	#19, r1
 1568 01ec 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1569                             	.LVL165:
1054:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 1570                             		.loc 1 1054 13 view .LVU455
1054:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 1571                             		.loc 1 1054 39 is_stmt 0 view .LVU456
 1572 01f0 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1573 01f5 CE 54 86 05             		mov.B	1414[r5], r4
 1574 01f9 78 14                   		bset	#1, r4
 1575 01fb CB 54 86 05             		mov.B	r4, 1414[r5]
 1576 01ff 38 81 FE                		bra	.L127
 1577                             	.L136:
 995:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1578                             		.loc 1 995 66 discriminator 1 view .LVU457
 1579 0202 FB 5E 00 70 08          		mov.L	#0x87000, r5
 1580 0207 CE 55 85 05             		mov.B	1413[r5], r5
 995:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1581                             		.loc 1 995 42 discriminator 1 view .LVU458
 1582 020b FD 74 C5 01             		tst	#1, r5
 1583 020f 20 B2                   		beq	.L123
 999:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1584                             		.loc 1 999 13 is_stmt 1 view .LVU459
 999:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1585                             		.loc 1 999 35 is_stmt 0 view .LVU460
 1586 0211 FB 5E 00 12 08          		mov.L	#0x81200, r5
 1587 0216 88 5D                   		mov.B	1[r5], r5
 999:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1588                             		.loc 1 999 15 view .LVU461
 1589 0218 FD 74 C5 01             		tst	#1, r5
 1590 021c 21 48                   		bne	.L137
 1591                             	.L124:
1010:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1592                             		.loc 1 1010 13 is_stmt 1 view .LVU462
1010:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1593                             		.loc 1 1010 37 is_stmt 0 view .LVU463
 1594 021e FB 5E 00 12 08          		mov.L	#0x81200, r5
 1595 0223 CD 55 41                		mov.B	65[r5], r5
1010:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1596                             		.loc 1 1010 15 view .LVU464
 1597 0226 FD 74 C5 01             		tst	#1, r5
 1598 022a 21 55                   		bne	.L138
 1599                             	.L125:
1023:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1600                             		.loc 1 1023 13 is_stmt 1 view .LVU465
1023:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1601                             		.loc 1 1023 42 is_stmt 0 view .LVU466
 1602 022c FB 5E C0 12 08          		mov.L	#0x812c0, r5
 1603 0231 88 DD                   		mov.B	3[r5], r5
1023:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1604                             		.loc 1 1023 15 view .LVU467
 1605 0233 FD 74 C5 01             		tst	#1, r5
 1606 0237 21 66                   		bne	.L139
 1607                             	.L126:
1033:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1608                             		.loc 1 1033 13 is_stmt 1 view .LVU468
1033:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1609                             		.loc 1 1033 42 is_stmt 0 view .LVU469
 1610 0239 FB 5E C0 12 08          		mov.L	#0x812c0, r5
 1611 023e 88 5D                   		mov.B	1[r5], r5
1033:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1612                             		.loc 1 1033 15 view .LVU470
 1613 0240 FD 74 C5 01             		tst	#1, r5
 1614 0244 3A 7D FF                		beq	.L123
1036:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1615                             		.loc 1 1036 17 is_stmt 1 view .LVU471
 1616 0247 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1617 024d 66 02                   		mov.L	#0, r2
 1618 024f 75 41 12                		mov.L	#18, r1
 1619 0252 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1620                             	.LVL166:
1039:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1621                             		.loc 1 1039 17 view .LVU472
1039:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1622                             		.loc 1 1039 47 is_stmt 0 view .LVU473
 1623 0256 FB 5E C0 12 08          		mov.L	#0x812c0, r5
 1624 025b 88 5C                   		mov.B	1[r5], r4
 1625 025d 7A 04                   		bclr	#0, r4
 1626 025f 80 5C                   		mov.B	r4, 1[r5]
 1627 0261 38 60 FF                		bra	.L123
 1628                             	.L137:
1002:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1629                             		.loc 1 1002 17 is_stmt 1 view .LVU474
 1630 0264 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1631 026a 66 02                   		mov.L	#0, r2
 1632 026c 66 F1                   		mov.L	#15, r1
 1633 026e 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1634                             	.LVL167:
1005:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1635                             		.loc 1 1005 17 view .LVU475
1005:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1636                             		.loc 1 1005 39 is_stmt 0 view .LVU476
 1637 0272 FB 5E 00 12 08          		mov.L	#0x81200, r5
 1638 0277 88 5C                   		mov.B	1[r5], r4
 1639 0279 7A 04                   		bclr	#0, r4
 1640 027b 80 5C                   		mov.B	r4, 1[r5]
 1641 027d 2E A1                   		bra	.L124
 1642                             	.L138:
1013:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1643                             		.loc 1 1013 17 is_stmt 1 view .LVU477
 1644 027f FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1645 0285 66 02                   		mov.L	#0, r2
 1646 0287 75 41 10                		mov.L	#16, r1
 1647 028a 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1648                             	.LVL168:
1016:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1649                             		.loc 1 1016 17 view .LVU478
1016:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1650                             		.loc 1 1016 43 is_stmt 0 view .LVU479
 1651 028e FB 5E 00 12 08          		mov.L	#0x81200, r5
 1652 0293 CD 54 41                		mov.B	65[r5], r4
 1653 0296 7A 04                   		bclr	#0, r4
 1654 0298 C7 54 41                		mov.B	r4, 65[r5]
 1655 029b 2E 91                   		bra	.L125
 1656                             	.L139:
1026:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1657                             		.loc 1 1026 17 is_stmt 1 view .LVU480
 1658 029d FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1659 02a3 66 02                   		mov.L	#0, r2
 1660 02a5 75 41 11                		mov.L	#17, r1
 1661 02a8 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1662                             	.LVL169:
1029:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1663                             		.loc 1 1029 17 view .LVU481
1029:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1664                             		.loc 1 1029 47 is_stmt 0 view .LVU482
 1665 02ac FB 5E C0 12 08          		mov.L	#0x812c0, r5
 1666 02b1 88 DC                   		mov.B	3[r5], r4
 1667 02b3 7A 04                   		bclr	#0, r4
 1668 02b5 80 DC                   		mov.B	r4, 3[r5]
 1669 02b7 2E 82                   		bra	.L126
 1670                             	.LFE16:
 1672 02b9 FD 70 40 00 00 00 80    		.section	.text.undefined_interrupt_source_isr,"ax",@progbits
 1673                             		.global	_undefined_interrupt_source_isr
 1675                             	_undefined_interrupt_source_isr:
 1676                             	.LFB17:
1068:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
1069:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function non_maskable_isr() */
1070:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_NON_MASKABLE_ISR */
1071:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1072:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_UNDEFINED_INTERRUPT_SOURCE_ISR
1073:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
1074:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: undefined_interrupt_source_isr
1075:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : All undefined interrupt vectors point to this function.
1076:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                Set a breakpoint in this function to determine which source is creating unwanted i
1077:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
1078:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
1079:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
1080:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void undefined_interrupt_source_isr(void)
1081:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1677                             		.loc 1 1081 1 is_stmt 1 view -0
 1678                             		.global	$tableentry$default$.rvectors
 1679                             	$tableentry$default$.rvectors:
 1680                             		; Note: Interrupt Handler
 1681 0000 6E EF                   		pushm	r14-r15
 1682                             	.LCFI31:
 1683 0002 6E 15                   		pushm	r1-r5
 1684                             	.LCFI32:
 1685 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1686 0009 A8 1B                   		mov.L	4[r1], r3
 1687 000b EC 12                   		mov.L	[r1], r2
 1688 000d 7E A2                   		push.l	r2
 1689                             	.LCFI33:
 1690 000f 7E A3                   		push.l	r3
 1691                             	.LCFI34:
1082:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
1083:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_UNDEFINED_INTERRUPT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1692                             		.loc 1 1083 5 view .LVU484
 1693 0011 FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1694 0017 66 02                   		mov.L	#0, r2
 1695 0019 66 B1                   		mov.L	#11, r1
 1696 001b 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1697                             	.LVL170:
1084:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function undefined_interrupt_source_isr() */
 1698                             		.loc 1 1084 1 is_stmt 0 view .LVU485
 1699 001f 7E B3                   		pop	r3
 1700 0021 7E B2                   		pop	r2
 1701 0023 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1702 0028 E3 12                   		mov.L	r2, [r1]
 1703 002a A0 1B                   		mov.L	r3, 4[r1]
 1704 002c 6F 15                   		popm	r1-r5
 1705 002e 6F EF                   		popm	r14-r15
 1706 0030 7F 95                   		rte
 1707                             	.LFE17:
 1709                             		.section	.text.bus_error_isr,"ax",@progbits
 1710                             		.global	_bus_error_isr
 1712                             	_bus_error_isr:
 1713                             	.LFB18:
1085:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
1086:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1087:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_BUS_ERROR_ISR
1088:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
1089:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: bus_error_isr
1090:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : This interrupt will fire if the user tries 
1091:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                to access code or data from one of the reserved areas in the memory map, including
1092:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                by disabled chip selects. A nop() statement is included here as a convenient place
1093:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                during debugging and development, and further handling should be added by the user
1094:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                application.
1095:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
1096:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return value : none
1097:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
1098:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void bus_error_isr (void)
1099:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1714                             		.loc 1 1099 1 is_stmt 1 view -0
 1715                             		.global	$tableentry$16$.rvectors
 1716                             	$tableentry$16$.rvectors:
 1717                             		; Note: Interrupt Handler
 1718 0000 6E EF                   		pushm	r14-r15
 1719                             	.LCFI35:
 1720 0002 6E 15                   		pushm	r1-r5
 1721                             	.LCFI36:
 1722 0004 FB 1E 30 14 08          		mov.L	#0x81430, r1
 1723 0009 A8 1B                   		mov.L	4[r1], r3
 1724 000b EC 12                   		mov.L	[r1], r2
 1725 000d 7E A2                   		push.l	r2
 1726                             	.LCFI37:
 1727 000f 7E A3                   		push.l	r3
 1728                             	.LCFI38:
1100:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Clear the bus error */
1101:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     BSC.BERCLR.BIT.STSCLR = 1;
 1729                             		.loc 1 1101 5 view .LVU487
 1730                             		.loc 1 1101 27 is_stmt 0 view .LVU488
 1731 0011 FB 5E 00 13 08          		mov.L	#0x81300, r5
 1732 0016 CC 54                   		mov.B	[r5], r4
 1733 0018 78 04                   		bset	#0, r4
 1734 001a C3 54                   		mov.B	r4, [r5]
1102:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1103:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* 
1104:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         To find the address that was accessed when the bus error occurred, read the register BSC.BE
1105:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         The upper 13 bits of this register contain the upper 13-bits of the offending address (in 5
1106:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     */
1107:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1108:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
1109:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_BUS_ERROR, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1735                             		.loc 1 1109 5 is_stmt 1 view .LVU489
 1736 001c FB 32 00 00 00 10       		mov.L	#0x10000000, r3
 1737 0022 66 02                   		mov.L	#0, r2
 1738 0024 66 C1                   		mov.L	#12, r1
 1739 0026 05 00 00 00             		bsr	_R_BSP_InterruptControl
 1740                             	.LVL171:
1110:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function bus_error_isr() */
 1741                             		.loc 1 1110 1 is_stmt 0 view .LVU490
 1742 002a 7E B3                   		pop	r3
 1743 002c 7E B2                   		pop	r2
 1744 002e FB 1E 30 14 08          		mov.L	#0x81430, r1
 1745 0033 E3 12                   		mov.L	r2, [r1]
 1746 0035 A0 1B                   		mov.L	r3, 4[r1]
 1747 0037 6F 15                   		popm	r1-r5
 1748 0039 6F EF                   		popm	r14-r15
 1749 003b 7F 95                   		rte
 1750                             	.LFE18:
 1752                             		.section	.bss.g_bsp_vectors,"aw",@nobits
 1753                             		.balign 4
 1756                             	_g_bsp_vectors:
 1757 0000 00 00 00 00 00 00 00 00 		.zero	444
 1757      00 00 00 00 00 00 00 00 
 1757      00 00 00 00 00 00 00 00 
 1757      00 00 00 00 00 00 00 00 
 1757      00 00 00 00 00 00 00 00 
 2221                             	.Letext0:
 2222                             		.file 2 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2223                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2224                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 2225                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2226                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2227                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2228                             		.file 8 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_rx_compi
 2229                             		.file 9 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/register
 2230                             		.file 10 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_loc
 2231                             		.file 11 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_int
 2232                             		.file 12 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/r_bsp_c
 2233                             		.file 13 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_map
 2234                             		.file 14 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_rx_intr
