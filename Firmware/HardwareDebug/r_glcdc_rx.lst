   1                             		.file	"r_glcdc_rx.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.R_GLCDC_Open,"ax",@progbits
   5                             		.global	_R_GLCDC_Open
   7                             	_R_GLCDC_Open:
   8                             	.LVL0:
   9                             	.LFB3:
  10                             		.file 1 "../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c"
   1:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
   2:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * DISCLAIMER
   3:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * This software is supplied by Renesas Electronics Corporation and is only intended for use with R
   4:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prot
   5:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * applicable laws, including copyright laws.
   6:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
   8:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAI
   9:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS A
  10:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY R
  11:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES
  12:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * Renesas reserves the right, without notice, to make changes to this software and to discontinue 
  13:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * this software. By using this software, you agree to the additional terms and conditions found by
  14:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * following link:
  15:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * http://www.renesas.com/disclaimer
  16:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *
  17:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * Copyright (C) 2019-2020 Renesas Electronics Corporation. All rights reserved.
  18:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
  19:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
  20:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * File Name    : r_glcdc_rx.c
  21:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * Version      : 1.50
  22:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * Description  : GLCDC API functions.
  23:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
  24:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
  25:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  * History : DD.MM.YYYY Version   Description
  26:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *         : 01.10.2017 1.00      First Release
  27:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *         : 04.04.2019 1.10      Added the comment to loop statement.
  28:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *                                Added support for GNUC and ICCRX.
  29:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *                                Deleted the inline expansion of R_GLCDC_GetVersion.
  30:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *         : 20.09.2019 1.30      Changed the comment based on Doxygen format.
  31:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *         : 30.06.2020 1.40      Removed "const" from the argument type of R_GLCDC_Open function.
  32:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *                                Added a process to call r_glcdc_qe_parameters_setting function to
  33:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *         : 06.11.2020 1.50      Added R_GLCDC_ClutUpdate_NoReflect function.
  34:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
  35:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
  36:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  Includes <System Includes> , "Project Includes"
  37:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
  38:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #include "r_glcdc_private.h"
  39:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
  40:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
  41:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  Exported global variables (to be accessed by other files)
  42:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
  43:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /* GLCD control block */
  44:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** glcdc_ctrl_t g_ctrl_blk =
  45:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** {
  46:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     GLCDC_STATE_CLOSED,
  47:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     false,
  48:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     { 0U, 0U }, 0U, 0U,
  49:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     { false, false },
  50:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     NULL,
  51:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     false,
  52:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     { false, false, false } };
  53:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
  54:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
  55:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
  56:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  Private global variables and functions
  57:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
  58:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
  59:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
  60:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Function Name: R_GLCDC_Open
  61:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
  62:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@brief This function initializes the GLCDC FIT module. This function must be called before callin
  63:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *any other API functions.
  64:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] *p_cfg Pointer to the GLCDC setting data structure.
  65:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_SUCCESS                    Processing has been completed successfully.
  66:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_PTR            The p_cfg parameter is NULL pointer.
  67:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_LOCK_FUNC              GLCDC resource is used by another process
  68:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_ARG            The argument for the GLCDC setting data is invalid.
  69:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_MODE           Function cannot be executed in this mode.
  70:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_TIMING_SETTING Timing setting of the panel output signal is invalid.
  71:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_LAYER_SETTING  Graphics screen setting is invalid.
  72:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_ALIGNMENT      Start address of the frame buffer is invalid.
  73:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_GAMMA_SETTING  Gamma correction setting is invalid.
  74:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_CLUT_ACCESS    CLUT memory setting is invalid.
  75:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_BLEND_SETTING  Setting for blending is invalid.
  76:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@details This function releases the GLCDC module-stop state and software reset to enable the GLCD
  77:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Then it specifies the panel clock, the panel output signal timing, background screen, graphics sc
  78:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *output data format, correction processing, and interrupts used by the GLCDC.
  79:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *This function can be executed when the mode is 'GLCDC_STATE_CLOSED'.
  80:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *When processing in this function has been completed successfully, a transition is made to
  81:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *'GLCDC_STATE_NOT_DISPLAYING'.\n
  82:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *The GLCDC_CFG_CONFIGURATION_MODE configuration option switches the method of setting the GLCDC se
  83:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *For details, refer to the document of this FIT module.
  84:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@note (1) If the target graphics screen is disabled by setting p_base to NULL in this function\n
  85:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *The graphics screen setting in the R_GLCDC_LayerChange function and CLUT memory updates in the R_
  86:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *function becomes disabled.
  87:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *To enable the disabled graphics, execute the R_GLCDC_Open function again and set the target graph
  88:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *to be enabled.\n
  89:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *(2) Notes on macro line offset setting\n
  90:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *On the hardware specification, since data is read from the frame buffer for every 64 bytes, set a
  91:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *structure member input.offset (macro line offset).
  92:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *If it is not possible to observe this restriction, refer to the application note for details.
  93:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
  94:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** glcdc_err_t R_GLCDC_Open(glcdc_cfg_t * const p_cfg)
  95:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** {
  11                             		.loc 1 95 1 view -0
  12                             		.loc 1 95 1 is_stmt 0 view .LVU1
  13 0000 6E 6B                   		pushm	r6-r11
  14                             	.LCFI0:
  15 0002 60 40                   		sub	#4, r0
  16                             	.LCFI1:
  96:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     uint32_t frame;
  17                             		.loc 1 96 5 is_stmt 1 view .LVU2
  97:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_interrupt_cfg_t initial_interrupt;
  18                             		.loc 1 97 5 view .LVU3
  98:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
  99:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 100:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_err_t err = GLCDC_SUCCESS;
  19                             		.loc 1 100 5 view .LVU4
  20                             	.LVL1:
 101:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 102:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 103:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Status check */
 104:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_CLOSED != g_ctrl_blk.state)
  21                             		.loc 1 104 5 view .LVU5
  22                             		.loc 1 104 41 is_stmt 0 view .LVU6
  23 0004 FB 72 00 00 00 00       		mov.L	#_g_ctrl_blk, r7
  24 000a EC 77                   		mov.L	[r7], r7
  25                             		.loc 1 104 8 view .LVU7
  26 000c 61 07                   		cmp	#0, r7
  27 000e 3B C8 01                		bne	.L13
 105:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 106:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_MODE;
 107:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 108:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 109:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 110:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Argument check */
 111:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (NULL == p_cfg)
  28                             		.loc 1 111 5 is_stmt 1 view .LVU8
  29                             		.loc 1 111 8 is_stmt 0 view .LVU9
  30 0011 61 01                   		cmp	#0, r1
  31 0013 3A C8 01                		beq	.L14
  32 0016 EF 17                   		mov.L	r1, r7
 112:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 113:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_PTR;
 114:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 115:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 116:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 117:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if ((GLCDC_CFG_CONFIGURATION_MODE) || defined(QE_DISPLAY_CONFIGURATION))
 118:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Parameter setting by configuration options */
 119:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_qe_parameters_setting(p_cfg);
  33                             		.loc 1 119 5 is_stmt 1 view .LVU10
  34 0018 05 00 00 00             		bsr	_r_glcdc_qe_parameters_setting
  35                             	.LVL2:
 120:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 121:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 122:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Store position information to the control block (it is necessary to set the layer and blendi
 123:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     g_ctrl_blk.active_start_pos.x = (int16_t) (p_cfg->output.htiming.back_porch + p_cfg->output.hti
  36                             		.loc 1 123 5 view .LVU11
  37                             		.loc 1 123 69 is_stmt 0 view .LVU12
  38 001c 9F F5                   		mov.W	60[r7], r5
  39                             		.loc 1 123 104 view .LVU13
  40 001e 9F FC                   		mov.W	62[r7], r4
  41                             		.loc 1 123 81 view .LVU14
  42 0020 4B 45                   		add	r4, r5
  43                             		.loc 1 123 35 view .LVU15
  44 0022 FB A2 00 00 00 00       		mov.L	#_g_ctrl_blk, r10
  45 0028 D7 A5 03                		mov.W	r5, 6[r10]
 124:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     g_ctrl_blk.active_start_pos.y = (int16_t) (p_cfg->output.vtiming.back_porch + p_cfg->output.vti
  46                             		.loc 1 124 5 is_stmt 1 view .LVU16
  47                             		.loc 1 124 69 is_stmt 0 view .LVU17
  48 002b DD 75 22                		mov.W	68[r7], r5
  49                             		.loc 1 124 104 view .LVU18
  50 002e DD 74 23                		mov.W	70[r7], r4
  51                             		.loc 1 124 81 view .LVU19
  52 0031 4B 45                   		add	r4, r5
  53                             		.loc 1 124 35 view .LVU20
  54 0033 D7 A5 04                		mov.W	r5, 8[r10]
 125:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     g_ctrl_blk.hsize = p_cfg->output.htiming.display_cyc;
  55                             		.loc 1 125 5 is_stmt 1 view .LVU21
  56                             		.loc 1 125 22 is_stmt 0 view .LVU22
  57 0036 D5 7A 1C 05             		mov.W	56[r7], 10[r10]
 126:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     g_ctrl_blk.vsize = p_cfg->output.vtiming.display_cyc;
  58                             		.loc 1 126 5 is_stmt 1 view .LVU23
  59                             		.loc 1 126 22 is_stmt 0 view .LVU24
  60 003a D5 7A 20 06             		mov.W	64[r7], 12[r10]
 127:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 128:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Subscribe each interrupt function  */
 129:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (false == g_ctrl_blk.is_entry)
  61                             		.loc 1 129 5 is_stmt 1 view .LVU25
  62                             		.loc 1 129 8 is_stmt 0 view .LVU26
  63 003e 59 AA 04                		movu.B	4[r10], r10
  64 0041 61 0A                   		cmp	#0, r10
  65 0043 20 7A                   		beq	.L17
  66                             	.L3:
 130:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 131:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         R_BSP_InterruptWrite (BSP_INT_SRC_AL1_GLCDC_VPOS, (bsp_int_cb_t) r_glcdc_line_detect_isr);
 132:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         R_BSP_InterruptWrite (BSP_INT_SRC_AL1_GLCDC_GR1UF, (bsp_int_cb_t) r_glcdc_underflow_1_isr);
 133:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         R_BSP_InterruptWrite (BSP_INT_SRC_AL1_GLCDC_GR2UF, (bsp_int_cb_t) r_glcdc_underflow_2_isr);
 134:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 135:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         g_ctrl_blk.is_entry = true;
 136:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 137:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 138:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Save status of frame buffer read enable */
 139:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (NULL == p_cfg->input[GLCDC_FRAME_LAYER_1].p_base)
  67                             		.loc 1 139 5 is_stmt 1 view .LVU27
  68                             		.loc 1 139 50 is_stmt 0 view .LVU28
  69 0045 EC 7A                   		mov.L	[r7], r10
  70                             		.loc 1 139 8 view .LVU29
  71 0047 61 0A                   		cmp	#0, r10
  72 0049 3A A8 00                		beq	.L18
 140:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 141:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         g_ctrl_blk.graphics_read_enable[GLCDC_FRAME_LAYER_1] = false;
 142:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 143:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     else
 144:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 145:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         g_ctrl_blk.graphics_read_enable[GLCDC_FRAME_LAYER_1] = true;
  73                             		.loc 1 145 9 is_stmt 1 view .LVU30
  74                             		.loc 1 145 62 is_stmt 0 view .LVU31
  75 004c FB A2 00 00 00 00       		mov.L	#_g_ctrl_blk, r10
  76 0052 F9 A4 0E 01             		mov.B	#1, 14[r10]
  77                             	.L5:
 146:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 147:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 148:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (NULL == p_cfg->input[GLCDC_FRAME_LAYER_2].p_base)
  78                             		.loc 1 148 5 is_stmt 1 view .LVU32
  79                             		.loc 1 148 50 is_stmt 0 view .LVU33
  80 0056 ED 7A 07                		mov.L	28[r7], r10
  81                             		.loc 1 148 8 view .LVU34
  82 0059 61 0A                   		cmp	#0, r10
  83 005b 3A A3 00                		beq	.L19
 149:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 150:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         g_ctrl_blk.graphics_read_enable[GLCDC_FRAME_LAYER_2] = false;
 151:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 152:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     else
 153:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 154:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         g_ctrl_blk.graphics_read_enable[GLCDC_FRAME_LAYER_2] = true;
  84                             		.loc 1 154 9 is_stmt 1 view .LVU35
  85                             		.loc 1 154 62 is_stmt 0 view .LVU36
  86 005e FB A2 00 00 00 00       		mov.L	#_g_ctrl_blk, r10
  87 0064 F9 A4 0F 01             		mov.B	#1, 15[r10]
  88                             	.L7:
 155:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 156:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 157:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Save callback function */
 158:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     g_ctrl_blk.p_callback = p_cfg->p_callback;
  89                             		.loc 1 158 5 is_stmt 1 view .LVU37
  90                             		.loc 1 158 27 is_stmt 0 view .LVU38
  91 0068 FB A2 00 00 00 00       		mov.L	#_g_ctrl_blk, r10
  92 006e E5 7A 45 04             		mov.L	276[r7], 16[r10]
 159:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 160:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Save setting of interrupt */
 161:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     g_ctrl_blk.interrupt.vpos_enable = p_cfg->interrupt.vpos_enable;
  93                             		.loc 1 161 5 is_stmt 1 view .LVU39
  94                             		.loc 1 161 38 is_stmt 0 view .LVU40
  95 0072 C6 7A 0F 01 15          		mov.B	271[r7], 21[r10]
 162:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     g_ctrl_blk.interrupt.gr1uf_enable = p_cfg->interrupt.gr1uf_enable;
  96                             		.loc 1 162 5 is_stmt 1 view .LVU41
  97                             		.loc 1 162 57 is_stmt 0 view .LVU42
  98 0077 CE 75 10 01             		mov.B	272[r7], r5
  99                             		.loc 1 162 39 view .LVU43
 100 007b C7 A5 16                		mov.B	r5, 22[r10]
 163:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     g_ctrl_blk.interrupt.gr2uf_enable = p_cfg->interrupt.gr2uf_enable;
 101                             		.loc 1 163 5 is_stmt 1 view .LVU44
 102                             		.loc 1 163 57 is_stmt 0 view .LVU45
 103 007e CE 74 11 01             		mov.B	273[r7], r4
 104                             		.loc 1 163 39 view .LVU46
 105 0082 C7 A4 17                		mov.B	r4, 23[r10]
 164:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 165:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* If one of the interrupt setting is enable, setting value is set after first vpos interrupt *
 166:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if ((true == p_cfg->interrupt.vpos_enable) || (true == p_cfg->interrupt.gr1uf_enable)
 106                             		.loc 1 166 5 is_stmt 1 view .LVU47
 107                             		.loc 1 166 8 is_stmt 0 view .LVU48
 108 0085 5A 7A 0F 01             		movu.B	271[r7], r10
 109 0089 61 0A                   		cmp	#0, r10
 110 008b 21 0D                   		bne	.L8
 111                             		.loc 1 166 48 discriminator 1 view .LVU49
 112 008d 5B 55                   		movu.B	r5, r5
 113 008f 61 05                   		cmp	#0, r5
 114 0091 1F                      		bne	.L8
 167:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             || (true == p_cfg->interrupt.gr2uf_enable))
 115                             		.loc 1 167 13 view .LVU50
 116 0092 5B 44                   		movu.B	r4, r4
 117 0094 61 04                   		cmp	#0, r4
 118 0096 20 75                   		beq	.L9
 119                             		.balign 8,3,5
 120                             	.L8:
 168:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 169:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         g_ctrl_blk.first_vpos_interrupt_flag = false;
 121                             		.loc 1 169 9 is_stmt 1 view .LVU51
 122                             		.loc 1 169 46 is_stmt 0 view .LVU52
 123 0098 FB A2 00 00 00 00       		mov.L	#_g_ctrl_blk, r10
 124 009e F9 A4 14 00             		mov.B	#0, 20[r10]
 170:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.vpos_enable = true;
 125                             		.loc 1 170 9 is_stmt 1 view .LVU53
 126                             		.loc 1 170 39 is_stmt 0 view .LVU54
 127 00a2 F8 04 01                		mov.B	#1, [r0]
 171:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.gr1uf_enable = false;
 128                             		.loc 1 171 9 is_stmt 1 view .LVU55
 129                             		.loc 1 171 40 is_stmt 0 view .LVU56
 130 00a5 3C 01 00                		mov.B	#0, 1[r0]
 172:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.gr2uf_enable = false;
 131                             		.loc 1 172 9 is_stmt 1 view .LVU57
 132                             		.loc 1 172 40 is_stmt 0 view .LVU58
 133 00a8 3C 02 00                		mov.B	#0, 2[r0]
 134                             	.L10:
 173:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 174:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     else
 175:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 176:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         g_ctrl_blk.first_vpos_interrupt_flag = true;
 177:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.vpos_enable = false;
 178:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.gr1uf_enable = false;
 179:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.gr2uf_enable = false;
 180:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 181:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 182:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 183:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Check parameters */
 184:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     err = r_glcdc_open_param_check (p_cfg);
 135                             		.loc 1 184 5 is_stmt 1 view .LVU59
 136                             		.loc 1 184 11 is_stmt 0 view .LVU60
 137 00ab EF 71                   		mov.L	r7, r1
 138 00ad 05 00 00 00             		bsr	_r_glcdc_open_param_check
 139                             	.LVL3:
 140 00b1 EF 16                   		mov.L	r1, r6
 141                             	.LVL4:
 185:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_SUCCESS != err)
 142                             		.loc 1 185 5 is_stmt 1 view .LVU61
 143                             		.loc 1 185 8 is_stmt 0 view .LVU62
 144 00b3 61 01                   		cmp	#0, r1
 145 00b5 20 6B                   		beq	.L20
 146                             	.LVL5:
 147 00b7 03                      		.balign 8,3,1
 148                             	.L1:
 186:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 187:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return err;
 188:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 189:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 190:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 191:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Check GLCDC resource is locked by another process */
 192:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (false == R_BSP_HardwareLock ((mcu_lock_t) BSP_LOCK_GLCDC))
 193:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 194:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_LOCK_FUNC;
 195:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 196:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 197:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Supply the peripheral clock to the GLCD module */
 198:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_power_on ();
 199:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 200:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Release GLCD from a SW reset status. */
 201:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_release_software_reset ();
 202:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 203:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Set the dot clock frequency */
 204:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_clock_set (p_cfg);
 205:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 206:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Set the panel signal timing */
 207:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_sync_signal_set (p_cfg);
 208:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 209:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Configure the background screen */
 210:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_background_screen_set (p_cfg);
 211:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 212:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Configure the graphics plane layers */
 213:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 214:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* WAIT_LOOP */
 215:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     for (frame = 0; frame <= GLCDC_FRAME_LAYER_2; frame++)
 216:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 217:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_graphics_layer_set (&p_cfg->input[frame], (glcdc_frame_layer_t) frame);
 218:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_blend_condition_set (&p_cfg->blend[frame], (glcdc_frame_layer_t) frame);
 219:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_graphics_chromakey_set (&p_cfg->chromakey[frame], (glcdc_frame_layer_t) frame);
 220:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_clut_update (&p_cfg->clut[frame], (glcdc_frame_layer_t) frame);
 221:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 222:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 223:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Configure the output control block */
 224:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_output_block_set (p_cfg);
 225:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 226:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Configure the color correction setting (brightness, brightness and gamma correction) */
 227:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_brightness_correction (&p_cfg->output.brightness);
 228:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_contrast_correction (&p_cfg->output.contrast);
 229:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_gamma_correction (&p_cfg->output.gamma);
 230:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 231:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Set the line number which is suppose to happen the line detect interrupt */
 232:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_line_detect_number_set (
 233:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             (uint16_t) (((p_cfg->output.vtiming.sync_width + p_cfg->output.vtiming.back_porch)
 234:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                     + p_cfg->output.vtiming.display_cyc) + BG_PLANE_HSYNC_POS_MIN));
 235:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 236:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Enable the GLCD detections and interrupts */
 237:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_detect_setting (&p_cfg->detection);
 238:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_interrupt_setting (&initial_interrupt);
 239:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 240:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Allow reading of graphics data */
 241:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_graphics_read_enable ();
 242:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 243:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Change GLCDC driver state */
 244:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     g_ctrl_blk.state = GLCDC_STATE_NOT_DISPLAYING;
 245:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 246:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     return GLCDC_SUCCESS;
 247:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_Open() */
 149                             		.loc 1 247 1 view .LVU63
 150 00b8 EF 61                   		mov.L	r6, r1
 151 00ba 3F 6B 07                		rtsd	#28, r6-r11
 152                             	.LVL6:
 153                             	.L17:
 131:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         R_BSP_InterruptWrite (BSP_INT_SRC_AL1_GLCDC_GR1UF, (bsp_int_cb_t) r_glcdc_underflow_1_isr);
 154                             		.loc 1 131 9 is_stmt 1 view .LVU64
 155 00bd FB 22 00 00 00 00       		mov.L	#_r_glcdc_line_detect_isr, r2
 156 00c3 75 41 69                		mov.L	#0x69, r1
 157 00c6 05 00 00 00             		bsr	_R_BSP_InterruptWrite
 158                             	.LVL7:
 132:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         R_BSP_InterruptWrite (BSP_INT_SRC_AL1_GLCDC_GR2UF, (bsp_int_cb_t) r_glcdc_underflow_2_isr);
 159                             		.loc 1 132 9 view .LVU65
 160 00ca FB 22 00 00 00 00       		mov.L	#_r_glcdc_underflow_1_isr, r2
 161 00d0 75 41 6A                		mov.L	#0x6a, r1
 162 00d3 05 00 00 00             		bsr	_R_BSP_InterruptWrite
 163                             	.LVL8:
 133:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 164                             		.loc 1 133 9 view .LVU66
 165 00d7 FB 22 00 00 00 00       		mov.L	#_r_glcdc_underflow_2_isr, r2
 166 00dd 75 41 6B                		mov.L	#0x6b, r1
 167 00e0 05 00 00 00             		bsr	_R_BSP_InterruptWrite
 168                             	.LVL9:
 135:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 169                             		.loc 1 135 9 view .LVU67
 135:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 170                             		.loc 1 135 29 is_stmt 0 view .LVU68
 171 00e4 FB A2 00 00 00 00       		mov.L	#_g_ctrl_blk, r10
 172 00ea F9 A4 04 01             		mov.B	#1, 4[r10]
 173 00ee 38 57 FF                		bra	.L3
 174                             	.L18:
 141:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 175                             		.loc 1 141 9 is_stmt 1 view .LVU69
 141:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 176                             		.loc 1 141 62 is_stmt 0 view .LVU70
 177 00f1 FB A2 00 00 00 00       		mov.L	#_g_ctrl_blk, r10
 178 00f7 F9 A4 0E 00             		mov.B	#0, 14[r10]
 179 00fb 38 5B FF                		bra	.L5
 180                             	.L19:
 150:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 181                             		.loc 1 150 9 is_stmt 1 view .LVU71
 150:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 182                             		.loc 1 150 62 is_stmt 0 view .LVU72
 183 00fe FB A2 00 00 00 00       		mov.L	#_g_ctrl_blk, r10
 184 0104 F9 A4 0F 00             		mov.B	#0, 15[r10]
 185 0108 38 60 FF                		bra	.L7
 186                             	.L9:
 176:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.vpos_enable = false;
 187                             		.loc 1 176 9 is_stmt 1 view .LVU73
 176:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.vpos_enable = false;
 188                             		.loc 1 176 46 is_stmt 0 view .LVU74
 189 010b FB A2 00 00 00 00       		mov.L	#_g_ctrl_blk, r10
 190 0111 F9 A4 14 01             		mov.B	#1, 20[r10]
 177:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.gr1uf_enable = false;
 191                             		.loc 1 177 9 is_stmt 1 view .LVU75
 177:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.gr1uf_enable = false;
 192                             		.loc 1 177 39 is_stmt 0 view .LVU76
 193 0115 F8 04 00                		mov.B	#0, [r0]
 178:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.gr2uf_enable = false;
 194                             		.loc 1 178 9 is_stmt 1 view .LVU77
 178:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         initial_interrupt.gr2uf_enable = false;
 195                             		.loc 1 178 40 is_stmt 0 view .LVU78
 196 0118 3C 01 00                		mov.B	#0, 1[r0]
 179:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 197                             		.loc 1 179 9 is_stmt 1 view .LVU79
 179:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 198                             		.loc 1 179 40 is_stmt 0 view .LVU80
 199 011b 3C 02 00                		mov.B	#0, 2[r0]
 200 011e 2E 8D                   		bra	.L10
 201                             	.LVL10:
 202                             	.L20:
 192:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 203                             		.loc 1 192 5 is_stmt 1 view .LVU81
 192:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 204                             		.loc 1 192 18 is_stmt 0 view .LVU82
 205 0120 75 41 27                		mov.L	#39, r1
 206                             	.LVL11:
 192:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 207                             		.loc 1 192 18 view .LVU83
 208 0123 05 00 00 00             		bsr	_R_BSP_HardwareLock
 209                             	.LVL12:
 192:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 210                             		.loc 1 192 8 view .LVU84
 211 0127 61 01                   		cmp	#0, r1
 212 0129 3A B7 00                		beq	.L15
 198:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 213                             		.loc 1 198 5 is_stmt 1 view .LVU85
 214 012c 05 00 00 00             		bsr	_r_glcdc_power_on
 215                             	.LVL13:
 201:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 216                             		.loc 1 201 5 view .LVU86
 217 0130 05 00 00 00             		bsr	_r_glcdc_release_software_reset
 218                             	.LVL14:
 204:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 219                             		.loc 1 204 5 view .LVU87
 220 0134 EF 71                   		mov.L	r7, r1
 221 0136 05 00 00 00             		bsr	_r_glcdc_clock_set
 222                             	.LVL15:
 207:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 223                             		.loc 1 207 5 view .LVU88
 224 013a EF 71                   		mov.L	r7, r1
 225 013c 05 00 00 00             		bsr	_r_glcdc_sync_signal_set
 226                             	.LVL16:
 210:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 227                             		.loc 1 210 5 view .LVU89
 228 0140 EF 71                   		mov.L	r7, r1
 229 0142 05 00 00 00             		bsr	_r_glcdc_background_screen_set
 230                             	.LVL17:
 215:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 231                             		.loc 1 215 5 view .LVU90
 215:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 232                             		.loc 1 215 16 is_stmt 0 view .LVU91
 233 0146 EF 6A                   		mov.L	r6, r10
 215:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 234                             		.loc 1 215 5 view .LVU92
 235 0148 2E 3C                   		bra	.L11
 236                             	.LVL18:
 237                             	.L12:
 217:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_blend_condition_set (&p_cfg->blend[frame], (glcdc_frame_layer_t) frame);
 238                             		.loc 1 217 9 is_stmt 1 discriminator 3 view .LVU93
 217:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_blend_condition_set (&p_cfg->blend[frame], (glcdc_frame_layer_t) frame);
 239                             		.loc 1 217 37 is_stmt 0 discriminator 3 view .LVU94
 240 014a 75 41 1C                		mov.L	#28, r1
 241 014d 4F A1                   		mul	r10, r1
 217:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_blend_condition_set (&p_cfg->blend[frame], (glcdc_frame_layer_t) frame);
 242                             		.loc 1 217 9 discriminator 3 view .LVU95
 243 014f EF A2                   		mov.L	r10, r2
 244 0151 4B 71                   		add	r7, r1
 245 0153 05 00 00 00             		bsr	_r_glcdc_graphics_layer_set
 246                             	.LVL19:
 218:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_graphics_chromakey_set (&p_cfg->chromakey[frame], (glcdc_frame_layer_t) frame);
 247                             		.loc 1 218 9 is_stmt 1 discriminator 3 view .LVU96
 218:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_graphics_chromakey_set (&p_cfg->chromakey[frame], (glcdc_frame_layer_t) frame);
 248                             		.loc 1 218 38 is_stmt 0 discriminator 3 view .LVU97
 249 0157 FD C4 A1                		shll	#4, r10, r1
 250 015a 72 11 BC 00             		add	#0xbc, r1
 218:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_graphics_chromakey_set (&p_cfg->chromakey[frame], (glcdc_frame_layer_t) frame);
 251                             		.loc 1 218 9 discriminator 3 view .LVU98
 252 015e EF A2                   		mov.L	r10, r2
 253 0160 4B 71                   		add	r7, r1
 254 0162 05 00 00 00             		bsr	_r_glcdc_blend_condition_set
 255                             	.LVL20:
 219:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_clut_update (&p_cfg->clut[frame], (glcdc_frame_layer_t) frame);
 256                             		.loc 1 219 9 is_stmt 1 discriminator 3 view .LVU99
 219:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_clut_update (&p_cfg->clut[frame], (glcdc_frame_layer_t) frame);
 257                             		.loc 1 219 41 is_stmt 0 discriminator 3 view .LVU100
 258 0166 66 CB                   		mov.L	#12, r11
 259 0168 4F AB                   		mul	r10, r11
 260 016a 72 B1 DC 00             		add	#0xdc, r11, r1
 219:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         r_glcdc_clut_update (&p_cfg->clut[frame], (glcdc_frame_layer_t) frame);
 261                             		.loc 1 219 9 discriminator 3 view .LVU101
 262 016e EF A2                   		mov.L	r10, r2
 263 0170 4B 71                   		add	r7, r1
 264 0172 05 00 00 00             		bsr	_r_glcdc_graphics_chromakey_set
 265                             	.LVL21:
 220:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 266                             		.loc 1 220 9 is_stmt 1 discriminator 3 view .LVU102
 220:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 267                             		.loc 1 220 30 is_stmt 0 discriminator 3 view .LVU103
 268 0176 72 B1 F4 00             		add	#0xf4, r11, r1
 220:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 269                             		.loc 1 220 9 discriminator 3 view .LVU104
 270 017a EF A2                   		mov.L	r10, r2
 271 017c 4B 71                   		add	r7, r1
 272 017e 05 00 00 00             		bsr	_r_glcdc_clut_update
 273                             	.LVL22:
 215:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 274                             		.loc 1 215 56 discriminator 3 view .LVU105
 275 0182 62 1A                   		add	#1, r10
 276                             	.LVL23:
 277                             	.L11:
 215:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 278                             		.loc 1 215 5 discriminator 1 view .LVU106
 279 0184 61 1A                   		cmp	#1, r10
 280 0186 25 C4                   		bleu	.L12
 224:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 281                             		.loc 1 224 5 is_stmt 1 view .LVU107
 282 0188 EF 71                   		mov.L	r7, r1
 283 018a 05 00 00 00             		bsr	_r_glcdc_output_block_set
 284                             	.LVL24:
 227:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_contrast_correction (&p_cfg->output.contrast);
 285                             		.loc 1 227 5 view .LVU108
 286 018e 71 71 5C                		add	#0x5c, r7, r1
 287 0191 05 00 00 00             		bsr	_r_glcdc_brightness_correction
 288                             	.LVL25:
 228:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_gamma_correction (&p_cfg->output.gamma);
 289                             		.loc 1 228 5 view .LVU109
 290 0195 71 71 64                		add	#0x64, r7, r1
 291 0198 05 00 00 00             		bsr	_r_glcdc_contrast_correction
 292                             	.LVL26:
 229:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 293                             		.loc 1 229 5 view .LVU110
 294 019c 71 71 68                		add	#0x68, r7, r1
 295 019f 05 00 00 00             		bsr	_r_glcdc_gamma_correction
 296                             	.LVL27:
 232:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             (uint16_t) (((p_cfg->output.vtiming.sync_width + p_cfg->output.vtiming.back_porch)
 297                             		.loc 1 232 5 view .LVU111
 233:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                     + p_cfg->output.vtiming.display_cyc) + BG_PLANE_HSYNC_POS_MIN));
 298                             		.loc 1 233 48 is_stmt 0 view .LVU112
 299 01a3 DD 75 23                		mov.W	70[r7], r5
 233:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                     + p_cfg->output.vtiming.display_cyc) + BG_PLANE_HSYNC_POS_MIN));
 300                             		.loc 1 233 83 view .LVU113
 301 01a6 DD 71 22                		mov.W	68[r7], r1
 233:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                     + p_cfg->output.vtiming.display_cyc) + BG_PLANE_HSYNC_POS_MIN));
 302                             		.loc 1 233 60 view .LVU114
 303 01a9 4B 51                   		add	r5, r1
 234:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 304                             		.loc 1 234 44 view .LVU115
 305 01ab DD 75 20                		mov.W	64[r7], r5
 234:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 306                             		.loc 1 234 21 view .LVU116
 307 01ae 4B 51                   		add	r5, r1
 233:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                     + p_cfg->output.vtiming.display_cyc) + BG_PLANE_HSYNC_POS_MIN));
 308                             		.loc 1 233 13 view .LVU117
 309 01b0 62 11                   		add	#1, r1
 232:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             (uint16_t) (((p_cfg->output.vtiming.sync_width + p_cfg->output.vtiming.back_porch)
 310                             		.loc 1 232 5 view .LVU118
 311 01b2 5F 11                   		movu.W	r1, r1
 312 01b4 05 00 00 00             		bsr	_r_glcdc_line_detect_number_set
 313                             	.LVL28:
 237:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_interrupt_setting (&initial_interrupt);
 314                             		.loc 1 237 5 is_stmt 1 view .LVU119
 315 01b8 72 71 0C 01             		add	#0x10c, r7, r1
 316 01bc 05 00 00 00             		bsr	_r_glcdc_detect_setting
 317                             	.LVL29:
 238:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 318                             		.loc 1 238 5 view .LVU120
 319 01c0 EF 01                   		mov.L	r0, r1
 320 01c2 05 00 00 00             		bsr	_r_glcdc_interrupt_setting
 321                             	.LVL30:
 241:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 322                             		.loc 1 241 5 view .LVU121
 323 01c6 05 00 00 00             		bsr	_r_glcdc_graphics_read_enable
 324                             	.LVL31:
 244:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 325                             		.loc 1 244 5 view .LVU122
 244:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 326                             		.loc 1 244 22 is_stmt 0 view .LVU123
 327 01ca FB 72 00 00 00 00       		mov.L	#_g_ctrl_blk, r7
 328                             	.LVL32:
 244:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 329                             		.loc 1 244 22 view .LVU124
 330 01d0 F8 76 01                		mov.L	#1, [r7]
 246:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_Open() */
 331                             		.loc 1 246 5 is_stmt 1 view .LVU125
 246:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_Open() */
 332                             		.loc 1 246 12 is_stmt 0 view .LVU126
 333 01d3 38 E5 FE                		bra	.L1
 334                             	.LVL33:
 335                             	.L13:
 106:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 336                             		.loc 1 106 16 view .LVU127
 337 01d6 66 46                   		mov.L	#4, r6
 338 01d8 38 E0 FE                		bra	.L1
 339                             	.L14:
 113:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 340                             		.loc 1 113 16 view .LVU128
 341 01db 66 16                   		mov.L	#1, r6
 342 01dd 38 DB FE                		bra	.L1
 343                             	.LVL34:
 344                             	.L15:
 194:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 345                             		.loc 1 194 16 view .LVU129
 346 01e0 66 26                   		mov.L	#2, r6
 347                             	.LVL35:
 194:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 348                             		.loc 1 194 16 view .LVU130
 349 01e2 38 D6 FE                		bra	.L1
 350                             	.LFE3:
 352 01e5 FC 13 00                		.section	.text.R_GLCDC_Close,"ax",@progbits
 353                             		.global	_R_GLCDC_Close
 355                             	_R_GLCDC_Close:
 356                             	.LFB4:
 248:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 249:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
 250:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Function Name: R_GLCDC_Close
 251:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 252:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@brief This function closes the GLCDC FIT module.
 253:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param None.
 254:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_SUCCESS             Processing has been completed successfully.
 255:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_NOT_OPEN        R_GLCDC_Open has not been executed.
 256:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_MODE    Function cannot be executed in this mode.
 257:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@details To close the GLCDC FIT module, this function disables interrupts used by the GLCDC. Then
 258:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *the software reset and place the GLCDC in the module-stop state. This function can be executed wh
 259:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *is 'GLCDC_STATE_NOT_DISPLAYING'.
 260:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *When processing in this function has been completed successfully, a transition is made to 'GLCDC_
 261:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@note When this function is executed, registers except registers associated with the CLUT memory 
 262:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *To enable GLCDC operation again, specify necessary settings again when the R_GLCDC_Open function 
 263:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 264:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** glcdc_err_t R_GLCDC_Close(void)
 265:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** {
 357                             		.loc 1 265 1 is_stmt 1 view -0
 266:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_interrupt_cfg_t interrupt;
 358                             		.loc 1 266 5 view .LVU132
 267:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_detect_cfg_t detection;
 359                             		.loc 1 267 5 view .LVU133
 268:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 269:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Status check */
 270:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_CLOSED == g_ctrl_blk.state)
 360                             		.loc 1 270 5 view .LVU134
 361                             		.loc 1 270 41 is_stmt 0 view .LVU135
 362 0000 FB 52 00 00 00 00       		mov.L	#_g_ctrl_blk, r5
 363 0006 EC 55                   		mov.L	[r5], r5
 364                             		.loc 1 270 8 view .LVU136
 365 0008 61 05                   		cmp	#0, r5
 366 000a 20 44                   		beq	.L23
 271:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 272:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_NOT_OPEN;
 273:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 274:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_DISPLAYING == g_ctrl_blk.state)
 367                             		.loc 1 274 5 is_stmt 1 view .LVU137
 368                             		.loc 1 274 8 is_stmt 0 view .LVU138
 369 000c 61 25                   		cmp	#2, r5
 370 000e 20 43                   		beq	.L24
 265:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_interrupt_cfg_t interrupt;
 371                             		.loc 1 265 1 view .LVU139
 372 0010 60 80                   		sub	#8, r0
 373                             	.LCFI2:
 275:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 276:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_MODE;
 277:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 278:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 279:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Disable the GLCD detects */
 280:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     detection.vpos_detect = false;
 374                             		.loc 1 280 5 is_stmt 1 view .LVU140
 375                             		.loc 1 280 27 is_stmt 0 view .LVU141
 376 0012 3C 03 00                		mov.B	#0, 3[r0]
 281:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     detection.gr1uf_detect = false;
 377                             		.loc 1 281 5 is_stmt 1 view .LVU142
 378                             		.loc 1 281 28 is_stmt 0 view .LVU143
 379 0015 3C 04 00                		mov.B	#0, 4[r0]
 282:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     detection.gr2uf_detect = false;
 380                             		.loc 1 282 5 is_stmt 1 view .LVU144
 381                             		.loc 1 282 28 is_stmt 0 view .LVU145
 382 0018 3C 05 00                		mov.B	#0, 5[r0]
 283:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_detect_setting (&detection);
 383                             		.loc 1 283 5 is_stmt 1 view .LVU146
 384 001b 66 31                   		mov.L	#3, r1
 385 001d 4B 01                   		add	r0, r1
 386 001f 05 00 00 00             		bsr	_r_glcdc_detect_setting
 387                             	.LVL36:
 284:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 285:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* interrupt disable */
 286:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     interrupt.vpos_enable = false;
 388                             		.loc 1 286 5 view .LVU147
 389                             		.loc 1 286 27 is_stmt 0 view .LVU148
 390 0023 F8 04 00                		mov.B	#0, [r0]
 287:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     interrupt.gr1uf_enable = false;
 391                             		.loc 1 287 5 is_stmt 1 view .LVU149
 392                             		.loc 1 287 28 is_stmt 0 view .LVU150
 393 0026 3C 01 00                		mov.B	#0, 1[r0]
 288:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     interrupt.gr2uf_enable = false;
 394                             		.loc 1 288 5 is_stmt 1 view .LVU151
 395                             		.loc 1 288 28 is_stmt 0 view .LVU152
 396 0029 3C 02 00                		mov.B	#0, 2[r0]
 289:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 290:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_interrupt_setting (&interrupt);
 397                             		.loc 1 290 5 is_stmt 1 view .LVU153
 398 002c EF 01                   		mov.L	r0, r1
 399 002e 05 00 00 00             		bsr	_r_glcdc_interrupt_setting
 400                             	.LVL37:
 291:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 292:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Reset the GLCD hardware */
 293:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_software_reset ();
 401                             		.loc 1 293 5 view .LVU154
 402 0032 05 00 00 00             		bsr	_r_glcdc_software_reset
 403                             	.LVL38:
 294:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 295:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Halt the peripheral clock to the GLCD module */
 296:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_power_off ();
 404                             		.loc 1 296 5 view .LVU155
 405 0036 05 00 00 00             		bsr	_r_glcdc_power_off
 406                             	.LVL39:
 297:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 298:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Release GLCDC resource */
 299:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     R_BSP_HardwareUnlock ((mcu_lock_t) BSP_LOCK_GLCDC);
 407                             		.loc 1 299 5 view .LVU156
 408 003a 75 41 27                		mov.L	#39, r1
 409 003d 05 00 00 00             		bsr	_R_BSP_HardwareUnlock
 410                             	.LVL40:
 300:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 301:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Change GLCDC driver state */
 302:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     g_ctrl_blk.state = GLCDC_STATE_CLOSED;
 411                             		.loc 1 302 5 view .LVU157
 412                             		.loc 1 302 22 is_stmt 0 view .LVU158
 413 0041 FB 52 00 00 00 00       		mov.L	#_g_ctrl_blk, r5
 414 0047 F8 56 00                		mov.L	#0, [r5]
 303:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 304:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     return GLCDC_SUCCESS;
 415                             		.loc 1 304 5 is_stmt 1 view .LVU159
 416                             		.loc 1 304 12 is_stmt 0 view .LVU160
 417 004a 66 01                   		mov.L	#0, r1
 305:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_Close() */
 418                             		.loc 1 305 1 view .LVU161
 419 004c 67 02                   		rtsd	#8
 420                             	.L23:
 421                             	.LCFI3:
 272:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 422                             		.loc 1 272 16 view .LVU162
 423 004e 66 51                   		mov.L	#5, r1
 424 0050 02                      		rts
 425                             	.L24:
 276:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 426                             		.loc 1 276 16 view .LVU163
 427 0051 66 41                   		mov.L	#4, r1
 428                             		.loc 1 305 1 view .LVU164
 429 0053 02                      		rts
 430                             	.LFE4:
 432                             		.section	.text.R_GLCDC_Control,"ax",@progbits
 433                             		.global	_R_GLCDC_Control
 435                             	_R_GLCDC_Control:
 436                             	.LVL41:
 437                             	.LFB5:
 306:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 307:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
 308:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Function Name: R_GLCDC_Control
 309:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 310:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@brief This function performs processing according to the control command.
 311:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] cmd Control command to specify.
 312:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] p_args Pointer to the setting parameters structure.
 313:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_SUCCESS           Processing has been completed successfully.
 314:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_PTR   The p_args parameter is NULL pointer.
 315:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_ARG   The argument set is invalid.
 316:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_MODE  Function cannot be executed in this mode.
 317:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_NOT_OPEN      R_GLCDC_Open has not been executed.
 318:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_UPDATE_TIMING Update timing of the register is invalid.
 319:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@details This function performs GLCDC control processing according to the control command.
 320:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@note When the GLCDC_CMD_STOP_DISPLAY command is executed, the GLCDC stops its operation after th
 321:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *background generating block. To enable GLCDC operation again, wait for the frame end of an output
 322:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *the LCD panel, and then enable GLCDC operation.
 323:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Otherwise, the GLCDC may not operate correctly depending on the LCD panel used.
 324:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 325:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** glcdc_err_t R_GLCDC_Control(glcdc_control_cmd_t cmd, void const * const p_args)
 326:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** {
 438                             		.loc 1 326 1 is_stmt 1 view -0
 439                             		.loc 1 326 1 is_stmt 0 view .LVU166
 440 0000 6E 7A                   		pushm	r7-r10
 441                             	.LCFI4:
 327:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_detect_cfg_t *p_detection;
 442                             		.loc 1 327 5 is_stmt 1 view .LVU167
 328:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 329:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_CLOSED == g_ctrl_blk.state)
 443                             		.loc 1 329 5 view .LVU168
 444                             		.loc 1 329 41 is_stmt 0 view .LVU169
 445 0002 FB 72 00 00 00 00       		mov.L	#_g_ctrl_blk, r7
 446 0008 EC 75                   		mov.L	[r7], r5
 447                             		.loc 1 329 8 view .LVU170
 448 000a 61 05                   		cmp	#0, r5
 449 000c 3A DC 00                		beq	.L39
 450 000f EF 2A                   		mov.L	r2, r10
 451 0011 EF 17                   		mov.L	r1, r7
 330:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 331:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_NOT_OPEN;
 332:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 333:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 334:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     switch (cmd)
 452                             		.loc 1 334 5 is_stmt 1 view .LVU171
 453 0013 61 21                   		cmp	#2, r1
 454 0015 3A 89 00                		beq	.L31
 455 0018 25 1A                   		bleu	.L53
 456 001a 61 31                   		cmp	#3, r1
 457 001c 3A 9C 00                		beq	.L35
 458 001f 61 41                   		cmp	#4, r1
 459 0021 21 64                   		bne	.L54
 335:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 336:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         case GLCDC_CMD_START_DISPLAY:
 337:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 338:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_STATE_DISPLAYING == g_ctrl_blk.state)
 339:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 340:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_MODE;
 341:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 342:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 343:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Change GLCDC driver state */
 344:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             g_ctrl_blk.state = GLCDC_STATE_DISPLAYING;
 345:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 346:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Start to output the vertical and horizontal synchronization signals and screen data.
 347:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_bg_operation_enable ();
 348:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 349:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             break;
 350:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 351:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         case GLCDC_CMD_STOP_DISPLAY:
 352:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 353:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_STATE_NOT_DISPLAYING == g_ctrl_blk.state)
 354:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 355:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_MODE;
 356:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 357:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 358:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Return immediately if the register is being updated */
 359:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (true == r_glcdc_is_gr_plane_updating (GLCDC_FRAME_LAYER_1))
 360:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 361:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_UPDATE_TIMING;
 362:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 363:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (true == r_glcdc_is_gr_plane_updating (GLCDC_FRAME_LAYER_2))
 364:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 365:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_UPDATE_TIMING;
 366:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 367:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (true == r_glcdc_is_output_ctrl_updating ())
 368:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 369:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_UPDATE_TIMING;
 370:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 371:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (true == r_glcdc_is_gamma_updating ())
 372:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 373:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_UPDATE_TIMING;
 374:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 375:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (true == r_glcdc_is_register_reflecting ())
 376:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 377:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_UPDATE_TIMING;
 378:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 379:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 380:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Stop outputting the vertical and horizontal synchronization signals and screen data.
 381:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_bg_operation_disable ();
 382:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 383:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* status update */
 384:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             g_ctrl_blk.state = GLCDC_STATE_NOT_DISPLAYING;
 385:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 386:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             break;
 387:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 388:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         case GLCDC_CMD_SET_INTERRUPT:
 389:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 390:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 391:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (NULL == p_args)
 392:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 393:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_PTR;
 394:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 395:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 396:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 397:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (false == g_ctrl_blk.first_vpos_interrupt_flag)
 398:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 399:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_UPDATE_TIMING;
 400:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 401:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 402:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* interrupt setting */
 403:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_interrupt_setting ((glcdc_interrupt_cfg_t *) p_args);
 404:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 405:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             break;
 406:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 407:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         case GLCDC_CMD_CLR_DETECTED_STATUS:
 408:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 409:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 410:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (NULL == p_args)
 411:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 412:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_PTR;
 413:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 414:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 415:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             p_detection = (glcdc_detect_cfg_t *) p_args;
 416:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 417:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (true == p_detection->vpos_detect)
 418:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 419:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 r_glcdc_vpos_int_status_clear ();
 420:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 421:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (true == p_detection->gr1uf_detect)
 422:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 423:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 r_glcdc_gr1uf_int_status_clear ();
 424:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 425:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (true == p_detection->gr2uf_detect)
 426:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 427:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 r_glcdc_gr2uf_int_status_clear ();
 428:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 429:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 430:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             break;
 431:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 432:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         case GLCDC_CMD_CHANGE_BG_COLOR:
 433:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 434:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 435:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (NULL == p_args)
 460                             		.loc 1 435 13 view .LVU172
 461                             		.loc 1 435 16 is_stmt 0 view .LVU173
 462 0023 61 02                   		cmp	#0, r2
 463 0025 3A F3 00                		beq	.L51
 436:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 437:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return GLCDC_ERR_INVALID_PTR;
 438:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 439:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 440:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 441:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_bg_color_setting ((glcdc_color_t *) p_args);
 464                             		.loc 1 441 13 is_stmt 1 view .LVU174
 465 0028 EF 21                   		mov.L	r2, r1
 466                             	.LVL42:
 467                             		.loc 1 441 13 is_stmt 0 view .LVU175
 468 002a 05 00 00 00             		bsr	_r_glcdc_bg_color_setting
 469                             	.LVL43:
 442:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 443:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             break;
 470                             		.loc 1 443 13 is_stmt 1 view .LVU176
 444:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 445:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         default:
 446:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             return GLCDC_ERR_INVALID_ARG;
 447:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 448:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 449:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     return GLCDC_SUCCESS;
 471                             		.loc 1 449 12 is_stmt 0 view .LVU177
 472 002e 66 01                   		mov.L	#0, r1
 443:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 473                             		.loc 1 443 13 view .LVU178
 474 0030 2E 52                   		bra	.L29
 475                             	.LVL44:
 476                             	.L53:
 334:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 477                             		.loc 1 334 5 view .LVU179
 478 0032 61 01                   		cmp	#0, r1
 479 0034 20 55                   		beq	.L33
 480 0036 61 11                   		cmp	#1, r1
 481 0038 21 48                   		bne	.L55
 353:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 482                             		.loc 1 353 13 is_stmt 1 view .LVU180
 353:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 483                             		.loc 1 353 16 is_stmt 0 view .LVU181
 484 003a 61 15                   		cmp	#1, r5
 485 003c 3A B4 00                		beq	.L41
 359:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 486                             		.loc 1 359 13 is_stmt 1 view .LVU182
 359:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 487                             		.loc 1 359 25 is_stmt 0 view .LVU183
 488 003f 66 01                   		mov.L	#0, r1
 489                             	.LVL45:
 359:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 490                             		.loc 1 359 25 view .LVU184
 491 0041 05 00 00 00             		bsr	_r_glcdc_is_gr_plane_updating
 492                             	.LVL46:
 359:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 493                             		.loc 1 359 16 view .LVU185
 494 0045 61 01                   		cmp	#0, r1
 495 0047 3B AD 00                		bne	.L42
 363:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 496                             		.loc 1 363 13 is_stmt 1 view .LVU186
 363:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 497                             		.loc 1 363 25 is_stmt 0 view .LVU187
 498 004a 66 11                   		mov.L	#1, r1
 499 004c 05 00 00 00             		bsr	_r_glcdc_is_gr_plane_updating
 500                             	.LVL47:
 363:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 501                             		.loc 1 363 16 view .LVU188
 502 0050 61 01                   		cmp	#0, r1
 503 0052 3B A6 00                		bne	.L43
 367:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 504                             		.loc 1 367 13 is_stmt 1 view .LVU189
 367:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 505                             		.loc 1 367 25 is_stmt 0 view .LVU190
 506 0055 05 00 00 00             		bsr	_r_glcdc_is_output_ctrl_updating
 507                             	.LVL48:
 367:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 508                             		.loc 1 367 16 view .LVU191
 509 0059 61 01                   		cmp	#0, r1
 510 005b 3B A1 00                		bne	.L44
 371:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 511                             		.loc 1 371 13 is_stmt 1 view .LVU192
 371:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 512                             		.loc 1 371 25 is_stmt 0 view .LVU193
 513 005e 05 00 00 00             		bsr	_r_glcdc_is_gamma_updating
 514                             	.LVL49:
 371:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 515                             		.loc 1 371 16 view .LVU194
 516 0062 61 01                   		cmp	#0, r1
 517 0064 3B 9C 00                		bne	.L45
 375:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 518                             		.loc 1 375 13 is_stmt 1 view .LVU195
 375:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 519                             		.loc 1 375 25 is_stmt 0 view .LVU196
 520 0067 05 00 00 00             		bsr	_r_glcdc_is_register_reflecting
 521                             	.LVL50:
 375:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 522                             		.loc 1 375 16 view .LVU197
 523 006b 61 01                   		cmp	#0, r1
 524 006d 3B 97 00                		bne	.L46
 381:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 525                             		.loc 1 381 13 is_stmt 1 view .LVU198
 526 0070 05 00 00 00             		bsr	_r_glcdc_bg_operation_disable
 527                             	.LVL51:
 384:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 528                             		.loc 1 384 13 view .LVU199
 384:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 529                             		.loc 1 384 30 is_stmt 0 view .LVU200
 530 0074 FB 72 00 00 00 00       		mov.L	#_g_ctrl_blk, r7
 531                             	.LVL52:
 384:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 532                             		.loc 1 384 30 view .LVU201
 533 007a F8 76 01                		mov.L	#1, [r7]
 386:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 534                             		.loc 1 386 13 is_stmt 1 view .LVU202
 535                             		.loc 1 449 12 is_stmt 0 view .LVU203
 536 007d 66 01                   		mov.L	#0, r1
 386:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 537                             		.loc 1 386 13 view .LVU204
 538 007f 0B                      		bra	.L29
 539                             	.LVL53:
 540                             	.L55:
 446:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 541                             		.loc 1 446 20 view .LVU205
 542 0080 66 31                   		mov.L	#3, r1
 543                             	.LVL54:
 544                             		.balign 8,3,2
 545                             	.L29:
 450:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_Control() */
 546                             		.loc 1 450 1 view .LVU206
 547 0082 3F 7A 04                		rtsd	#16, r7-r10
 548                             	.LVL55:
 549                             	.L54:
 446:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 550                             		.loc 1 446 20 view .LVU207
 551 0085 66 31                   		mov.L	#3, r1
 552                             	.LVL56:
 446:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 553                             		.loc 1 446 20 view .LVU208
 554 0087 2E FB                   		bra	.L29
 555                             	.LVL57:
 556                             	.L33:
 338:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 557                             		.loc 1 338 13 is_stmt 1 view .LVU209
 338:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 558                             		.loc 1 338 16 is_stmt 0 view .LVU210
 559 0089 61 25                   		cmp	#2, r5
 560 008b 20 61                   		beq	.L40
 344:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 561                             		.loc 1 344 13 is_stmt 1 view .LVU211
 344:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 562                             		.loc 1 344 30 is_stmt 0 view .LVU212
 563 008d FB A2 00 00 00 00       		mov.L	#_g_ctrl_blk, r10
 564 0093 F8 A6 02                		mov.L	#2, [r10]
 347:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 565                             		.loc 1 347 13 is_stmt 1 view .LVU213
 566 0096 05 00 00 00             		bsr	_r_glcdc_bg_operation_enable
 567                             	.LVL58:
 349:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 568                             		.loc 1 349 13 view .LVU214
 449:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_Control() */
 569                             		.loc 1 449 12 is_stmt 0 view .LVU215
 570 009a EF 71                   		mov.L	r7, r1
 349:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 571                             		.loc 1 349 13 view .LVU216
 572 009c 2E E6                   		bra	.L29
 573                             	.LVL59:
 574                             	.L31:
 391:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 575                             		.loc 1 391 13 is_stmt 1 view .LVU217
 391:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 576                             		.loc 1 391 16 is_stmt 0 view .LVU218
 577 009e 61 02                   		cmp	#0, r2
 578 00a0 20 69                   		beq	.L47
 397:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 579                             		.loc 1 397 13 is_stmt 1 view .LVU219
 397:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 580                             		.loc 1 397 16 is_stmt 0 view .LVU220
 581 00a2 FB 72 00 00 00 00       		mov.L	#_g_ctrl_blk, r7
 582 00a8 B5 77                   		movu.B	20[r7], r7
 583 00aa 61 07                   		cmp	#0, r7
 584 00ac 20 62                   		beq	.L48
 403:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 585                             		.loc 1 403 13 is_stmt 1 view .LVU221
 586 00ae EF 21                   		mov.L	r2, r1
 587                             	.LVL60:
 403:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 588                             		.loc 1 403 13 is_stmt 0 view .LVU222
 589 00b0 05 00 00 00             		bsr	_r_glcdc_interrupt_setting
 590                             	.LVL61:
 405:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 591                             		.loc 1 405 13 is_stmt 1 view .LVU223
 449:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_Control() */
 592                             		.loc 1 449 12 is_stmt 0 view .LVU224
 593 00b4 66 01                   		mov.L	#0, r1
 405:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 594                             		.loc 1 405 13 view .LVU225
 595 00b6 2E CC                   		bra	.L29
 596                             	.LVL62:
 597                             	.L35:
 410:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 598                             		.loc 1 410 13 is_stmt 1 view .LVU226
 410:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 599                             		.loc 1 410 16 is_stmt 0 view .LVU227
 600 00b8 61 02                   		cmp	#0, r2
 601 00ba 20 59                   		beq	.L49
 415:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 602                             		.loc 1 415 13 is_stmt 1 view .LVU228
 603                             	.LVL63:
 417:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 604                             		.loc 1 417 13 view .LVU229
 417:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 605                             		.loc 1 417 16 is_stmt 0 view .LVU230
 606 00bc 58 27                   		movu.B	[r2], r7
 607 00be 61 07                   		cmp	#0, r7
 608 00c0 21 14                   		bne	.L56
 609                             	.LVL64:
 610                             	.L37:
 421:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 611                             		.loc 1 421 13 is_stmt 1 view .LVU231
 421:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 612                             		.loc 1 421 16 is_stmt 0 view .LVU232
 613 00c2 59 A7 01                		movu.B	1[r10], r7
 614 00c5 61 07                   		cmp	#0, r7
 615 00c7 21 13                   		bne	.L57
 616                             	.L38:
 425:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 617                             		.loc 1 425 13 is_stmt 1 view .LVU233
 425:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 618                             		.loc 1 425 16 is_stmt 0 view .LVU234
 619 00c9 59 A7 02                		movu.B	2[r10], r7
 620 00cc 61 07                   		cmp	#0, r7
 621 00ce 21 12                   		bne	.L58
 449:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_Control() */
 622                             		.loc 1 449 12 view .LVU235
 623 00d0 66 01                   		mov.L	#0, r1
 624 00d2 2E B0                   		bra	.L29
 625                             	.LVL65:
 626                             	.L56:
 419:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 627                             		.loc 1 419 17 is_stmt 1 view .LVU236
 628 00d4 05 00 00 00             		bsr	_r_glcdc_vpos_int_status_clear
 629                             	.LVL66:
 419:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 630                             		.loc 1 419 17 is_stmt 0 view .LVU237
 631 00d8 2E EA                   		bra	.L37
 632                             	.L57:
 423:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 633                             		.loc 1 423 17 is_stmt 1 view .LVU238
 634 00da 05 00 00 00             		bsr	_r_glcdc_gr1uf_int_status_clear
 635                             	.LVL67:
 636 00de 2E EB                   		bra	.L38
 637                             	.L58:
 427:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 638                             		.loc 1 427 17 view .LVU239
 639 00e0 05 00 00 00             		bsr	_r_glcdc_gr2uf_int_status_clear
 640                             	.LVL68:
 449:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_Control() */
 641                             		.loc 1 449 12 is_stmt 0 view .LVU240
 642 00e4 66 01                   		mov.L	#0, r1
 643 00e6 2E 9C                   		bra	.L29
 644                             	.LVL69:
 645                             	.L39:
 331:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 646                             		.loc 1 331 16 view .LVU241
 647 00e8 66 51                   		mov.L	#5, r1
 648                             	.LVL70:
 331:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 649                             		.loc 1 331 16 view .LVU242
 650 00ea 2E 98                   		bra	.L29
 651                             	.LVL71:
 652                             	.L40:
 340:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 653                             		.loc 1 340 24 view .LVU243
 654 00ec 66 41                   		mov.L	#4, r1
 655                             	.LVL72:
 340:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 656                             		.loc 1 340 24 view .LVU244
 657 00ee 2E 94                   		bra	.L29
 658                             	.LVL73:
 659                             	.L41:
 355:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 660                             		.loc 1 355 24 view .LVU245
 661 00f0 66 41                   		mov.L	#4, r1
 662                             	.LVL74:
 355:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 663                             		.loc 1 355 24 view .LVU246
 664 00f2 2E 90                   		bra	.L29
 665                             	.LVL75:
 666                             	.L42:
 361:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 667                             		.loc 1 361 24 view .LVU247
 668 00f4 66 A1                   		mov.L	#10, r1
 669 00f6 2E 8C                   		bra	.L29
 670                             	.L43:
 365:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 671                             		.loc 1 365 24 view .LVU248
 672 00f8 66 A1                   		mov.L	#10, r1
 673 00fa 2E 88                   		bra	.L29
 674                             	.L44:
 369:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 675                             		.loc 1 369 24 view .LVU249
 676 00fc 66 A1                   		mov.L	#10, r1
 677 00fe 2E 84                   		bra	.L29
 678                             	.L45:
 373:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 679                             		.loc 1 373 24 view .LVU250
 680 0100 66 A1                   		mov.L	#10, r1
 681 0102 2E 80                   		bra	.L29
 682                             	.L46:
 377:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 683                             		.loc 1 377 24 view .LVU251
 684 0104 66 A1                   		mov.L	#10, r1
 685 0106 38 7C FF                		bra	.L29
 686                             	.LVL76:
 687                             	.L47:
 393:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 688                             		.loc 1 393 24 view .LVU252
 689 0109 66 11                   		mov.L	#1, r1
 690                             	.LVL77:
 393:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 691                             		.loc 1 393 24 view .LVU253
 692 010b 38 77 FF                		bra	.L29
 693                             	.LVL78:
 694                             	.L48:
 399:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 695                             		.loc 1 399 24 view .LVU254
 696 010e 66 A1                   		mov.L	#10, r1
 697                             	.LVL79:
 399:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 698                             		.loc 1 399 24 view .LVU255
 699 0110 38 72 FF                		bra	.L29
 700                             	.LVL80:
 701                             	.L49:
 412:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 702                             		.loc 1 412 24 view .LVU256
 703 0113 66 11                   		mov.L	#1, r1
 704                             	.LVL81:
 412:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 705                             		.loc 1 412 24 view .LVU257
 706 0115 38 6D FF                		bra	.L29
 707                             	.LVL82:
 708                             	.L51:
 437:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 709                             		.loc 1 437 24 view .LVU258
 710 0118 66 11                   		mov.L	#1, r1
 711                             	.LVL83:
 437:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 712                             		.loc 1 437 24 view .LVU259
 713 011a 38 68 FF                		bra	.L29
 714                             	.LFE5:
 716 011d FC 13 00                		.section	.text.R_GLCDC_LayerChange,"ax",@progbits
 717                             		.global	_R_GLCDC_LayerChange
 719                             	_R_GLCDC_LayerChange:
 720                             	.LVL84:
 721                             	.LFB6:
 451:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 452:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
 453:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Function Name: R_GLCDC_LayerChange
 454:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 455:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@brief This function changes operation of graphics 1 and graphics 2.
 456:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] frame Graphics screen to change operation.
 457:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] p_args Pointer to the setting parameters structure.
 458:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_SUCCESS                    Processing has been completed successfully.
 459:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_PTR            The p_args parameter is NULL pointer.
 460:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_ARG            The argument set is invalid.
 461:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_MODE           Function cannot be executed in this mode.
 462:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_NOT_OPEN               R_GLCDC_Open has not been executed.
 463:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_UPDATE_TIMING  Update timing of the register is invalid.
 464:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_LAYER_SETTING Graphics screen setting is invalid.
 465:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_ALIGNMENT     Start address of the frame buffer is invalid.
 466:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_BLEND_SETTING Setting for blending is invalid.
 467:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@details This function changes operation of graphics 1 and 2.This function can be executed when t
 468:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *'GLCDC_STATE_DISPLAYING'. The mode remains unchanged after processing in this function is complet
 469:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@note None.
 470:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 471:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** glcdc_err_t R_GLCDC_LayerChange(glcdc_frame_layer_t frame, glcdc_runtime_cfg_t const * const p_args
 472:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** {
 722                             		.loc 1 472 1 is_stmt 1 view -0
 723                             		.loc 1 472 1 is_stmt 0 view .LVU261
 724 0000 6E 6A                   		pushm	r6-r10
 725                             	.LCFI5:
 473:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 474:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 475:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_err_t err = GLCDC_SUCCESS;
 726                             		.loc 1 475 5 is_stmt 1 view .LVU262
 727                             	.LVL85:
 476:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 477:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 478:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_CLOSED == g_ctrl_blk.state)
 728                             		.loc 1 478 5 view .LVU263
 729                             		.loc 1 478 41 is_stmt 0 view .LVU264
 730 0002 FB 72 00 00 00 00       		mov.L	#_g_ctrl_blk, r7
 731 0008 EC 77                   		mov.L	[r7], r7
 732                             		.loc 1 478 8 view .LVU265
 733 000a 61 07                   		cmp	#0, r7
 734 000c 20 5B                   		beq	.L61
 479:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 480:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_NOT_OPEN;
 481:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 482:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_NOT_DISPLAYING == g_ctrl_blk.state)
 735                             		.loc 1 482 5 is_stmt 1 view .LVU266
 736                             		.loc 1 482 8 is_stmt 0 view .LVU267
 737 000e 61 17                   		cmp	#1, r7
 738 0010 20 5E                   		beq	.L62
 483:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 484:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_MODE;
 485:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 486:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 487:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 488:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (NULL == p_args)
 739                             		.loc 1 488 5 is_stmt 1 view .LVU268
 740                             		.loc 1 488 8 is_stmt 0 view .LVU269
 741 0012 61 02                   		cmp	#0, r2
 742 0014 20 5E                   		beq	.L63
 489:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 490:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_PTR;
 491:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 492:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if ((GLCDC_FRAME_LAYER_1 != frame) && (GLCDC_FRAME_LAYER_2 != frame))
 743                             		.loc 1 492 5 is_stmt 1 view .LVU270
 744                             		.loc 1 492 8 is_stmt 0 view .LVU271
 745 0016 61 11                   		cmp	#1, r1
 746 0018 24 5E                   		bgtu	.L64
 493:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 494:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_ARG;
 495:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 496:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 497:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 498:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (false == g_ctrl_blk.graphics_read_enable[frame])
 747                             		.loc 1 498 5 is_stmt 1 view .LVU272
 748                             		.loc 1 498 49 is_stmt 0 view .LVU273
 749 001a 70 17 00 00 00 00       		add	#_g_ctrl_blk, r1, r7
 750                             		.loc 1 498 8 view .LVU274
 751 0020 B3 F7                   		movu.B	14[r7], r7
 752 0022 61 07                   		cmp	#0, r7
 753 0024 20 56                   		beq	.L65
 754 0026 EF 2A                   		mov.L	r2, r10
 755 0028 EF 17                   		mov.L	r1, r7
 499:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 500:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_ARG;
 501:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 502:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 503:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Return immediately if the register updating is in progress. */
 504:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_is_gr_plane_updating (frame))
 756                             		.loc 1 504 5 is_stmt 1 view .LVU275
 757                             		.loc 1 504 17 is_stmt 0 view .LVU276
 758 002a 05 00 00 00             		bsr	_r_glcdc_is_gr_plane_updating
 759                             	.LVL86:
 760                             		.loc 1 504 8 view .LVU277
 761 002e 61 01                   		cmp	#0, r1
 762 0030 21 4E                   		bne	.L66
 505:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 506:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_UPDATE_TIMING;
 507:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 508:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_is_register_reflecting ())
 763                             		.loc 1 508 5 is_stmt 1 view .LVU278
 764                             		.loc 1 508 17 is_stmt 0 view .LVU279
 765 0032 05 00 00 00             		bsr	_r_glcdc_is_register_reflecting
 766                             	.LVL87:
 767                             		.loc 1 508 8 view .LVU280
 768 0036 61 01                   		cmp	#0, r1
 769 0038 21 4A                   		bne	.L67
 509:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 510:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_UPDATE_TIMING;
 511:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 512:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 513:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 514:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 515:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     err = r_glcdc_param_check_layer (p_args);
 770                             		.loc 1 515 5 is_stmt 1 view .LVU281
 771                             		.loc 1 515 11 is_stmt 0 view .LVU282
 772 003a EF A1                   		mov.L	r10, r1
 773 003c 05 00 00 00             		bsr	_r_glcdc_param_check_layer
 774                             	.LVL88:
 775 0040 EF 16                   		mov.L	r1, r6
 776                             	.LVL89:
 516:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 517:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_SUCCESS != err)
 777                             		.loc 1 517 5 is_stmt 1 view .LVU283
 778                             		.loc 1 517 8 is_stmt 0 view .LVU284
 779 0042 61 01                   		cmp	#0, r1
 780 0044 21 25                   		bne	.L59
 518:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 519:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return err;
 520:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 521:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 522:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 523:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 524:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Configure the graphics plane layers */
 525:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_graphics_layer_set (&p_args->input, frame);
 781                             		.loc 1 525 5 is_stmt 1 view .LVU285
 782 0046 EF 72                   		mov.L	r7, r2
 783 0048 EF A1                   		mov.L	r10, r1
 784                             	.LVL90:
 785                             		.loc 1 525 5 is_stmt 0 view .LVU286
 786 004a 05 00 00 00             		bsr	_r_glcdc_graphics_layer_set
 787                             	.LVL91:
 526:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 527:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Configure the alpha blending condition */
 528:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_blend_condition_set (&p_args->blend, frame);
 788                             		.loc 1 528 5 is_stmt 1 view .LVU287
 789 004e EF 72                   		mov.L	r7, r2
 790 0050 71 A1 1C                		add	#28, r10, r1
 791 0053 05 00 00 00             		bsr	_r_glcdc_blend_condition_set
 792                             	.LVL92:
 529:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 530:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Configure the chroma key */
 531:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_graphics_chromakey_set (&p_args->chromakey, frame);
 793                             		.loc 1 531 5 view .LVU288
 794 0057 EF 72                   		mov.L	r7, r2
 795 0059 71 A1 2C                		add	#44, r10, r1
 796 005c 05 00 00 00             		bsr	_r_glcdc_graphics_chromakey_set
 797                             	.LVL93:
 532:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 533:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Reflect the graphics module register value to the GLCD internal operations
 534:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****      *  (at the timing of the next Vsync assertion) */
 535:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_gr_plane_update (frame);
 798                             		.loc 1 535 5 view .LVU289
 799 0060 EF 71                   		mov.L	r7, r1
 800 0062 05 00 00 00             		bsr	_r_glcdc_gr_plane_update
 801                             	.LVL94:
 536:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 537:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     return GLCDC_SUCCESS;
 802                             		.loc 1 537 5 view .LVU290
 803                             		.loc 1 537 12 is_stmt 0 view .LVU291
 804 0066 0B                      		bra	.L59
 805                             	.LVL95:
 806                             	.L61:
 480:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 807                             		.loc 1 480 16 view .LVU292
 808 0067 66 56                   		mov.L	#5, r6
 809                             	.LVL96:
 810                             		.balign 8,3,1
 811                             	.L59:
 538:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_LayerChange() */
 812                             		.loc 1 538 1 view .LVU293
 813 0069 EF 61                   		mov.L	r6, r1
 814 006b 3F 6A 05                		rtsd	#20, r6-r10
 815                             	.LVL97:
 816                             	.L62:
 484:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 817                             		.loc 1 484 16 view .LVU294
 818 006e 66 46                   		mov.L	#4, r6
 819 0070 2E F9                   		bra	.L59
 820                             	.L63:
 490:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 821                             		.loc 1 490 16 view .LVU295
 822 0072 66 16                   		mov.L	#1, r6
 823 0074 2E F5                   		bra	.L59
 824                             	.L64:
 494:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 825                             		.loc 1 494 16 view .LVU296
 826 0076 66 36                   		mov.L	#3, r6
 827 0078 2E F1                   		bra	.L59
 828                             	.L65:
 500:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 829                             		.loc 1 500 16 view .LVU297
 830 007a 66 36                   		mov.L	#3, r6
 831 007c 2E ED                   		bra	.L59
 832                             	.LVL98:
 833                             	.L66:
 506:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 834                             		.loc 1 506 16 view .LVU298
 835 007e 66 A6                   		mov.L	#10, r6
 836 0080 2E E9                   		bra	.L59
 837                             	.L67:
 510:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 838                             		.loc 1 510 16 view .LVU299
 839 0082 66 A6                   		mov.L	#10, r6
 840 0084 2E E5                   		bra	.L59
 841                             	.LFE6:
 843 0086 EF 00                   		.section	.text.R_GLCDC_ColorCorrection,"ax",@progbits
 844                             		.global	_R_GLCDC_ColorCorrection
 846                             	_R_GLCDC_ColorCorrection:
 847                             	.LVL99:
 848                             	.LFB7:
 539:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 540:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
 541:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Function Name: R_GLCDC_ColorCorrection
 542:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 543:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@brief This function changes settings for brightness, contrast, and gamma correction of the GLCDC
 544:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] cmd Command to change the setting
 545:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] p_args Pointer to the setting parameter structure
 546:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_SUCCESS                    Processing has been completed successfully.
 547:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_PTR            The p_args parameter is NULL pointer.
 548:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_ARG            The argument set is invalid.
 549:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_MODE           Function cannot be executed in this mode.
 550:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_NOT_OPEN               R_GLCDC_Open has not been executed.
 551:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_UPDATE_TIMING  Update timing of the register is invalid.
 552:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_GAMMA_SETTING  Gamma correction setting is invalid.
 553:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@details This function changes settings for brightness, contrast, and gamma correction of the GLC
 554:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *changed is determined according to the first argument of this function. This function can be exec
 555:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *is 'GLCDC_STATE_DISPLAYING'. The mode remains unchanged after processing for this command is comp
 556:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@note None.
 557:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 558:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** glcdc_err_t R_GLCDC_ColorCorrection(glcdc_correction_cmd_t cmd, void const * const p_args)
 559:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** {
 849                             		.loc 1 559 1 is_stmt 1 view -0
 850                             		.loc 1 559 1 is_stmt 0 view .LVU301
 851 0000 6E 6A                   		pushm	r6-r10
 852                             	.LCFI6:
 560:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_correction_t *p_correction;
 853                             		.loc 1 560 5 is_stmt 1 view .LVU302
 561:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 562:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 563:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_err_t err = GLCDC_SUCCESS;
 854                             		.loc 1 563 5 view .LVU303
 855                             	.LVL100:
 564:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 565:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 566:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_CLOSED == g_ctrl_blk.state)
 856                             		.loc 1 566 5 view .LVU304
 857                             		.loc 1 566 41 is_stmt 0 view .LVU305
 858 0002 FB 72 00 00 00 00       		mov.L	#_g_ctrl_blk, r7
 859 0008 EC 77                   		mov.L	[r7], r7
 860                             		.loc 1 566 8 view .LVU306
 861 000a 61 07                   		cmp	#0, r7
 862 000c 3A B5 00                		beq	.L75
 567:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 568:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_NOT_OPEN;
 569:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 570:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_NOT_DISPLAYING == g_ctrl_blk.state)
 863                             		.loc 1 570 5 is_stmt 1 view .LVU307
 864                             		.loc 1 570 8 is_stmt 0 view .LVU308
 865 000f 61 17                   		cmp	#1, r7
 866 0011 3A B7 00                		beq	.L76
 571:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 572:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_MODE;
 573:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 574:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 575:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 576:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (NULL == p_args)
 867                             		.loc 1 576 5 is_stmt 1 view .LVU309
 868                             		.loc 1 576 8 is_stmt 0 view .LVU310
 869 0014 61 02                   		cmp	#0, r2
 870 0016 3A B6 00                		beq	.L77
 871 0019 EF 27                   		mov.L	r2, r7
 872 001b EF 1A                   		mov.L	r1, r10
 577:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 578:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_PTR;
 579:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 580:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 581:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 582:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Return immediately if the register updating are performed */
 583:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_is_output_ctrl_updating ())
 873                             		.loc 1 583 5 is_stmt 1 view .LVU311
 874                             		.loc 1 583 17 is_stmt 0 view .LVU312
 875 001d 05 00 00 00             		bsr	_r_glcdc_is_output_ctrl_updating
 876                             	.LVL101:
 877                             		.loc 1 583 8 view .LVU313
 878 0021 61 01                   		cmp	#0, r1
 879 0023 3B AD 00                		bne	.L78
 584:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 585:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_UPDATE_TIMING;
 586:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 587:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_is_gamma_updating ())
 880                             		.loc 1 587 5 is_stmt 1 view .LVU314
 881                             		.loc 1 587 17 is_stmt 0 view .LVU315
 882 0026 05 00 00 00             		bsr	_r_glcdc_is_gamma_updating
 883                             	.LVL102:
 884                             		.loc 1 587 8 view .LVU316
 885 002a 61 01                   		cmp	#0, r1
 886 002c 3B A8 00                		bne	.L79
 588:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 589:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_UPDATE_TIMING;
 590:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 591:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_is_register_reflecting ())
 887                             		.loc 1 591 5 is_stmt 1 view .LVU317
 888                             		.loc 1 591 17 is_stmt 0 view .LVU318
 889 002f 05 00 00 00             		bsr	_r_glcdc_is_register_reflecting
 890                             	.LVL103:
 891                             		.loc 1 591 8 view .LVU319
 892 0033 61 01                   		cmp	#0, r1
 893 0035 3B A3 00                		bne	.L80
 592:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 593:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_UPDATE_TIMING;
 594:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 595:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 596:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     switch (cmd)
 894                             		.loc 1 596 5 is_stmt 1 view .LVU320
 895 0038 61 1A                   		cmp	#1, r10
 896 003a 20 4A                   		beq	.L71
 897 003c 61 0A                   		cmp	#0, r10
 898 003e 20 0E                   		beq	.L72
 899 0040 61 2A                   		cmp	#2, r10
 900 0042 20 5A                   		beq	.L73
 901 0044 61 3A                   		cmp	#3, r10
 902 0046 20 64                   		beq	.L74
 597:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 598:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         case GLCDC_CORRECTION_CMD_SET_ALL:
 599:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 600:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             p_correction = (glcdc_correction_t *) p_args;
 601:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 602:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 603:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             err = r_glcdc_param_check_brightness (&p_correction->brightness);
 604:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 605:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 606:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return err;
 607:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 608:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 609:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             err = r_glcdc_param_check_gamma (&p_correction->gamma);
 610:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 611:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 612:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return err;
 613:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 614:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 615:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 616:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Configure the brightness and contrast and gamma correction register setting. */
 617:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_brightness_correction (&p_correction->brightness);
 618:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_contrast_correction (&p_correction->contrast);
 619:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_gamma_correction (&p_correction->gamma);
 620:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 621:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Reflect the output block section and gamma register setting. */
 622:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_output_ctrl_update ();
 623:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_gamma_update ();
 624:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 625:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             break;
 626:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 627:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         case GLCDC_CORRECTION_CMD_BRIGHTNESS:
 628:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 629:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 630:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             err = r_glcdc_param_check_brightness ((glcdc_brightness_t *) p_args);
 631:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 632:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 633:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return err;
 634:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 635:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 636:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Configure the brightness correction register setting. */
 637:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_brightness_correction ((glcdc_brightness_t *) p_args);
 638:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 639:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Reflect the output block section register setting. */
 640:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_output_ctrl_update ();
 641:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 642:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             break;
 643:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 644:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         case GLCDC_CORRECTION_CMD_CONTRAST:
 645:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 646:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Configure the contrast correction register setting. */
 647:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_contrast_correction ((glcdc_contrast_t *) p_args);
 648:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 649:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Reflect the output block section register setting. */
 650:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_output_ctrl_update ();
 651:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 652:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             break;
 653:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 654:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         case GLCDC_CORRECTION_CMD_GAMMA:
 655:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 656:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 657:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             err = r_glcdc_param_check_gamma ((glcdc_gamma_correction_t *) p_args);
 658:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 659:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 660:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 return err;
 661:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 662:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 663:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Configure the gamma correction register setting. */
 664:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_gamma_correction ((glcdc_gamma_correction_t *) p_args);
 665:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 666:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Reflect the gamma register setting. */
 667:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_gamma_update ();
 668:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 669:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             break;
 670:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 671:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         default:
 672:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             return GLCDC_ERR_INVALID_ARG;
 903                             		.loc 1 672 20 is_stmt 0 view .LVU321
 904 0048 66 3A                   		mov.L	#3, r10
 905                             	.LVL104:
 906                             		.loc 1 672 20 view .LVU322
 907 004a 2E 79                   		bra	.L69
 908                             	.LVL105:
 909                             	.L72:
 600:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 910                             		.loc 1 600 13 is_stmt 1 view .LVU323
 603:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 911                             		.loc 1 603 13 view .LVU324
 603:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 912                             		.loc 1 603 19 is_stmt 0 view .LVU325
 913 004c EF 71                   		mov.L	r7, r1
 914 004e 05 00 00 00             		bsr	_r_glcdc_param_check_brightness
 915                             	.LVL106:
 916 0052 EF 1A                   		mov.L	r1, r10
 917                             	.LVL107:
 604:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 918                             		.loc 1 604 13 is_stmt 1 view .LVU326
 604:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 919                             		.loc 1 604 16 is_stmt 0 view .LVU327
 920 0054 61 01                   		cmp	#0, r1
 921 0056 21 6D                   		bne	.L69
 609:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 922                             		.loc 1 609 13 is_stmt 1 view .LVU328
 609:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 923                             		.loc 1 609 46 is_stmt 0 view .LVU329
 924 0058 71 76 0C                		add	#12, r7, r6
 609:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 925                             		.loc 1 609 19 view .LVU330
 926 005b EF 61                   		mov.L	r6, r1
 927                             	.LVL108:
 609:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 928                             		.loc 1 609 19 view .LVU331
 929 005d 05 00 00 00             		bsr	_r_glcdc_param_check_gamma
 930                             	.LVL109:
 931 0061 EF 1A                   		mov.L	r1, r10
 932                             	.LVL110:
 610:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 933                             		.loc 1 610 13 is_stmt 1 view .LVU332
 610:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 934                             		.loc 1 610 16 is_stmt 0 view .LVU333
 935 0063 61 01                   		cmp	#0, r1
 936 0065 21 5E                   		bne	.L69
 617:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_contrast_correction (&p_correction->contrast);
 937                             		.loc 1 617 13 is_stmt 1 view .LVU334
 938 0067 EF 71                   		mov.L	r7, r1
 939                             	.LVL111:
 617:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_contrast_correction (&p_correction->contrast);
 940                             		.loc 1 617 13 is_stmt 0 view .LVU335
 941 0069 05 00 00 00             		bsr	_r_glcdc_brightness_correction
 942                             	.LVL112:
 618:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_gamma_correction (&p_correction->gamma);
 943                             		.loc 1 618 13 is_stmt 1 view .LVU336
 944 006d 71 71 08                		add	#8, r7, r1
 945 0070 05 00 00 00             		bsr	_r_glcdc_contrast_correction
 946                             	.LVL113:
 619:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 947                             		.loc 1 619 13 view .LVU337
 948 0074 EF 61                   		mov.L	r6, r1
 949 0076 05 00 00 00             		bsr	_r_glcdc_gamma_correction
 950                             	.LVL114:
 622:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             r_glcdc_gamma_update ();
 951                             		.loc 1 622 13 view .LVU338
 952 007a 05 00 00 00             		bsr	_r_glcdc_output_ctrl_update
 953                             	.LVL115:
 623:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 954                             		.loc 1 623 13 view .LVU339
 955 007e 05 00 00 00             		bsr	_r_glcdc_gamma_update
 956                             	.LVL116:
 625:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 957                             		.loc 1 625 13 view .LVU340
 958 0082 2E 41                   		bra	.L69
 959                             	.LVL117:
 960                             	.L71:
 630:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 961                             		.loc 1 630 13 view .LVU341
 630:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 962                             		.loc 1 630 19 is_stmt 0 view .LVU342
 963 0084 EF 71                   		mov.L	r7, r1
 964 0086 05 00 00 00             		bsr	_r_glcdc_param_check_brightness
 965                             	.LVL118:
 966 008a EF 1A                   		mov.L	r1, r10
 967                             	.LVL119:
 631:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 968                             		.loc 1 631 13 is_stmt 1 view .LVU343
 631:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 969                             		.loc 1 631 16 is_stmt 0 view .LVU344
 970 008c 61 01                   		cmp	#0, r1
 971 008e 21 35                   		bne	.L69
 637:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 972                             		.loc 1 637 13 is_stmt 1 view .LVU345
 973 0090 EF 71                   		mov.L	r7, r1
 974                             	.LVL120:
 637:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 975                             		.loc 1 637 13 is_stmt 0 view .LVU346
 976 0092 05 00 00 00             		bsr	_r_glcdc_brightness_correction
 977                             	.LVL121:
 640:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 978                             		.loc 1 640 13 is_stmt 1 view .LVU347
 979 0096 05 00 00 00             		bsr	_r_glcdc_output_ctrl_update
 980                             	.LVL122:
 642:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 981                             		.loc 1 642 13 view .LVU348
 982 009a 2E 29                   		bra	.L69
 983                             	.LVL123:
 984                             	.L73:
 647:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 985                             		.loc 1 647 13 view .LVU349
 986 009c EF 71                   		mov.L	r7, r1
 987 009e 05 00 00 00             		bsr	_r_glcdc_contrast_correction
 988                             	.LVL124:
 650:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 989                             		.loc 1 650 13 view .LVU350
 990 00a2 05 00 00 00             		bsr	_r_glcdc_output_ctrl_update
 991                             	.LVL125:
 652:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 992                             		.loc 1 652 13 view .LVU351
 673:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 674:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 675:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     return GLCDC_SUCCESS;
 993                             		.loc 1 675 12 is_stmt 0 view .LVU352
 994 00a6 66 0A                   		mov.L	#0, r10
 995                             	.LVL126:
 652:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 996                             		.loc 1 652 13 view .LVU353
 997 00a8 2E 1B                   		bra	.L69
 998                             	.LVL127:
 999                             	.L74:
 657:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 1000                             		.loc 1 657 13 is_stmt 1 view .LVU354
 657:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (GLCDC_SUCCESS != err)
 1001                             		.loc 1 657 19 is_stmt 0 view .LVU355
 1002 00aa EF 71                   		mov.L	r7, r1
 1003 00ac 05 00 00 00             		bsr	_r_glcdc_param_check_gamma
 1004                             	.LVL128:
 1005 00b0 EF 1A                   		mov.L	r1, r10
 1006                             	.LVL129:
 658:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 1007                             		.loc 1 658 13 is_stmt 1 view .LVU356
 658:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 1008                             		.loc 1 658 16 is_stmt 0 view .LVU357
 1009 00b2 61 01                   		cmp	#0, r1
 1010 00b4 21 0F                   		bne	.L69
 664:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 1011                             		.loc 1 664 13 is_stmt 1 view .LVU358
 1012 00b6 EF 71                   		mov.L	r7, r1
 1013                             	.LVL130:
 664:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 1014                             		.loc 1 664 13 is_stmt 0 view .LVU359
 1015 00b8 05 00 00 00             		bsr	_r_glcdc_gamma_correction
 1016                             	.LVL131:
 667:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 1017                             		.loc 1 667 13 is_stmt 1 view .LVU360
 1018 00bc 05 00 00 00             		bsr	_r_glcdc_gamma_update
 1019                             	.LVL132:
 669:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 1020                             		.loc 1 669 13 view .LVU361
 1021 00c0 0B                      		bra	.L69
 1022                             	.LVL133:
 1023                             	.L75:
 568:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1024                             		.loc 1 568 16 is_stmt 0 view .LVU362
 1025 00c1 66 5A                   		mov.L	#5, r10
 1026                             	.LVL134:
 1027                             		.balign 8,3,1
 1028                             	.L69:
 676:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_ColorCorrection() */
 1029                             		.loc 1 676 1 view .LVU363
 1030 00c3 EF A1                   		mov.L	r10, r1
 1031 00c5 3F 6A 05                		rtsd	#20, r6-r10
 1032                             	.LVL135:
 1033                             	.L76:
 572:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1034                             		.loc 1 572 16 view .LVU364
 1035 00c8 66 4A                   		mov.L	#4, r10
 1036 00ca 2E F9                   		bra	.L69
 1037                             	.L77:
 578:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1038                             		.loc 1 578 16 view .LVU365
 1039 00cc 66 1A                   		mov.L	#1, r10
 1040 00ce 2E F5                   		bra	.L69
 1041                             	.LVL136:
 1042                             	.L78:
 585:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1043                             		.loc 1 585 16 view .LVU366
 1044 00d0 66 AA                   		mov.L	#10, r10
 1045                             	.LVL137:
 585:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1046                             		.loc 1 585 16 view .LVU367
 1047 00d2 2E F1                   		bra	.L69
 1048                             	.LVL138:
 1049                             	.L79:
 589:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1050                             		.loc 1 589 16 view .LVU368
 1051 00d4 66 AA                   		mov.L	#10, r10
 1052                             	.LVL139:
 589:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1053                             		.loc 1 589 16 view .LVU369
 1054 00d6 2E ED                   		bra	.L69
 1055                             	.LVL140:
 1056                             	.L80:
 593:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1057                             		.loc 1 593 16 view .LVU370
 1058 00d8 66 AA                   		mov.L	#10, r10
 1059                             	.LVL141:
 593:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1060                             		.loc 1 593 16 view .LVU371
 1061 00da 2E E9                   		bra	.L69
 1062                             	.LFE7:
 1064 00dc 76 10 01 00             		.section	.text.R_GLCDC_ClutUpdate,"ax",@progbits
 1065                             		.global	_R_GLCDC_ClutUpdate
 1067                             	_R_GLCDC_ClutUpdate:
 1068                             	.LVL142:
 1069                             	.LFB8:
 677:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 678:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
 679:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Function Name:R_GLCDC_ClutUpdate
 680:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 681:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@brief This function updates the CLUT memory of the GLCDC. The updated CLUT memory is reflected i
 682:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] frame Graphics screen to change operation
 683:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] p_clut_cfg Pointer to the CLUT memory structure
 684:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_SUCCESS                    Processing has been completed successfully.
 685:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_PTR            The p_clut_cfg parameter is NULL pointer.
 686:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_ARG            The argument set is invalid.
 687:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_MODE           Function cannot be executed in this mode.
 688:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_NOT_OPEN               R_GLCDC_Open has not been executed.
 689:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_UPDATE_TIMING  Update timing of the register is invalid.
 690:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_CLUT_ACCESS    CLUT memory setting is invalid.
 691:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@details This function updates the CLUT memory of the GLCDC. This function can be executed when t
 692:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *'GLCDC_STATE_DISPLAYING'. The mode remains unchanged after processing in this function is complet
 693:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@note None.
 694:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 695:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** glcdc_err_t R_GLCDC_ClutUpdate(glcdc_frame_layer_t frame, glcdc_clut_cfg_t const * const p_clut_cfg
 696:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** {
 1070                             		.loc 1 696 1 is_stmt 1 view -0
 1071                             		.loc 1 696 1 is_stmt 0 view .LVU373
 1072 0000 6E 6A                   		pushm	r6-r10
 1073                             	.LCFI7:
 697:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 698:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 699:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_err_t err = GLCDC_SUCCESS;
 1074                             		.loc 1 699 5 is_stmt 1 view .LVU374
 1075                             	.LVL143:
 700:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 701:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 702:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Status check */
 703:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_CLOSED == g_ctrl_blk.state)
 1076                             		.loc 1 703 5 view .LVU375
 1077                             		.loc 1 703 41 is_stmt 0 view .LVU376
 1078 0002 FB 72 00 00 00 00       		mov.L	#_g_ctrl_blk, r7
 1079 0008 EC 75                   		mov.L	[r7], r5
 1080                             		.loc 1 703 8 view .LVU377
 1081 000a 61 05                   		cmp	#0, r5
 1082 000c 20 47                   		beq	.L84
 704:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 705:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_NOT_OPEN;
 706:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 707:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_NOT_DISPLAYING == g_ctrl_blk.state)
 1083                             		.loc 1 707 5 is_stmt 1 view .LVU378
 1084                             		.loc 1 707 8 is_stmt 0 view .LVU379
 1085 000e 61 15                   		cmp	#1, r5
 1086 0010 20 4A                   		beq	.L85
 708:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 709:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_MODE;
 710:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 711:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 712:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 713:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (NULL == p_clut_cfg)
 1087                             		.loc 1 713 5 is_stmt 1 view .LVU380
 1088                             		.loc 1 713 8 is_stmt 0 view .LVU381
 1089 0012 61 02                   		cmp	#0, r2
 1090 0014 20 4A                   		beq	.L86
 714:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 715:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_PTR;
 716:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 717:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if ((GLCDC_FRAME_LAYER_1 != frame) && (GLCDC_FRAME_LAYER_2 != frame))
 1091                             		.loc 1 717 5 is_stmt 1 view .LVU382
 1092                             		.loc 1 717 8 is_stmt 0 view .LVU383
 1093 0016 61 11                   		cmp	#1, r1
 1094 0018 24 4A                   		bgtu	.L87
 718:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 719:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_ARG;
 720:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 721:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 722:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 723:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (false == g_ctrl_blk.graphics_read_enable[frame])
 1095                             		.loc 1 723 5 is_stmt 1 view .LVU384
 1096                             		.loc 1 723 49 is_stmt 0 view .LVU385
 1097 001a 4B 17                   		add	r1, r7
 1098                             		.loc 1 723 8 view .LVU386
 1099 001c B3 F7                   		movu.B	14[r7], r7
 1100 001e 61 07                   		cmp	#0, r7
 1101 0020 20 46                   		beq	.L88
 1102 0022 EF 2A                   		mov.L	r2, r10
 1103 0024 EF 17                   		mov.L	r1, r7
 724:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 725:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_ARG;
 726:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 727:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 728:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 729:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     err = r_glcdc_param_check_clut (p_clut_cfg);
 1104                             		.loc 1 729 5 is_stmt 1 view .LVU387
 1105                             		.loc 1 729 11 is_stmt 0 view .LVU388
 1106 0026 EF 21                   		mov.L	r2, r1
 1107                             	.LVL144:
 1108                             		.loc 1 729 11 view .LVU389
 1109 0028 05 00 00 00             		bsr	_r_glcdc_param_check_clut
 1110                             	.LVL145:
 1111                             		.loc 1 729 11 view .LVU390
 1112 002c EF 16                   		mov.L	r1, r6
 1113                             	.LVL146:
 730:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_SUCCESS != err)
 1114                             		.loc 1 730 5 is_stmt 1 view .LVU391
 1115                             		.loc 1 730 8 is_stmt 0 view .LVU392
 1116 002e 61 01                   		cmp	#0, r1
 1117 0030 21 25                   		bne	.L82
 731:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 732:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return err;
 733:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 734:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 735:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 736:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 737:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Return immediately if the register updating is in progress. */
 738:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_is_gr_plane_updating (frame))
 1118                             		.loc 1 738 5 is_stmt 1 view .LVU393
 1119                             		.loc 1 738 17 is_stmt 0 view .LVU394
 1120 0032 EF 71                   		mov.L	r7, r1
 1121                             	.LVL147:
 1122                             		.loc 1 738 17 view .LVU395
 1123 0034 05 00 00 00             		bsr	_r_glcdc_is_gr_plane_updating
 1124                             	.LVL148:
 1125                             		.loc 1 738 8 view .LVU396
 1126 0038 61 01                   		cmp	#0, r1
 1127 003a 21 30                   		bne	.L89
 739:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 740:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_UPDATE_TIMING;
 741:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 742:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_is_register_reflecting ())
 1128                             		.loc 1 742 5 is_stmt 1 view .LVU397
 1129                             		.loc 1 742 17 is_stmt 0 view .LVU398
 1130 003c 05 00 00 00             		bsr	_r_glcdc_is_register_reflecting
 1131                             	.LVL149:
 1132                             		.loc 1 742 8 view .LVU399
 1133 0040 61 01                   		cmp	#0, r1
 1134 0042 21 2C                   		bne	.L90
 743:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 744:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_UPDATE_TIMING;
 745:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 746:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 747:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Update a color palette */
 748:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_clut_update (p_clut_cfg, frame);
 1135                             		.loc 1 748 5 is_stmt 1 view .LVU400
 1136 0044 EF 72                   		mov.L	r7, r2
 1137 0046 EF A1                   		mov.L	r10, r1
 1138 0048 05 00 00 00             		bsr	_r_glcdc_clut_update
 1139                             	.LVL150:
 749:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 750:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Reflect the graphics module register value */
 751:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_gr_plane_update (frame);
 1140                             		.loc 1 751 5 view .LVU401
 1141 004c EF 71                   		mov.L	r7, r1
 1142 004e 05 00 00 00             		bsr	_r_glcdc_gr_plane_update
 1143                             	.LVL151:
 752:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 753:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     return GLCDC_SUCCESS;
 1144                             		.loc 1 753 5 view .LVU402
 1145                             		.loc 1 753 12 is_stmt 0 view .LVU403
 1146 0052 0B                      		bra	.L82
 1147                             	.LVL152:
 1148                             	.L84:
 705:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1149                             		.loc 1 705 16 view .LVU404
 1150 0053 66 56                   		mov.L	#5, r6
 1151                             	.LVL153:
 1152                             		.balign 8,3,1
 1153                             	.L82:
 754:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_ClutUpdate() */
 1154                             		.loc 1 754 1 view .LVU405
 1155 0055 EF 61                   		mov.L	r6, r1
 1156 0057 3F 6A 05                		rtsd	#20, r6-r10
 1157                             	.LVL154:
 1158                             	.L85:
 709:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1159                             		.loc 1 709 16 view .LVU406
 1160 005a 66 46                   		mov.L	#4, r6
 1161 005c 2E F9                   		bra	.L82
 1162                             	.L86:
 715:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1163                             		.loc 1 715 16 view .LVU407
 1164 005e 66 16                   		mov.L	#1, r6
 1165 0060 2E F5                   		bra	.L82
 1166                             	.L87:
 719:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1167                             		.loc 1 719 16 view .LVU408
 1168 0062 66 36                   		mov.L	#3, r6
 1169 0064 2E F1                   		bra	.L82
 1170                             	.L88:
 725:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1171                             		.loc 1 725 16 view .LVU409
 1172 0066 66 36                   		mov.L	#3, r6
 1173 0068 2E ED                   		bra	.L82
 1174                             	.LVL155:
 1175                             	.L89:
 740:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1176                             		.loc 1 740 16 view .LVU410
 1177 006a 66 A6                   		mov.L	#10, r6
 1178                             	.LVL156:
 740:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1179                             		.loc 1 740 16 view .LVU411
 1180 006c 2E E9                   		bra	.L82
 1181                             	.LVL157:
 1182                             	.L90:
 744:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1183                             		.loc 1 744 16 view .LVU412
 1184 006e 66 A6                   		mov.L	#10, r6
 1185                             	.LVL158:
 744:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1186                             		.loc 1 744 16 view .LVU413
 1187 0070 2E E5                   		bra	.L82
 1188                             	.LFE8:
 1190 0072 74 10 01 00 00 00       		.section	.text.R_GLCDC_ClutUpdate_NoReflect,"ax",@progbits
 1191                             		.global	_R_GLCDC_ClutUpdate_NoReflect
 1193                             	_R_GLCDC_ClutUpdate_NoReflect:
 1194                             	.LVL159:
 1195                             	.LFB9:
 755:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 756:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
 757:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Function Name:R_GLCDC_ClutUpdate_NoReflect
 758:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 759:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@brief This function updates the CLUT memory of the GLCDC. However, the updated CLUT memory is no
 760:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] frame Graphics screen to change operation
 761:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[in] p_clut_cfg Pointer to the CLUT memory structure
 762:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_SUCCESS                    Processing has been completed successfully.
 763:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_PTR            The p_clut_cfg parameter is NULL pointer.
 764:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_ARG            The argument set is invalid.
 765:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_MODE           Function cannot be executed in this mode.
 766:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_NOT_OPEN               R_GLCDC_Open has not been executed.
 767:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_UPDATE_TIMING  Update timing of the register is invalid.
 768:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_CLUT_ACCESS    CLUT memory setting is invalid.
 769:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@details This function updates the CLUT memory of the GLCDC. This function can be executed when t
 770:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *'GLCDC_STATE_DISPLAYING'. The mode remains unchanged after processing in this function is complet
 771:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@note None.
 772:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 773:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** glcdc_err_t R_GLCDC_ClutUpdate_NoReflect(glcdc_frame_layer_t frame, glcdc_clut_cfg_t const * const 
 774:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** {
 1196                             		.loc 1 774 1 is_stmt 1 view -0
 1197                             		.loc 1 774 1 is_stmt 0 view .LVU415
 1198 0000 6E 6A                   		pushm	r6-r10
 1199                             	.LCFI8:
 775:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 776:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 777:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     glcdc_err_t err = GLCDC_SUCCESS;
 1200                             		.loc 1 777 5 is_stmt 1 view .LVU416
 1201                             	.LVL160:
 778:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 779:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 780:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Status check */
 781:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_CLOSED == g_ctrl_blk.state)
 1202                             		.loc 1 781 5 view .LVU417
 1203                             		.loc 1 781 41 is_stmt 0 view .LVU418
 1204 0002 FB 72 00 00 00 00       		mov.L	#_g_ctrl_blk, r7
 1205 0008 EC 75                   		mov.L	[r7], r5
 1206                             		.loc 1 781 8 view .LVU419
 1207 000a 61 05                   		cmp	#0, r5
 1208 000c 20 41                   		beq	.L94
 782:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 783:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_NOT_OPEN;
 784:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 785:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_NOT_DISPLAYING == g_ctrl_blk.state)
 1209                             		.loc 1 785 5 is_stmt 1 view .LVU420
 1210                             		.loc 1 785 8 is_stmt 0 view .LVU421
 1211 000e 61 15                   		cmp	#1, r5
 1212 0010 20 45                   		beq	.L95
 786:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 787:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_MODE;
 788:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 789:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 790:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 791:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (NULL == p_clut_cfg)
 1213                             		.loc 1 791 5 is_stmt 1 view .LVU422
 1214                             		.loc 1 791 8 is_stmt 0 view .LVU423
 1215 0012 61 02                   		cmp	#0, r2
 1216 0014 20 45                   		beq	.L96
 792:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 793:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_PTR;
 794:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 795:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if ((GLCDC_FRAME_LAYER_1 != frame) && (GLCDC_FRAME_LAYER_2 != frame))
 1217                             		.loc 1 795 5 is_stmt 1 view .LVU424
 1218                             		.loc 1 795 8 is_stmt 0 view .LVU425
 1219 0016 61 11                   		cmp	#1, r1
 1220 0018 24 45                   		bgtu	.L97
 796:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 797:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_ARG;
 798:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 799:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 800:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 801:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (false == g_ctrl_blk.graphics_read_enable[frame])
 1221                             		.loc 1 801 5 is_stmt 1 view .LVU426
 1222                             		.loc 1 801 49 is_stmt 0 view .LVU427
 1223 001a 4B 17                   		add	r1, r7
 1224                             		.loc 1 801 8 view .LVU428
 1225 001c B3 F7                   		movu.B	14[r7], r7
 1226 001e 61 07                   		cmp	#0, r7
 1227 0020 20 41                   		beq	.L98
 1228 0022 EF 2A                   		mov.L	r2, r10
 1229 0024 EF 17                   		mov.L	r1, r7
 802:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 803:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_ARG;
 804:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 805:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 806:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 807:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     err = r_glcdc_param_check_clut (p_clut_cfg);
 1230                             		.loc 1 807 5 is_stmt 1 view .LVU429
 1231                             		.loc 1 807 11 is_stmt 0 view .LVU430
 1232 0026 EF 21                   		mov.L	r2, r1
 1233                             	.LVL161:
 1234                             		.loc 1 807 11 view .LVU431
 1235 0028 05 00 00 00             		bsr	_r_glcdc_param_check_clut
 1236                             	.LVL162:
 1237                             		.loc 1 807 11 view .LVU432
 1238 002c EF 16                   		mov.L	r1, r6
 1239                             	.LVL163:
 808:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_SUCCESS != err)
 1240                             		.loc 1 808 5 is_stmt 1 view .LVU433
 1241                             		.loc 1 808 8 is_stmt 0 view .LVU434
 1242 002e 61 01                   		cmp	#0, r1
 1243 0030 21 20                   		bne	.L92
 809:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 810:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return err;
 811:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 812:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 813:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 814:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 815:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Return immediately if the register updating is in progress. */
 816:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_is_gr_plane_updating (frame))
 1244                             		.loc 1 816 5 is_stmt 1 view .LVU435
 1245                             		.loc 1 816 17 is_stmt 0 view .LVU436
 1246 0032 EF 71                   		mov.L	r7, r1
 1247                             	.LVL164:
 1248                             		.loc 1 816 17 view .LVU437
 1249 0034 05 00 00 00             		bsr	_r_glcdc_is_gr_plane_updating
 1250                             	.LVL165:
 1251                             		.loc 1 816 8 view .LVU438
 1252 0038 61 01                   		cmp	#0, r1
 1253 003a 21 2B                   		bne	.L99
 817:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 818:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_UPDATE_TIMING;
 819:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 820:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_is_register_reflecting ())
 1254                             		.loc 1 820 5 is_stmt 1 view .LVU439
 1255                             		.loc 1 820 17 is_stmt 0 view .LVU440
 1256 003c 05 00 00 00             		bsr	_r_glcdc_is_register_reflecting
 1257                             	.LVL166:
 1258                             		.loc 1 820 8 view .LVU441
 1259 0040 61 01                   		cmp	#0, r1
 1260 0042 21 27                   		bne	.L100
 821:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 822:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_UPDATE_TIMING;
 823:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 824:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 825:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Update a color palette */
 826:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     r_glcdc_clut_update (p_clut_cfg, frame);
 1261                             		.loc 1 826 5 is_stmt 1 view .LVU442
 1262 0044 EF 72                   		mov.L	r7, r2
 1263 0046 EF A1                   		mov.L	r10, r1
 1264 0048 05 00 00 00             		bsr	_r_glcdc_clut_update
 1265                             	.LVL167:
 827:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 828:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     return GLCDC_SUCCESS;
 1266                             		.loc 1 828 5 view .LVU443
 1267                             		.loc 1 828 12 is_stmt 0 view .LVU444
 1268 004c 0C                      		bra	.L92
 1269                             	.LVL168:
 1270                             	.L94:
 783:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1271                             		.loc 1 783 16 view .LVU445
 1272 004d 66 56                   		mov.L	#5, r6
 1273                             	.LVL169:
 1274 004f 03                      		.balign 8,3,1
 1275                             	.L92:
 829:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_ClutUpdate_NoReflect() */
 1276                             		.loc 1 829 1 view .LVU446
 1277 0050 EF 61                   		mov.L	r6, r1
 1278 0052 3F 6A 05                		rtsd	#20, r6-r10
 1279                             	.LVL170:
 1280                             	.L95:
 787:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1281                             		.loc 1 787 16 view .LVU447
 1282 0055 66 46                   		mov.L	#4, r6
 1283 0057 2E F9                   		bra	.L92
 1284                             	.L96:
 793:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1285                             		.loc 1 793 16 view .LVU448
 1286 0059 66 16                   		mov.L	#1, r6
 1287 005b 2E F5                   		bra	.L92
 1288                             	.L97:
 797:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1289                             		.loc 1 797 16 view .LVU449
 1290 005d 66 36                   		mov.L	#3, r6
 1291 005f 2E F1                   		bra	.L92
 1292                             	.L98:
 803:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1293                             		.loc 1 803 16 view .LVU450
 1294 0061 66 36                   		mov.L	#3, r6
 1295 0063 2E ED                   		bra	.L92
 1296                             	.LVL171:
 1297                             	.L99:
 818:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1298                             		.loc 1 818 16 view .LVU451
 1299 0065 66 A6                   		mov.L	#10, r6
 1300                             	.LVL172:
 818:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1301                             		.loc 1 818 16 view .LVU452
 1302 0067 2E E9                   		bra	.L92
 1303                             	.LVL173:
 1304                             	.L100:
 822:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1305                             		.loc 1 822 16 view .LVU453
 1306 0069 66 A6                   		mov.L	#10, r6
 1307                             	.LVL174:
 822:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1308                             		.loc 1 822 16 view .LVU454
 1309 006b 2E E5                   		bra	.L92
 1310                             	.LFE9:
 1312 006d FC 13 00                		.section	.text.R_GLCDC_GetStatus,"ax",@progbits
 1313                             		.global	_R_GLCDC_GetStatus
 1315                             	_R_GLCDC_GetStatus:
 1316                             	.LVL175:
 1317                             	.LFB10:
 830:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 831:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
 832:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Function Name: R_GLCDC_GetStatus
 833:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 834:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@brief This function obtains the GLCDC status.
 835:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param[out] p_status Pointer to the structure which stores the obtained status.
 836:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_SUCCESS           Processing has been completed successfully.
 837:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_INVALID_PTR   The p_status parameter is NULL pointer.
 838:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@retval GLCDC_ERR_NOT_OPEN      R_GLCDC_Open has not been executed.
 839:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@details This function obtains the GLCDC status. The obtained status is written to the p_status s
 840:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *with the argument. This function can be called at any time after the R_GLCDC_Open function is exe
 841:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *The mode remains unchanged after processing in this function is complete.
 842:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@note None.
 843:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 844:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 845:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** glcdc_err_t R_GLCDC_GetStatus(glcdc_status_t * const p_status)
 846:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** {
 1318                             		.loc 1 846 1 is_stmt 1 view -0
 1319                             		.loc 1 846 1 is_stmt 0 view .LVU456
 1320 0000 6E 6A                   		pushm	r6-r10
 1321                             	.LCFI9:
 847:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     uint8_t frame;
 1322                             		.loc 1 847 5 is_stmt 1 view .LVU457
 848:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 849:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (GLCDC_STATE_CLOSED == g_ctrl_blk.state)
 1323                             		.loc 1 849 5 view .LVU458
 1324                             		.loc 1 849 41 is_stmt 0 view .LVU459
 1325 0002 FB 72 00 00 00 00       		mov.L	#_g_ctrl_blk, r7
 1326 0008 EC 77                   		mov.L	[r7], r7
 1327                             		.loc 1 849 8 view .LVU460
 1328 000a 61 07                   		cmp	#0, r7
 1329 000c 3A 8B 00                		beq	.L114
 850:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 851:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_NOT_OPEN;
 852:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 853:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 854:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #if (GLCDC_CFG_PARAM_CHECKING_ENABLE)
 855:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (NULL == p_status)
 1330                             		.loc 1 855 5 is_stmt 1 view .LVU461
 1331                             		.loc 1 855 8 is_stmt 0 view .LVU462
 1332 000f 61 01                   		cmp	#0, r1
 1333 0011 3A 8A 00                		beq	.L115
 1334 0014 EF 1A                   		mov.L	r1, r10
 856:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 857:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         return GLCDC_ERR_INVALID_PTR;
 858:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 859:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** #endif
 860:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 861:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Return the GLCD driver state */
 862:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     p_status->state = g_ctrl_blk.state;
 1335                             		.loc 1 862 5 is_stmt 1 view .LVU463
 1336                             		.loc 1 862 21 is_stmt 0 view .LVU464
 1337 0016 E3 17                   		mov.L	r7, [r1]
 863:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 864:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Return the fading status for the layers */
 865:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 866:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* WAIT_LOOP */
 867:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     for (frame = 0; frame < GLCDC_FRAME_LAYER_NUM; frame++)
 1338                             		.loc 1 867 5 is_stmt 1 view .LVU465
 1339                             	.LVL176:
 1340                             		.loc 1 867 16 is_stmt 0 view .LVU466
 1341 0018 66 07                   		mov	#0, r7
 1342                             		.loc 1 867 5 view .LVU467
 1343 001a 2E 18                   		bra	.L104
 1344                             	.LVL177:
 1345                             	.L105:
 868:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 869:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         if (true == r_glcdc_is_gr_plane_updating ((glcdc_frame_layer_t) frame))
 870:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         {
 871:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             /* Fading status is uncertain (the reason is described above). */
 872:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             p_status->fade_status[frame] = GLCDC_FADE_STATUS_UNCERTAIN;
 873:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         }
 874:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         else
 875:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         {
 876:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             if (true == r_glcdc_is_fading ((glcdc_frame_layer_t) frame))
 1346                             		.loc 1 876 13 is_stmt 1 view .LVU468
 1347                             		.loc 1 876 25 is_stmt 0 view .LVU469
 1348 001c EF 61                   		mov.L	r6, r1
 1349 001e 05 00 00 00             		bsr	_r_glcdc_is_fading
 1350                             	.LVL178:
 1351                             		.loc 1 876 16 view .LVU470
 1352 0022 61 01                   		cmp	#0, r1
 1353 0024 20 2B                   		beq	.L107
 877:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 878:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 p_status->fade_status[frame] = GLCDC_FADE_STATUS_FADING_UNDERWAY;
 1354                             		.loc 1 878 17 is_stmt 1 view .LVU471
 1355                             		.loc 1 878 38 is_stmt 0 view .LVU472
 1356 0026 5B 75                   		movu.B	r7, r5
 1357                             		.loc 1 878 46 view .LVU473
 1358 0028 62 45                   		add	#4, r5
 1359 002a 66 14                   		mov.L	#1, r4
 1360 002c FE 25 A4                		mov.L	r4, [r5,r10]
 1361 002f 03                      		.balign 8,3,1
 1362                             	.L106:
 867:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 1363                             		.loc 1 867 57 discriminator 2 view .LVU474
 1364 0030 62 17                   		add	#1, r7
 1365                             	.LVL179:
 1366                             	.L104:
 867:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 1367                             		.loc 1 867 5 discriminator 1 view .LVU475
 1368 0032 5B 75                   		movu.B	r7, r5
 1369 0034 61 15                   		cmp	#1, r5
 1370 0036 24 24                   		bgtu	.L117
 869:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         {
 1371                             		.loc 1 869 9 is_stmt 1 view .LVU476
 869:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         {
 1372                             		.loc 1 869 21 is_stmt 0 view .LVU477
 1373 0038 5B 76                   		movu.B	r7, r6
 1374 003a EF 61                   		mov.L	r6, r1
 1375 003c 05 00 00 00             		bsr	_r_glcdc_is_gr_plane_updating
 1376                             	.LVL180:
 869:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         {
 1377                             		.loc 1 869 12 view .LVU478
 1378 0040 61 01                   		cmp	#0, r1
 1379 0042 20 DA                   		beq	.L105
 872:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         }
 1380                             		.loc 1 872 13 is_stmt 1 view .LVU479
 872:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         }
 1381                             		.loc 1 872 34 is_stmt 0 view .LVU480
 1382 0044 EF 65                   		mov.L	r6, r5
 872:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         }
 1383                             		.loc 1 872 42 view .LVU481
 1384 0046 62 45                   		add	#4, r5
 1385 0048 66 24                   		mov.L	#2, r4
 1386 004a FE 25 A4                		mov.L	r4, [r5,r10]
 1387 004d 2E E3                   		bra	.L106
 1388                             	.L107:
 879:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 880:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             else
 881:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             {
 882:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****                 p_status->fade_status[frame] = GLCDC_FADE_STATUS_NOT_UNDERWAY;
 1389                             		.loc 1 882 17 is_stmt 1 view .LVU482
 1390                             		.loc 1 882 38 is_stmt 0 view .LVU483
 1391 004f 5B 75                   		movu.B	r7, r5
 1392                             		.loc 1 882 46 view .LVU484
 1393 0051 62 45                   		add	#4, r5
 1394 0053 66 04                   		mov.L	#0, r4
 1395 0055 FE 25 A4                		mov.L	r4, [r5,r10]
 1396 0058 2E D8                   		bra	.L106
 1397                             	.L117:
 883:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****             }
 884:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         }
 885:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 886:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 887:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     /* Return the detected status for the vpos, gr1uf, gr2uf */
 888:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_vpos_int_status_check ())
 1398                             		.loc 1 888 5 is_stmt 1 view .LVU485
 1399                             		.loc 1 888 17 is_stmt 0 view .LVU486
 1400 005a 05 00 00 00             		bsr	_r_glcdc_vpos_int_status_check
 1401                             	.LVL181:
 1402                             		.loc 1 888 8 view .LVU487
 1403 005e 61 01                   		cmp	#0, r1
 1404 0060 20 23                   		beq	.L109
 889:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 890:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         p_status->state_vpos = GLCDC_DETECTED;
 1405                             		.loc 1 890 9 is_stmt 1 view .LVU488
 1406                             		.loc 1 890 30 is_stmt 0 view .LVU489
 1407 0062 F9 A6 01 01             		mov.L	#1, 4[r10]
 1408                             	.L110:
 891:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 892:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     else
 893:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 894:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         p_status->state_vpos = GLCDC_NOT_DETECTED;
 895:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 896:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_gr1uf_int_status_check ())
 1409                             		.loc 1 896 5 is_stmt 1 view .LVU490
 1410                             		.loc 1 896 17 is_stmt 0 view .LVU491
 1411 0066 05 00 00 00             		bsr	_r_glcdc_gr1uf_int_status_check
 1412                             	.LVL182:
 1413                             		.loc 1 896 8 view .LVU492
 1414 006a 61 01                   		cmp	#0, r1
 1415 006c 20 1D                   		beq	.L111
 897:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 898:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         p_status->state_gr1uf = GLCDC_DETECTED;
 1416                             		.loc 1 898 9 is_stmt 1 view .LVU493
 1417                             		.loc 1 898 31 is_stmt 0 view .LVU494
 1418 006e F9 A6 02 01             		mov.L	#1, 8[r10]
 1419                             	.L112:
 899:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 900:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     else
 901:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 902:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         p_status->state_gr1uf = GLCDC_NOT_DETECTED;
 903:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 904:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     if (true == r_glcdc_gr2uf_int_status_check ())
 1420                             		.loc 1 904 5 is_stmt 1 view .LVU495
 1421                             		.loc 1 904 17 is_stmt 0 view .LVU496
 1422 0072 05 00 00 00             		bsr	_r_glcdc_gr2uf_int_status_check
 1423                             	.LVL183:
 1424                             		.loc 1 904 8 view .LVU497
 1425 0076 61 01                   		cmp	#0, r1
 1426 0078 20 17                   		beq	.L113
 905:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 906:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         p_status->state_gr2uf = GLCDC_DETECTED;
 1427                             		.loc 1 906 9 is_stmt 1 view .LVU498
 1428                             		.loc 1 906 31 is_stmt 0 view .LVU499
 1429 007a F9 A6 03 01             		mov.L	#1, 12[r10]
 907:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 908:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     else
 909:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     {
 910:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****         p_status->state_gr2uf = GLCDC_NOT_DETECTED;
 911:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 912:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 913:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     return GLCDC_SUCCESS;
 1430                             		.loc 1 913 12 view .LVU500
 1431 007e 66 01                   		mov.L	#0, r1
 1432                             	.LVL184:
 1433                             		.balign 8,3,2
 1434                             	.L102:
 914:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_GetStatus() */
 1435                             		.loc 1 914 1 view .LVU501
 1436 0080 3F 6A 05                		rtsd	#20, r6-r10
 1437                             	.LVL185:
 1438                             	.L109:
 894:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1439                             		.loc 1 894 9 is_stmt 1 view .LVU502
 894:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1440                             		.loc 1 894 30 is_stmt 0 view .LVU503
 1441 0083 F9 A6 01 00             		mov.L	#0, 4[r10]
 1442 0087 2E DF                   		bra	.L110
 1443                             	.L111:
 902:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1444                             		.loc 1 902 9 is_stmt 1 view .LVU504
 902:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1445                             		.loc 1 902 31 is_stmt 0 view .LVU505
 1446 0089 F9 A6 02 00             		mov.L	#0, 8[r10]
 1447 008d 2E E5                   		bra	.L112
 1448                             	.L113:
 910:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1449                             		.loc 1 910 9 is_stmt 1 view .LVU506
 910:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1450                             		.loc 1 910 31 is_stmt 0 view .LVU507
 1451 008f F9 A6 03 00             		mov.L	#0, 12[r10]
 913:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_GetStatus() */
 1452                             		.loc 1 913 12 view .LVU508
 1453 0093 66 01                   		mov.L	#0, r1
 1454 0095 2E EB                   		bra	.L102
 1455                             	.LVL186:
 1456                             	.L114:
 851:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1457                             		.loc 1 851 16 view .LVU509
 1458 0097 66 51                   		mov.L	#5, r1
 1459                             	.LVL187:
 851:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1460                             		.loc 1 851 16 view .LVU510
 1461 0099 2E E7                   		bra	.L102
 1462                             	.LVL188:
 1463                             	.L115:
 857:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1464                             		.loc 1 857 16 view .LVU511
 1465 009b 66 11                   		mov.L	#1, r1
 1466                             	.LVL189:
 857:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     }
 1467                             		.loc 1 857 16 view .LVU512
 1468 009d 2E E3                   		bra	.L102
 1469                             	.LFE10:
 1471 009f 03                      		.section	.text.R_GLCDC_GetVersion,"ax",@progbits
 1472                             		.global	_R_GLCDC_GetVersion
 1474                             	_R_GLCDC_GetVersion:
 1475                             	.LFB11:
 915:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 916:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** /**************************************************************************************************
 917:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *Function Name: R_GLCDC_GetVersion
 918:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 919:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@brief This function returns the current version of this API.
 920:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@param None.
 921:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@return Version of this API.
 922:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@details This function will return the version of the currently running API. The version number i
 923:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *top 2 bytes are the major version number and the bottom 2 bytes are the minor version number.
 924:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *For example, Version 4.25 would be returned as 0x00040019.
 925:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  *@note None.
 926:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****  **************************************************************************************************
 927:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** 
 928:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** uint32_t R_GLCDC_GetVersion(void)
 929:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** {
 1476                             		.loc 1 929 1 is_stmt 1 view -0
 930:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c ****     return ((((uint32_t) GLCDC_RX_VERSION_MAJOR) << 16) | ((uint32_t) GLCDC_RX_VERSION_MINOR));
 1477                             		.loc 1 930 5 view .LVU514
 931:../src/smc_gen/r_glcdc_rx/src/r_glcdc_rx.c **** } /* End of function R_GLCDC_GetVersion() */
 1478                             		.loc 1 931 1 is_stmt 0 view .LVU515
 1479 0000 FB 1E 32 00 01          		mov.L	#0x10032, r1
 1480 0005 02                      		rts
 1481                             	.LFE11:
 1483                             		.global	_g_ctrl_blk
 1484                             		.section	.bss.g_ctrl_blk,"aw",@nobits
 1485                             		.balign 4
 1488                             	_g_ctrl_blk:
 1489 0000 00 00 00 00 00 00 00 00 		.zero	24
 1489      00 00 00 00 00 00 00 00 
 1489      00 00 00 00 00 00 00 00 
 1690                             	.Letext0:
 1691                             		.file 2 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1692                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1693                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 1694                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1695                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1696                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202311-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1697                             		.file 8 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_rx_compi
 1698                             		.file 9 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_lock
 1699                             		.file 10 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/mcu_int
 1700                             		.file 11 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_glcdc_rx/r_glcdc_rx_i
 1701                             		.file 12 "../src/smc_gen/r_glcdc_rx/src/r_glcdc_private.h"
 1702                             		.file 13 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/rx72n/r_bsp_l
 1703                             		.file 14 "D:\\e2_studio\\workspace\\FULLMONI_WIDE\\Firmware\\src\\smc_gen\\r_bsp/mcu/all/r_bsp_int
